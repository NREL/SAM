/*

	This script reads data from the CEC inverters Excel worksheet and adds
	new inverters to the SAM inverter library file.
	
	Instructions:
	
	1. Create a folder to store inverter library files for this update, for 
	   example, /CEC Inverters/CEC Inverters 2018-6-28.
	
	2.	Go to the CEC Inverter page: 
		http://www.gosolarcalifornia.ca.gov/equipment/inverters.php
		
	3.	Download the CEC workbook "Inverters List - Full Data" XLSX file to the 
	    folder you created in Step 1.
		
	4.	Put a copy of the CEC inverter library that you are updating in the
		the folder. You may want to append a date to the file name to keep
		track of which version you are updating.	
		
    5.	Run the script. The script reads data from the SAM inverter library
		file and the CEC workbook, and creates a new updated library file with
		data from both sources. It also creates a conversion log file.
    
    Note: The script can also convert data from a CSV file generated by EES
    from the LKT file included with the Solar Homes Partnership Calculator.
    
    Last modified 11/5/2018 to update columns for Nov 2018 Excel workbook
	
*/

// year value will appear in brackets next to inverter name in SAM library
// date_str is appended to library file name
date = split( date_time(), ' ' );
date_str = date[4] + '-' + date[1] + '-' + date[2];
year = date[4];


////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

// Converts CEC full data inverter worksheet into format originally output from
// LKT file by EES to avoid having to rewrite conversion code below. This also
// makes it possible to keep the code for EES-generated files in case we go back
// to that method.
function cec_xlsx_to_db( xlsx_in )
{

	outln('Attempting to open Excel file for conversion:\n  ' + xlsx_in );

	xl = xl_create( false );

	xl_open( xl, xlsx_in, false );

	first_data_row = 15; // index starts at 1 for Excel row numbers
	first_inverter_manufacturer = xl_get( xl, 'A'+to_string(first_data_row) );
	first_inverter_model = xl_get( xl, 'B'+to_string(first_data_row) );
	
	outln('File open.\nFirst inverter is ' + first_inverter_manufacturer + ': ' + first_inverter_model + '. If this is not the first inverter in the list, change the value of first_data_row to the row number of the first inverter in the CEC worksheet.');
	outln('Reading data...');
	i=0;
	db=[];
	next = xl_get( xl, 'A'+to_string(first_data_row) );
	while ( next != '' )
	{
		db[i][0] = xl_get( xl, 'A'+to_string(first_data_row+i) ); // manufacturer name
		db[i][0] = replace( db[i][0] , ',' , ' ' );
		db[i][0] = replace( db[i][0] , '.' , ' ' );
		db[i][0] = replace( db[i][0] , '  ' , ' ' );
		db[i][1] = xl_get( xl, 'B'+to_string(first_data_row+i) ); // model number
		db[i][2] = xl_get( xl, 'G'+to_string(first_data_row+i) ); // power rated continuous, kW
		db[i][3] = xl_get( xl, 'P'+to_string(first_data_row+i) ); // night tare loss, W
		db[i][4] = ''; // power rated continuous at 40 degrees (not in XLSX version) ** THESE ARE IN THE NOV 1, 2018 VERSION
		db[i][5] = ''; // night tare loss at 40 degrees (not in XLSX version)
	
		db[i][6] = xl_get( xl, 'S'+to_string(first_data_row+i) ); // voltage minimum, Vdc
		db[i][7] = xl_get( xl, 'T'+to_string(first_data_row+i) ); // voltage nominal, Vdc
		db[i][8] = xl_get( xl, 'U'+to_string(first_data_row+i) ); // voltage maximum, Vdc
	
		db[i][9] = xl_get( xl, 'V'+to_string(first_data_row+i) ); // power level 10, W
		db[i][10] = xl_get( xl, 'W'+to_string(first_data_row+i) ); // power level 20, W
		db[i][11] = xl_get( xl, 'X'+to_string(first_data_row+i) ); // power level 30, W
		db[i][12] = xl_get( xl, 'Y'+to_string(first_data_row+i) ); // power level 50, W
		db[i][13] = xl_get( xl, 'Z'+to_string(first_data_row+i) ); // power level 75, W
		db[i][14] = xl_get( xl, 'AA'+to_string(first_data_row+i) ); // power level 100, W

		db[i][15] = xl_get( xl, 'AB'+to_string(first_data_row+i) ); // efficiency vmin 10, %
		db[i][16] = xl_get( xl, 'AC'+to_string(first_data_row+i) ); // efficiency vmin 20, %
		db[i][17] = xl_get( xl, 'AD'+to_string(first_data_row+i) ); // efficiency vmin 30, %
		db[i][18] = xl_get( xl, 'AE'+to_string(first_data_row+i) ); // efficiency vmin 50, %
		db[i][19] = xl_get( xl, 'AF'+to_string(first_data_row+i) ); // efficiency vmin 75, %
		db[i][20] = xl_get( xl, 'AG'+to_string(first_data_row+i) ); // efficiency vmin 100, %
		db[i][21] = xl_get( xl, 'AH'+to_string(first_data_row+i) ); // efficiency vmin wtd, %

		db[i][22] = xl_get( xl, 'AI'+to_string(first_data_row+i) ); // efficiency vnom 10, %
		db[i][23] = xl_get( xl, 'AJ'+to_string(first_data_row+i) ); // efficiency vnom 20, %
		db[i][24] = xl_get( xl, 'AK'+to_string(first_data_row+i) ); // efficiency vnom 30, %
		db[i][25] = xl_get( xl, 'AL'+to_string(first_data_row+i) ); // efficiency vnom 50, %
		db[i][26] = xl_get( xl, 'AM'+to_string(first_data_row+i) ); // efficiency vnom 75, %
		db[i][27] = xl_get( xl, 'AN'+to_string(first_data_row+i) ); // efficiency vnom 100, %
		db[i][28] = xl_get( xl, 'AO'+to_string(first_data_row+i) ); // efficiency vnom wtd, %

		db[i][29] = xl_get( xl, 'AP'+to_string(first_data_row+i) ); // efficiency vmax 10, %
		db[i][30] = xl_get( xl, 'AQ'+to_string(first_data_row+i) ); // efficiency vmax 20, %
		db[i][31] = xl_get( xl, 'AR'+to_string(first_data_row+i) ); // efficiency vmax 30, %
		db[i][32] = xl_get( xl, 'AS'+to_string(first_data_row+i) ); // efficiency vmax 50, %
		db[i][33] = xl_get( xl, 'AT'+to_string(first_data_row+i) ); // efficiency vmax 75, %
		db[i][34] = xl_get( xl, 'AU'+to_string(first_data_row+i) ); // efficiency vmax 100, %
		db[i][35] = xl_get( xl, 'AV'+to_string(first_data_row+i) ); // efficiency vmax wtd, %

		db[i][36] = xl_get( xl, 'I'+to_string(first_data_row+i) ); // cec eff
		db[i][37] = xl_get( xl, 'M'+to_string(first_data_row+i) ); // built-in meter y/n
		db[i][38] = xl_get( xl, 'N'+to_string(first_data_row+i) ); // microinverter y/n
		db[i][39] = xl_get( xl, 'AW'+to_string(first_data_row+i) ); // sort order
		
		// nominal voltage not in database from EES, so this row will not exist in EES-generated file
		db[i][40] = xl_get( xl, 'H'+to_string(first_data_row+i) ); // nominal voltage Vac
	
		// Columns not translated are: description, CEC listing date, last update
		// UL 1741 certificate date, certification firmware tested, notes, 
		// As of November 2018, also: Utility Interactive, Smart Inverter Phase 1,
		// Smart Inverter Phase 1 with Tested Reactive Power Priority
		i++;
		next = xl_get( xl, 'A'+to_string(first_data_row+i+1) );
	}

	xl_close( xl );
	xl_free( xl );

	return db;

}

////////////////////////////////////////////////////////////////////////////////
// Main
////////////////////////////////////////////////////////////////////////////////

if (!yesno( 'Update CEC inverter library.\n' +
			'To run this script you need: ' +
			'1) Either a copy of "Inverters List - Full.xlsx" from the CEC website, ' + 
			'or "cec_inverters.csv" generated by EES from the CEC LKT file, and ' +
			'2) A copy of "CEC Inverters.csv" file from the SAM deploy/libraries folder.' +
			'\n\nAre you ready to continue?' )) exit;

// initialize counters for log
nadded = 0;
pmax_neg_or_zero = 0;
pmax_units_incorrect = 0;
paco_watts = 0;
pwrlvl_kw = 0;
coeff_gen_results_issue = 0;
missing_vac = 0;
cg_failed = 0;
pnt_negative = 0;
mppt_high_zero = 0;
mppt_low_zero = 0;
vdco_zero = 0;
paco_gt_pdco = 0;
paco_lt_75_pdco = 0;
mppt_vdco = 0;

// get file names
file1 = choose_file('', 'Choose current SAM CEC inverter library file to convert.', 'CSV Files|*.csv');
if ( file1 == '' ) exit;
file2 = choose_file('', 'Choose CEC database workbook or CSV file generated by EES', 'CSV or XLSX File|*.*');
if ( file2 == '' ) exit;

// read data from input file
outln('Getting data from current SAM library...');
db1 = csvread( file1 );
outln('Done.');

// open text file to write log
flogname = path_only(file2) + '/conversion_log.txt';
flog = open( flogname , 'w');
if ( flog == 0 )
	outln('Failed to open log file for writing.');
else	
	outln('Log file open for writing:\n  ' + flogname );

// write initial text to log
write_line( flog , '==========================================================================');
write_line( flog , 'CEC Inverter Database Conversion Log ' + date_time() );
write_line( flog , '===========================================================================');
write_line( flog , 'See report at bottom of file. Search for "**" to find problem inverters' );
write_line( flog , '---------------------------------------------------------------------------');
write_line( flog ,  'Number of inverters in current SAM library: ' + (#db1-3) );

// use input file extension to determine whether CEC database file is Excel workbook or from EES
// only need for testing during transition from EES file to Excel file
f2ext = ext_only( file_only( file2 ) );
ees_data = false;
if ( f2ext == 'csv' )
{
	ees_data = true;
	outln('Data is from EES-generated CSV file: ' + file2 + '.');
	db2 = csvread( file2, {'skip'=2} );
	outln('Done reading EES data from CSV.');
}
elseif ( f2ext == 'xlsx' )
{
	outln('Data is from CEC Excel file.');
	db2 = cec_xlsx_to_db( file2 );
	outln('Done reading CEC data from Excel file.');
}
else
{	
	msgbox( 'CEC database file must be either CSV or XSLX.\n\nPlease try again.');
	exit; 
}

write_line( flog ,  'Number of inverters in CEC database: ' + #db2 );

// create lookup table from current SAM library
write_line( flog , 'Adding inverters from current SAM library file to lookup table...');
C = {};
for( i=3;i<#db1;i++ )
	C{db1[i][0]} = db1[i];
write_line( flog , 'Done.');

outln('Adding data to lookup table...');	
// fields needed Vac(V), Paco(W), Pdco(W), Vdco(V), Pso(W), C0(1/W), C1(1/V),
// C2(1/V), C3(1/V), Pnt(W), Vdcmax(V), Idcmax(A), Mppt_low(V), Mppt_high(V)
test_sample = alloc(18,3); // data for one test sample
 

write_line( flog, 'Adding inverters from CEC database file to lookup table...');
for( i=0;i<#db2;i++ )
{
	name = db2[i][0] + ": " + db2[i][1];
	fields = db2[i];
	
	found = false;
	
	for (j=3;j<#db1 && !found; j++)
	{
		new_name = lower(name);
		old_name = left(db1[j][0],#name);
		if (lower(old_name) == new_name)
			found = true;
	}
	if ( !found )
	{
	
		// EES-generated data does not have value for Vac, so extract from
		// inverter name. Note that there are inverters with nominal Vac voltages
		// other than this list, e.g. Vac in latest CEC database as of Nov 2017. (Vac not 
		// used for coefficient calculations.)
		if ( ees_data == true )
		{
			Vac = fields[7];
			if (strpos(name,'208') > -1)
				Vac = '208';
			elseif (strpos(name,'240') > -1)
				Vac = '240';
			elseif (strpos(name,'277') > -1)
				Vac = "277";
			elseif (strpos(name,'480') > -1)
				Vac = '480';
		}
		else
			Vac = fields[40];
			
		name = name + ' ' +  ?(Vac=='')[Vac,'(N/A)'] + 'V [CEC ' + year + ']';
		write_line( flog ,  name);

		// Some inverters missing Vac, but not used in simulations so ok to keep
		// Vac may appear in inverter name
		if ( Vac == '' ) 
		{
			write_line( flog , '** Vac missing. Keeping this inverter (Vac not used in simulations).');
			missing_vac++;
		}

		Paco = to_real(fields[2]); 
		// Paco and power levels in CEC database are supposed to be in kW, 
		// but some are incorrectly specified in W. 
		// SAM coefficient generator expects Pac in W, and can accept
		// power levels for test data in W or kW.
		// All SAM library power specifications are in W.
		// Compare Paco to max power level and then adjust if necessary.
		w_to_kw = 1;
		Pmax = to_real(fields[14]); // power level at 100% load
		if(Pmax <= 0)
		{	
			write_line( flog , '** Pmax <=0. Skipping this inverter.');
			pmax_neg_or_zero++;
			continue;
		}
		if (Paco/Pmax == 1000) // Paco in W instead of kW 
		{
			Paco = Paco / 1000;
			write_line( flog , '** Paco converted from W to kW.');
			paco_watts++;
		}
		// For some inverters, part load power test data are given in W 
		// instead of kW. This results in Pso in kW instead of the expected W.
		// Example: Enphase IQ6Plus-72-ACM-US (208V) in Nov 15 2017 database
		elseif (Pmax/Paco == 1000 ) 
		{
			w_to_kw = 0.001;
			write_line( flog , '** Power levels converted from W to kW.');
			pwrlvl_kw++;
		}
		elseif (Pmax/Paco > 100 || Paco/Pmax > 100)
		{
			write_line( flog , '** Pmax and Paco units inconsistent.');
			pmax_units_incorrect++;
			continue;
		}	
		
		
		// convert to W for input to compute module and output to library
		Paco = Paco * 1000.0;

		for(j=0; j<6; j++)
		{
		// Vmin test data
			test_sample[j][0] = to_real(fields[9+j])*w_to_kw; //Pin
			test_sample[j][1] = fields[6]; // Vmin
			test_sample[j][2] = fields[15+j]; // eff
		// Vnom test data
			test_sample[6+j][0] = to_real(fields[9+j])*w_to_kw; //Pin
			test_sample[6+j][1] = fields[7]; // Vnom
			test_sample[6+j][2] = fields[22+j]; // eff
		// Vmax test data
			test_sample[12+j][0] = to_real(fields[9+j])*w_to_kw; //Pin
			test_sample[12+j][1] = fields[8]; // Vmax
			test_sample[12+j][2] = fields[29+j]; // eff
		}
		
		//call inv_cec_cg module
		obj = ssc_create();
		ssc_var(obj, 'inv_cec_cg_paco', Paco); // in W
		ssc_var(obj, 'inv_cec_cg_sample_power_units', 1); // kW test data
		ssc_var(obj, 'inv_cec_cg_test_samples', test_sample);
		result= ssc_exec(obj, 'inv_cec_cg', {'show_dialog'=false, 'hold_dialog'=false} );
		// Skip inverter when coefficient calculator fails.
		if(result != 0)
		{	
			write_line('** Failed to solve for inverter coefficients. Skipping this inverter.');
			cg_failed++;
			continue;
		}

		Pdco = ssc_var(obj, 'Pdco');
		Vdco = ssc_var(obj, 'Vdco');
		Pso = ssc_var(obj, 'Pso');
		c0 = ssc_var(obj, 'c0');
		c1 = ssc_var(obj, 'c1');
		c2 = ssc_var(obj, 'c2');
		c3 = ssc_var(obj, 'c3');

		ssc_free(obj);

		// Skip inverter when coefficient calculator returns zero or negative values
		// add check on high Pso value, e.g., Huawei 45KTL 11/4/2018
		str = '';
		if ( Pdco <= 0 ) str += 'Pdco <= 0, ';
		if ( Vdco <= 0 ) str += 'Vdco <= 0, ';
		if ( Pso <= 0 ) str += 'Pso <= 0, ';
		if ( Pso > 0.10 * Pdco ) str += 'Pso > 0.10 Pdco, ';
		// The following tests are from the find_bad_inverters.lk script
		if ( Paco >= Pdco ) str += 'Paco >= Pdco, ';
		if ( Paco < 0.75 * Pdco ) str += 'Paco < 0.75 Pdco, ';
		if ( to_real(fields[6]) > Vdco || to_real(fields[8]) < Vdco ) str += 'MPPT_low > Vdco or MPPT_hi < Vdco, ';
		if ( str != '' )
		{
			write_line( flog , '** ' + str + 'skipping this inverter.');
			coeff_gen_results_issue++;
			continue;
		}

		values = db1[3]; // first inverter in existing library
		values[0] = name;
		values[1] = to_real(Vac); // convert empty string to zero
		values[2] = Paco;
		values[3] = Pdco;
		values[4] = Vdco;
		values[5] = Pso;
		values[6] = c0;
		values[7] = c1;
		values[8] = c2;
		values[9] = c3;
		values[10] = to_real(fields[3]); // Pnt
		
		// This check on Pnt is a legacy check. Should be ok as of Nov 2017 data.
		// Some Pnt values in database have negative values.
		if (values[10] < 0) 
		{	
			values[10] = 0 - values[10];
			write_line( flog , '** Pnt < 0. Converted to positive value.');
			pnt_negative++;
		}
		
		values[11] = to_real(fields[8]); // Vdcmax = Vmax input

		// Some inverters may have Mppt high different than Vmax on data sheet,
		// but here we assume Mppt high = Vmax.
 		values[14] = to_real(fields[8]); // Mppt high = Vmax
		if ( values[14] <= 0 )
		{
			write_line( flog , '** MPPT_high <= 0. Skipping this inverter.');
			mppt_high_zero++;
			continue;
		}	
		
		if (Vdco == 0)
		{		
			values[12] = 0;
			write_line( flog , '** Vdco = 0. Skipping this inverter.');
			vdco_zero++;
			continue;
		}
		else 
			values[12] = Pdco / Vdco; // Idcmax = max input power / vdcmax (not used in simulation)
		
		values[13] = to_real(fields[6]); // Mppt low = Vmin
		if ( values[13] <= 0 )
		{
			write_line( flog , '** MPPT_low <= 0. Skipping this inverter.');
			mppt_low_zero++;
			continue;
		}
		
		C{name} = values;
		
		nadded++;
	}
	
}
outln('Done.');
outln('Processing data and writing to new library file...');
write_line('Done adding inverters to lookup table.');
// sort
write_line( flog , 'Sorting by inverter name.');
names = @C; // keys into the hash
stable_sort(names);

write_line( flog , 'Building new library...');
// copy the top three lines of header info
for( i=0;i<3;i++ )
	db3[i] = db1[i];
	
// copy the sorted data
for( i=0;i<#names;i++ )
	db3[i+3] = C{names[i]};
write_line( flog , 'Done.');

write_line( flog , 'Writing data to CSV library file...');
file3 = path_only(file2) + '/CEC Inverters ' + date_str + '.csv';
ok = csvwrite( file3, db3 );
if ( !ok )
	write_line( flog, 'Failed to write data to new library file ' + file3 + '. Make sure it is not open in Excel.');	
else
	write_line( flog, 'Done.\nSee new SAM library file\n  ' + file3 + '\nVerify manually by diff against the old file.\nRename to CEC Inverters.csv and replace file in SAM library folder.');

write_line( flog , '---------------------------------------------------------------------------');
write_line( flog , 'Old inverter library file:\n' );
write_line( flog , '  ' + file1 );
write_line( flog , 'CEC database file:\n' );
write_line( flog , ' ' + file2 );
write_line( flog , 'New inverter library file:\n' );
write_line( flog , ' ' + file3 );
write_line( flog , '---------------------------------------------------------------------------');
write_line( 'Number of inverters added: ' + nadded + '.' );
write_line( flog , 'Number of inverters in new SAM library: ' + #db3 + '.');
write_line( flog, 'Skipped because of problems:' );
write_line( flog , '  Coefficient generator calculated parameters with problems: ' + coeff_gen_results_issue);
write_line( flog , '  Pmax <= 0: ' + pmax_neg_or_zero);
write_line( flog , '  Pmax units do not match Paco units: ' + pmax_units_incorrect);
write_line( flog , '  Coefficient generator failed: ' + cg_failed );
write_line( flog, 'Data issues but not skipped:' );
write_line( flog , '  Pnt negative converted to positive: ' + pnt_negative);
write_line( flog , '  Paco converted from  W to kW: ' + paco_watts);
write_line( flog , '  Power levels converted from W to kW: ' + pwrlvl_kw);
write_line( flog , '  Vac missing (not used in simulations): ' + missing_vac );
write_line( flog , '  MPPT_high <= 0: ' + mppt_high_zero );
write_line( flog , '  MPPT_low <= 0: ' + mppt_low_zero );
write_line( flog , '  Vdco = 0: ' + vdco_zero );
write_line( flog , '  Paco > Pdco: ' + paco_gt_pdco );
write_line( flog , '  Pac < 0.75 Pdco: ' + paco_lt_75_pdco );
write_line( flog , '  MPPT_high < vdco or MPPT_low > vdco: ' + mppt_vdco );

close( flog);
outln('Done.\nSee log file for details:\n  ' + flogname);
msgbox('Success!\nNew inverter library file:\n' + file3 + 
       '\n\nSee log file for details:\n' + flogname );

browse( flogname );       
