/*
	This script reads PV module datasheet parameters from a SAM case or a CSV
	file, and runs the SSC 6parsolve module to generate coefficients for the CEC
	module model.
	
	If 6parsolve fails, it varies parameter values to see if a small change will
	help the solver find a solution.
	
	Use with trouble-modules.csv. Set csv_row to the row number in the CSV file 
	(Row 0 is the header row) to read data for a module in the file.

*/
csv_row = 12;

// read datasheet parameters from CSV file
function get_params_from_file( n )
{
	P = {};
	T = csvread( cwd() + '/trouble-modules.csv', {'table' = true } );
	if ( n == null ) 
	{
		P = T;
	}
	else
	{
		P.manufacturer = T.Manufacturer[n-1];
		P.name = T.Name[n-1];
		P.notes = T.Notes[n-1];
		P.cell_type = T.celltype[n-1];
		P.tnoct = to_real(T.Tref[n-1]);
		P.vmp = to_real(T.Vmp[n-1]);
		P.imp = to_real(T.Imp[n-1]);
		P.voc = to_real(T.Voc[n-1]);
		P.isc = to_real(T.Isc[n-1]);
		P.alpha_isc = to_real(T.alpha_isc[n-1]);
		P.beta_voc = to_real(T.beta_voc[n-1]);
		P.gamma_pmp = to_real(T.gamma_pmp[n-1]);
		P.cells_in_series = to_real(T.Nser[n-1]);
		P.source = T.Source[n-1];
	}
	return P;
}

// read datasheet parameters from case in SAM file
function get_params( case )
{
	if ( case != '' ) { active_case( case ); }
	cell_types = ['monoSi', 'multiSi', 'CdTe', 'CIS', 'CIGS', 'Amorphous' ];
	T.cell_type = cell_types[get('6par_celltech')];
	T.tnoct = get('6par_tnoct');
	T.vmp = get('6par_vmp');
	T.imp = get('6par_imp');
	T.pmp = T.vmp * T.imp;
	T.voc = get('6par_voc');
	T.isc = get('6par_isc');
	T.beta_voc = get('6par_bvoc'); // V/C
	T.alpha_isc = get('6par_aisc'); // A/C
	T.gamma_pmp = get('6par_gpmp'); // %/C
	T.cells_in_series = get('6par_nser');
	outln(T);
	return( T );
}

function set_params( T, vmp, imp, voc, isc, alpha, beta, gamma, nser )
{
	set( '6par_celltech', T.cell_type );
	set( '6par_tnoct', T.tnoct );
	set( '6par_vmp', vmp );
	set( '6par_imp', imp );
	set( '6par_voc', voc );
	set( '6par_isc', isc );
	set( '6par_bvoc_display', beta );
	set( '6par_aisc_display', alpha );
	set( '6par_bvoc_units', 0 );
	set( '6par_aisc_units', 0 );
	set( '6par_gpmp', gamma );
}

function solve_check_status( vmp, imp, voc, isc, alpha, beta, gamma )
{
	ssc_var(par, 'Vmp', vmp );
	ssc_var(par, 'Imp', imp );
	ssc_var(par, 'Voc', voc );
	ssc_var(par, 'Isc', isc );
	ssc_var(par, 'beta_voc', beta );
	ssc_var(par, 'alpha_isc', alpha );
	ssc_var(par, 'gamma_pmp', gamma );
	outln('Vmp: ' + vmp + ' Imp: ' + imp + ' Voc: ' + voc + ' Isc: ' + isc + ' beta_voc: ' + beta + ' alpha_isc: ' + alpha + ' gamma_pmp: ' + gamma );
	status = ssc_exec(par, '6parsolve');
	return status;
}

function six_par_print_results()
{
	a = ssc_var(par, 'a');
	Il = ssc_var(par, 'Il');
	Io = ssc_var(par, 'Io');
	Rs = ssc_var(par,  'Rs');
	Rsh = ssc_var(par, 'Rsh');
	Adj = ssc_var(par, 'Adj');
	outln('a: ' + to_string(a) + ' Il: ' + Il + ' Io: ' + Io + ' Rs: ' + Rs + ' Rsh: ' + Rs + ' Adj: ' + Adj);
}

function create_range(low, high, n)
{
	array = alloc(n);
	d = (high - low) / (n - 1);
	for (i = 0; i < n; i++){
		array[i] = low + i*d;
	}
	return array;
}

par = ssc_create();

// read parameters from case in SAM file
//P = get_params( 'original' );

// read parameters from CSV file
P = get_params_from_file( csv_row );

outln(P);

// case name to write datasheet parameters
// NOTE: need to add call to set_params() below for this to work
//active_case( 'test script' );

ssc_var(par, 'celltype', P.cell_type );
ssc_var(par, 'Vmp', P.vmp );
ssc_var(par, 'Imp', P.imp );
ssc_var(par, 'Voc', P.voc );
ssc_var(par, 'Isc', P.isc );
ssc_var(par, 'beta_voc', P.beta_voc );
ssc_var(par, 'alpha_isc', P.alpha_isc );
ssc_var(par, 'gamma_pmp', P.gamma_pmp );
ssc_var(par, 'Nser', P.cells_in_series );
ssc_var(par, 'Tref', P.tnoct );

// test original parameters
outln('Test original parameters');
outln( P );
test = ssc_exec(par, '6parsolve' );
if ( test == 0 ) 
{
	six_par_print_results(); 
	exit;
}
else { outln( test ); }
outln();

// try adjusting cell type
cell_types = ['monoSi', 'multiSi', 'cdte', 'cis', 'cigs', 'amorphous' ];
type = ssc_var(par,'celltype');
outln( 'Trying cell types, original is ' + type );
for (i=0; i<#cell_types; i++ )
{
	outln( cell_types[i] + ':' );
	ssc_var(par,'celltype',cell_types[i]);
	test = ssc_exec(par, '6parsolve' );
	if ( test == 0 )
	{
		six_par_print_results(); 
		exit; 
	}
	else { outln(test); }
}
ssc_var(par,'celltype',type);
outln();

// try adjusting number of cells
n_cells = [6, 10, 12, 15, 27, 30, 36, 40, 48, 55, 60, 72, 75, 96, 110, 120, 135, 144, 150, 270 ];
nser = ssc_var(par,'Nser');
outln('Trying cells in series, original is ' + nser + ' cells');
for (i=0; i<#n_cells; i++ )
{
	outln( n_cells[i] + ' cells:' );
	ssc_var(par,'Nser',n_cells[i]);
	test = ssc_exec(par, '6parsolve' );
	if ( test == 0 ) 
	{
		six_par_print_results(); 
		exit;
	}
	else { outln( test ); }
}
ssc_var(par,'Nser',nser);
outln();

low_pct = 0.98;
high_pct = 1.02;
n_iter = 2;

Vmp_range = [low_pct * ssc_var(par, 'Vmp'), high_pct * ssc_var(par, 'Vmp')];
Vmp_range = create_range(Vmp_range[0], Vmp_range[1], n_iter);
Imp_range = [low_pct* ssc_var(par, 'Imp'), high_pct * ssc_var(par, 'Imp')];
Imp_range = create_range(Imp_range[0], Imp_range[1], n_iter);
Voc_range = [low_pct * ssc_var(par, 'Voc'), high_pct * ssc_var(par, 'Voc')];
Voc_range = create_range(Voc_range[0], Voc_range[1], n_iter);
Isc_range = [low_pct * ssc_var(par, 'Isc'), high_pct * ssc_var(par, 'Isc')];
Isc_range = create_range(Isc_range[0], Isc_range[1], n_iter);
beta_range = [low_pct * ssc_var(par, 'beta_voc'), high_pct * ssc_var(par, 'beta_voc')];
beta_range = create_range(beta_range[0], beta_range[1], n_iter);
alpha_range = [low_pct * ssc_var(par, 'alpha_isc'), high_pct * ssc_var(par, 'alpha_isc')];
alpha_range = create_range(alpha_range[0], alpha_range[1], n_iter);
gamma_range = [low_pct * ssc_var(par, 'gamma_pmp'), high_pct * ssc_var(par, 'gamma_pmp')];
gamma_range = create_range(gamma_range[0], gamma_range[1], n_iter);

// don't vary these parameters
/*
vmp = ssc_var(par, 'Vmp');
imp = ssc_var(par, 'Imp');
beta = ssc_var(par, 'beta_voc');
alpha = ssc_var(par, 'alpha_isc');
gamma = ssc_var(par, 'gamma_pmp');
voc = ssc_var(par, 'voc');
*/

solved = false;
outln('Varying parameters');
for (ivmp = 0; ivmp < n_iter; ivmp++){
	vmp = Vmp_range[ivmp];
	for (iimp = 0; iimp < n_iter; iimp++){
		imp = Imp_range[ivmp];
		for (ivoc = 0; ivoc < n_iter; ivoc++){
			voc = Voc_range[ivoc];
			for (iisc = 0; iisc < n_iter; iisc++){
				isc = Isc_range[iisc];
				for (ib = 0; ib < n_iter; ib++){
					beta = beta_range[ib];
					for (ia = 0; ia < n_iter; ia++){
						alpha = alpha_range[ia];
						for (ig = 0; ig < n_iter; ig++){
							gamma = gamma_range[ig];
							status = solve_check_status(vmp, imp, voc, isc, alpha, beta, gamma);
							if ( status == 0 ){
								set_params(vmp, imp, voc, isc, alpha, beta, gamma);
								six_par_print_results();
								//outln('Found solution: Power: ' + to_string(vmp * imp));
								solved = true;
								break;
							}
							else {outln(status);}
							if (solved){break;}
						}
						if (solved){break;}
					}
					if (solved){break;}
				}
				if (solved){break;}
			}
			if (solved){break;}
		}
		if (solved){break;}
	}
	if (solved){break;}
}

ssc_free(par);