////////////////////////////////////////////////////////////////////////////////
/*

This script downloads rate data from the OpenEI Utility Rate Database (URDB)
given an OpenEI GUID. It reads the data and assigns values to the input 
variables on the Electricity Rates page.

To search the database, go to http://en.openei.org/apps/IURDB/, and read
the GUID from the URL returned by the search results. For example, a search
for Portland General Electric residential TOU rates yields the URL 
http://en.openei.org/apps/IURDB/rate/view/57741e36682bea19c37ca074, which is
guid = 57741e36682bea19c37ca074. 

Note that this script displays all of the available data from the JSON string
returned by the database in the "Description" input on the Electricity
Rates page.

Tested in SAM 2020.2.29 r2

*/
////////////////////////////////////////////////////////////////////////////////

// Sample GUIDs for different types of rate structures
//guid = '55fc806b682bea28da63d254'; //monthly demand single rate no tiers, no TOU demand
//guid = '55fc8095682bea28da63f4d0'; //monthly demand two rates no tiers, no TOU demand
//guid = '55fc8071682bea28da63d6d8'; //monthly demand single rate no tiers, with TOU demand
//guid = '58810cb2682bea22db37fc0c'; //monthly demand three rates no tiers, no TOU demand
//guid = '55fc8077682bea28da63dc7a'; //monthly demand four rates four tiers, no TOU demand
guid = '5881345e5457a35973316ce7'; //no data (this is a GUID for the URDB, not the IURDB)
//guid = '57741e35682bea19c37ca072'; //energy rate two tiers no TOU, no demand


////////////////////////////////////////////////////////////////////////////////
//
// DOWNLOAD RATE DATA
//
////////////////////////////////////////////////////////////////////////////////

// Use SAM's built-in API key. You can use your own key if you have one.
apikey = '<SAMAPIKEY>';
url = 'http://api.openei.org/utility_rates?version=4&format=json&detail=full&getpage=' + guid + '&api_key=' + apikey;

// Download the JSON string from the URDB
json = curl(url); // without progress bar
//json = curl(url , {'message'='Downloading data...' }); // with message box and progress bar
// Convert the JSON string to a table
data = json_read(json);
// If table is empty, display a message
if ( #data.items == 0 )
{
	outln('No data for GUID = ' + guid + '. Exiting script.');
	exit;
}
else
	rates = data.items[0];

////////////////////////////////////////////////////////////////////////////////
//
// METADATA
//
// This is information from the OpenEI database that is stored in SAM input
// for display on the Electricity Rates page that are not used by SAM's 
// electricity bill calculator
//
////////////////////////////////////////////////////////////////////////////////

// Store string with complete contents of data table to display for reference
keys = @rates;
data_str = '';
for( i=0; i<#keys; i++)
		data_str = data_str + keys[i] + ' = ' + rates{keys[i]} + '\n';

data_str =	'\n++++++++++++++++++++++++++\n' 
			+ 'All Data from JSON String:' 
			+ '\n++++++++++++++++++++++++++\n' 
			+ data_str;
outln(data_str);

// Description inputs (not used in electricity bill calculations)
set('ur_name',rates.utility);
set('ur_schedule_name',rates.name);
set('ur_source',rates.source);
set('ur_start_date',rates.startdate);
set('ur_end_date',rates.enddate);
set('ur_uri',rates.uri);
set('ur_description',rates.description + '\n' + data_str);

// Applicability inputs (not used in electricity bill calculations)
set('ur_demand_min', rates.peakkwcapacitymin);
set('ur_demand_max', rates.peakkwcapacitymax);
set('ur_demand_history',rates.ur_energy_minpeakkwcapacityhistory);
set('ur_energy_min',rates.peakkwhusagemin);
set('ur_energy_max',rates.peakkwhusagemax);
set('ur_energy_history',rates.peakkwhusagehistory);
set('ur_voltage_min',rates.voltageminimum);
set('ur_voltage_max',rates.voltagemaximum);
set('ur_voltage_category',rates.voltagecategory);
set('ur_phase_wiring',rates.phasewiring);

////////////////////////////////////////////////////////////////////////////////
//
// FIXED CHARGE
//
////////////////////////////////////////////////////////////////////////////////

set('ur_monthly_fixed_charge',rates.fixedmonthlycharge);

////////////////////////////////////////////////////////////////////////////////
//
// ENERGY RATES
//
////////////////////////////////////////////////////////////////////////////////

// Build 2D array containing all ones for default schedule matrix
// for both energy and demand TOU schedules
for ( m=0; m<12; m++ )
{
	for ( h=0; h<24; h++ )
	{
		default_schedule[m][h]=0;
	}
}

er_periods = rates.energyratestructure;

// Create default energy rate table in case database has no energy rate data
// 1 period, 1 tier, max=1e38, max units=kWh, buy=0, sell=0
er_table=alloc(1);
er_table[0]=[1,1,1e38,0,0,0];

// Count number of rows needed for energy rate table
er_table_rows = 0;
if ( er_periods != null )
{
	for ( p=0; p<#er_periods; p++ )
	{
		er_tiers = er_periods[p];
		for ( t=0; t<#er_tiers; t++ )
			er_table_rows++;
	}
}

// Build energy rate table
if( er_table_rows > 0 ) 
{
	r=0;
	for ( i=0; i<er_table_rows; i++ )
	{
		er_table[i] = [0,0,0,0,0,0]; //Period,Tier,Max. Usage,Max. Usage Units, Buy ($/kWh),Sell ($/kWh)
	}
	for ( p=0; p<#er_periods; p++ )
	{
		er_tiers = er_periods[p];
		for ( t=0; t<#er_periods[p]; t++ )
		{
			er_max = er_tiers[t].max;
			if ( er_max == null ) er_max = 1e38;
			
			er_buy = er_tiers[t].rate;
			if ( er_buy == null ) er_buy = 0;
			
			er_sell = er_tiers[t].sell;
			if ( er_sell == null ) er_sell = 0;
			
			er_adj = er_tiers[t].adj;
			if ( er_adj == null ) er_adj = 0;
			
			er_units = er_tiers[t].unit;
			iunits = -1;
			if (lower(er_units) == 'kwh') 
				iunits = 0;
			else if (lower(er_units) == 'kwh/kw')
				iunits = 1;
			else if (lower(er_units) == 'kwh daily')
				iunits = 2;
			else if (lower(er_units) == 'kwh/kw daily')
				iunits = 3;

			er_table[r][0] = p+1;
			er_table[r][1] = t+1;
			er_table[r][2] = er_max;
			er_table[r][3] = iunits;
			er_table[r][4] = er_buy+er_adj;
			er_table[r][5] = er_sell;
			
			r++;
		}
	}
}

// Read energy TOU schedule matrix data from database
schedule_erwd = rates.energyweekdayschedule;
schedule_erwe = rates.energyweekendschedule;

// Use default schedule if no energy TOU schedule data in database
if ( schedule_erwd == null ) schedule_erwd = default_schedule;
if ( schedule_erwe == null ) schedule_erwe = default_schedule;

// Increment energy TOU schedule period numbers by one to convert from 0-11 to 1-12
for ( m=0; m<#schedule_erwd; m++ )
{
	for ( h=0; h<#schedule_erwd[0]; h++ )
	{
		schedule_erwd[m][h]++;
		schedule_erwe[m][h]++;
	}
}

set('ur_ec_tou_mat',er_table);
set('ur_ec_sched_weekday',schedule_erwd);
set('ur_ec_sched_weekend',schedule_erwe);

////////////////////////////////////////////////////////////////////////////////
//
// DEMAND RATES
//
////////////////////////////////////////////////////////////////////////////////

// Enable demand rates if database includes demand data
enable_demand = 0;

////////////////////////////////////////////////////////////////////////////////
// Demand Rates by Month with Optional Tiers
////////////////////////////////////////////////////////////////////////////////

// Read demand by month data from database
drm_p_nums = rates.flatdemandmonths; // period numbers by month [ 2, 2, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2 ]
drm_periods = rates.flatdemandstructure; //[ [ { rate=7.15 } ], [ { rate=4.82 } ], [ { rate=4.47 } ] ]

// Create a default monthly demand rate table in case database has no monthly demand data
// 12 months, 1 tier per month, max=1e38, rate=0
for (m=0;m<12;m++)
{
	drm_table[m]=[m,1,1e38,0];
}

// Build the monthly demand table
if ( drm_periods != null )
{
	enable_demand == 1;
	r=0;
	for ( m=0; m<#drm_p_nums; m++ )
	{
		p_num = drm_p_nums[m];
		drm_tiers = drm_periods[p_num];
		for ( t=0; t<#drm_tiers; t++ )
		{
			drm_max = drm_tiers[t].max;
			if ( drm_max == null ) drm_max = 1e38;
			
			drm_rate = drm_tiers[t].rate;
			if ( drm_rate == null ) drm_rate = 0;
			
			drm_adj = drm_tiers[t].adj;
			if ( drm_adj == null ) drm_adj = 0;
			
			drm_table[r][0] = m;
			drm_table[r][1] = t+1;
			drm_table[r][2] = drm_max;
			drm_table[r][3] = drm_rate + drm_adj;
			r++;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// Demand Rates by Time-of-user Period and/or Tiers
////////////////////////////////////////////////////////////////////////////////

// Read TOU demand data from database
dr_periods = rates.demandratestructure;

// Create a default TOU demand rate table in case database has no TOU rate data
dr_table[0]=[1,1,1e38,0];

// Count number of rows for TOU demand rate table with all zeros
dr_table_rows = 0;
if ( dr_periods != null ) 
{
	enable_demand = 1;
	for ( p=0; p<#dr_periods; p++ )
	{
		dr_tiers = dr_periods[p];
		for ( t=0; t<#dr_tiers; t++ )
		{
			dr_table_rows++;
		}
	}
}

// Build TOU demand rate table
if ( dr_table_rows > 0 )
{
	r=0;
	for ( i=0; i<dr_table_rows; i++ )
	{
		dr_table[i] = [0,0,0,0]; //Period,Tier,Peak (kW),Charge ($/kW)
	}
	for ( p=0; p<#dr_periods; p++ )
	{
		dr_tiers = dr_periods[p];
		for ( t=0; t<#dr_tiers; t++ )
		{
			dr_max = dr_tiers[t].max;
			if ( dr_max == null ) dr_max = 1e38;
			
			dr_rate = dr_tiers[t].rate;
			if ( dr_rate == null ) dr_rate = 0;
			
			dr_adj = dr_tiers[t].adj;
			if ( dr_adj == null ) dr_adj = 0;
			
			dr_table[r][0] = p + 1;
			dr_table[r][1] = t + 1;
			dr_table[r][2] = dr_max;
			dr_table[r][3] = dr_rate + dr_adj;
			
			r++;
		}
	}	
}


// Read TOU demand schedule data from database
schedule_drwd = rates.demandweekdayschedule;
schedule_drwe = rates.demandweekendschedule;

// Use default schedule no TOU demand schedule in database
if (schedule_drwd == null) schedule_drwd = default_schedule;
if (schedule_drwe == null) schedule_drwe = default_schedule;

// Increment TOU demand schedule period numbers by 1 to convert numbers from 0-11 to 1-12
for ( m=0; m<#schedule_drwd; m++ )
{
	for ( h=0; h<#schedule_drwd[0]; h++ )
	{
		schedule_drwd[m][h]++;
		schedule_drwe[m][h]++;
	}
}

set('ur_dc_enable',enable_demand);
set('ur_dc_flat_mat',drm_table);
set('ur_dc_tou_mat',dr_table);
set('ur_dc_sched_weekday',schedule_drwd);
set('ur_dc_sched_weekend',schedule_drwe);

ok = show_page( 'Electricity Rates' );
if ( ok )
{
	pagenote( 'Rate data loaded from OpenEI URDB for GUID = ' + guid + '\n\n' + rates.uri );
}	
