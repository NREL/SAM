/*

This script plots battery life curves for calendar degradation using the equations

k_cal = a * exp(b*(1/T - 1/296)) * exp(c_*(SOC/T - SOC/296))
q = q0 - k_cal * sqrt(t)

from the model described in 

Smith et al. (2017) "Life prediction model for grid-connected Li-ion battery 
energy storage system," 2017 American Control Conference (ACC)

To use the script:

  1. Create or open a PV Battery or Generic Battery case in SAM.
  2. Run the script.

Tested in SAM 2021.12.02

*/

// equation parameters
a = 0.00266;
b = -7280;
c = 930;
q0 = 1.02;

function cell_voltage_vs_dod()
{
	voltage_mode = get('batt_voltage_choice');
	DOD_vect = [];
	V_vect = [];
	Vfull = 0;
	
	if (voltage_mode == 0)
	{
		Qfull = get('batt_Qfull');

		Qnom_percent = get('batt_Qnom_percent');
		Qexp_percent = get('batt_Qexp_percent');
		Vfull = get('batt_Vfull');
		Vexp = get('batt_Vexp');
		Vnom = get('batt_Vnom');
		C_rate = get('batt_C_rate');
		eta = 0.995;
		
		// strange bug, after simulation Qnom is calculated erroneously
		Qnom = Qnom_percent*Qfull*0.01;
		Qexp = Qexp_percent*Qfull*0.01;
		
		I = Qfull*C_rate;
		R = get('batt_resistance');//Vnom*(1-eta)/(C_rate*Qnom);
		A = Vfull - Vexp;
		B = 3/Qexp;
		K = ((Vfull - Vnom + A*(exp(-B*Qnom) - 1))*(Qfull - Qnom))/(Qnom);
		E0 = Vfull + K + R*I - A;
		
		q0 = Qfull;
		V_vect[0] = Vfull;
		t_vect[0] = 0;
		DOD_vect[0] = 0;
		stop = 1000; // just run for 1000 steps, it will cutoff before
		count = 0;

		//logmsg('Vfull: ' + Vfull + ' Vexp: ' + Vexp + ' Vnom: ' + Vnom + ' Qfull: ' + Qfull + ' Qexp: ' + Qexp + ' Qnom: ' + Qnom + 'Qnom_percent: ' + Qnom_percent + ' C: ' + C_rate); 
		//logmsg('A: ' + A + ' B: ' + B + ' K: ' + K + 'R: ' + R + ' EO: ' + E0 ); 

		for (i = 1; i <= stop; i++)
		{
			count++;
			t = i*0.1;
			q0 = Qfull - I*t;
			V = E0 - R*I - K*(Qfull/(Qfull-I*t)) + A*exp(-B*I*t);
			DOD = (1.0-(q0/Qfull))*100;
			//logmsg('t: ' + t + ' V: ' + V + 'DOD: ' + DOD);
			if ( (V < Vfull/2) || (V > 2*Vfull) || DOD > 100)
			{
				break;
			}
			else
			{
				t_vect[count] = t;
				V_vect[count] = V;
				DOD_vect[count] = DOD;
			}
		}
	}
	else
	{
		voltage_matrix = get('batt_voltage_matrix');
		for (r = 0; r != #voltage_matrix; r++)
		{
			row = voltage_matrix[r];
			DOD_vect[r] = row[0];
			V_vect[r] = row[1];
		}
		Vfull = max(V_vect);
	}
	
	table{'DOD'} = DOD_vect;
	table{'V'} = V_vect;
	table{'Vfull'} = Vfull;
	return table;
}
		
		
dt_day = 10; // assume timestep of 10 days
dq_old = 0;
count = 0;
years = 10;
		
T_vec = [293, 303, 313, 323]; 
SOC_vec = [0.5, 1.0, 0.5, 1.0];
table = cell_voltage_vs_dod();
V = table{'V'};
DOD = table{'DOD'};
		
V_vec = [];
for (j = 0; j < #SOC_vec; j++)
{
	V_vec[j] = 0;
	for (i = 0; i < #DOD; i++)
	{
		if (1 - DOD[i]*0.01 == SOC_vec[j])
		{
			V_vec[j] = V[i];
		}	
	}
}
			
color_string = ['blue', 'green', 'red', 'yellow'];
legend_string[0] = [ 'T = 20C, SOC=50%'];
legend_string[1] = [ 'T = 30C, SOC=100%'];
legend_string[2] = [ 'T = 40C, SOC=50%'];
legend_string[3] = [ 'T = 50C, SOC=100%'];

newplot();

t_max = 0;
		
for (scenario=0; scenario != #T_vec; scenario++)
{
	T = T_vec[scenario];
	SOC = SOC_vec[scenario]; 
	V = V_vec[scenario];
	k_cal = a * exp(b*(1/T - 1/296)) * exp(c*(SOC/T - SOC/296));
	q = [];
	t = [];
		
	for (day = 0; day != years * 360; day+=10)
	{
		dq_new = 0;
		if (day == 0)
		{
			dq_new = k_cal*sqrt(dt_day);
		}
		else
		{
			dq_new = (0.5 * pow(k_cal, 2) / dq_old) * dt_day + dq_old;
		}
		
		dq_old = dq_new;

		q_tmp = (q0 - dq_new)*100;
				
		if (q >=0)
		{
			q[count] = q_tmp;
			t[count] = day;
		}
		else
		{
			if (day > t_max)
			t_max = day;
			break;
		}
					
		count++;
	}
	
	plot(t, q, {'thick'=2, 'type'='line', 'color'=color_string[scenario], 'series'=legend_string[scenario]});
}

plotopt( {'title'='Calendar Degradation', 'legend'=true, 'legendpos'=[15,55]});

axis( 'x1', {'label'='Age of battery (days)', 'min'=0, 'max'=max(t)+10});
axis( 'y1', {'label'='Effective capacity (%)', 'min'=0, 'max'=100});

