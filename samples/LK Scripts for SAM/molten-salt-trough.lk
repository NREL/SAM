////////////////////////////////////////////////////////////////////////////////
/*

	SAM LK script for reading interconnect component and definition
	configuration files and running a molten salt physical trough model.
	
	Requirements:
	
		* Input CSV files physical_trough_interconnect_components.csv and
		  physical_trough_interconnect_definitions.csv may be in any folder on
		  your computer.
		
		* LK script file molten-salt-trough-functions.lk in same folder as this
		  LK script.


	Instructions:
	
	1. Start SAM and create a new Physical Trough case with any or no financial
	   model.
	   
	2. Run this script.
	
	3. Follow the prompt to choose the file that contains the input CSV files.
	
	4. Follow the prompt to choose a folder for output CSV files.

	6. After the script finishes, check the results in SAM and in the output CSV
	   files:
		a. Runners.csv
		b. Headers.csv
		c. Loop.csv
		d. TES.csv

	NOTE: The interconnects need to be in ascending order in their file.
	
*/
////////////////////////////////////////////////////////////////////////////////

import "molten-salt-trough-functions.lk";

input_dir = choose_dir(cwd(), 'Choose Input Folder');
outln(input_dir);

output_dir = choose_dir(cwd(),'Choose Output Folder');//(homedir() + "/Documents/SolarDynamics";

intc_cpnt_file = input_dir + '/' + 'molten-salt-trough-interconnect-components.csv';
intc_def_file = input_dir + '/' + 'molten-salt-trough-interconnect-definitions.csv';
runner_file = output_dir + '/' + 'Runners.csv';
header_file = output_dir + '/' + 'Headers.csv';
loop_file = output_dir + '/' + 'Loop.csv';
tes_file = output_dir + '/' + 'TES.csv';

molten_salt_trough = true;
custom_tes_losses = true;
custom_pipe_sizes = false;

check_for_open_files([runner_file, header_file, loop_file, tes_file]);

load_defaults();

import_and_set_interconnects(intc_cpnt_file, intc_def_file);

if (molten_salt_trough) {
	set( 'T_loop_out', 430 );
	set( 'combo_htf_type', 3 );  //field fluid: 0 = Hitec Solar Salt, 3 = Therminol VP-1
	set( 'Fluid', 21 );   // I don't this actually does anything, need the above
	set( 'combo_tes_htf_type', 3 );  //tes fluid: 0 = Hitec Solar Salt, 3 = Therminol VP-1
	set( 'store_fluid', 21);	// 18 = Hitec Solar Salt , 21 = Therminol VP-1 -> probably doesn't do anything
	set( 'is_hx', 0 );
	set( 'V_tank_hot_ini', 1221.9 );
	set( 'vol_tank', 24438 );
	set( 'tanks_in_parallel', 0 );
	set( 'has_hot_tank_bypass', 1 );
	set( 'T_tank_hot_inlet_min', 400 );
	set( 'tes_lengths', [30, 90, 100, 120, 30, 30, 90, 80, 80, 120, 80] );
}

if (custom_tes_losses) {
	set( 'custom_tes_p_loss', 1 );   // TES pipe losses from lengths and k's
	set( 'k_tes_loss_coeffs', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] );
}

if (custom_pipe_sizes) {
	set( 'custom_sf_pipe_sizes', 1 );    // read from Runner.csv and Header.csv
	set( 'custom_tes_pipe_sizes', 1 );   // read from TES.csv
	import_pipe_sizes(runner_file, header_file, tes_file);
}

errors='';
outln("Running simulation...");
ok = simulate(errors,1);  // simulate and update UI with results
if ( !ok ) { outln ( errors ); }
outln("Finished simulation");

write_output_files(runner_file, header_file, loop_file, tes_file);
