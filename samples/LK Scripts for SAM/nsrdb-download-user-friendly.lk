/*////////////////////////////////////////////////////////////////////////////////

To download a selection of U.S. Cities, please follow these steps:
1.	Open this script in a SAM scripting window
2.	Click "run" on the top of the window
3.	Select a folder to store downloaded files
4.	Select "import list___"
5.	Select the nsrdb-download-us-cities.csv file, also found in the samples/LK Scripts
	for SAM folder in the SAM repository
6.	Select psm3-tmy
7.	Select tmy
8.	Wait for 15-30 minutes depending on your machine and internet connection
9.	On location & resource page, select "add/remove weather file folders___" 
	and navigate to the folder with the downloaded files

--------------------------------------------------------------------------------

Given a location name, street address, or latitude and longitude for a location 
in the NREL National Solar Radiation Database (NSRDB), this script prompts
you to select the data file(s) you want to download.

The script will also read a list of locations from a CSV file with either of
a list of addresses and location names, or of latitude and longitudes.

CSV format for list of addresses and/or location names. Addresses and place names
containing commas should be enclosed in double quotes ("):

address
lebanon or
paducah ky
"alexandia, va"
"111 Rainbow St, Clarksville TN"

CSV format for list of latitudes and longitudes:

lat,lon
45,-112
40,-90
34,-110
33.4,-109.6

All column names should be lowercase only.

If the provided CSV file also contains a "name" column, the script will name each
file using the names specified in that column.

This script replicates the functionality of the download button on the Location 
and Resource page.

Click Run above to start the script.
 
Note: The NSRDB may return a file with an error message instead of weather data
if you exceed the the download rate limit or if there is a problem with the URL.

Updated and tested with SAM 2021.12.02

//////////////////////////////////////////////////////////////////////////////*/

// Get your own API key at https://developer.nrel.gov
api_key = '<SAMAPIKEY>';
api_email = 'sam.support@nrel.gov';

// folder to store weather files (script creates subfolder for each location).

path = '';
path = choose_dir(wfdownloaddir(), 'Choose a Folder to Store Downloaded Files');
if ( path == '' ) 
{
	outln( 'You must choose a folder to store downloaded files. Exiting script.' );
	exit;
}

location_option = '';
options = ['Download file for single location','Import list of locations from CSV file'];
location_option = choose_from_list( options ,'Choose one:','Single or Multiple Location',0);
if ( location_option == '' )
{
	outln( 'You must choose a location option. Exiting script.' );
	exit;
}

site = {};
site.lat = []; 
site.lon = [];
site.name = [];

if ( location_option == options[0] )
{
	location = in( 'Enter a location name, street address, or lat,lon pair:','40.1,-109.3','Location Information');
	lat_lon = geocode( location );
	if ( lat_lon.ok == false )
	{
		outln( 'Failed to convert location to latitude and longitude!\n\t' + location + '\n\tExiting script.');
		exit;
	}
	else
	{
		site.lat[0] = lat_lon.lat;
		site.lon[0] = lat_lon.lon;
		addr = lower(location);
		if ( isdigit(split(addr,',')[0]) )
		{
			addr = replace(location,',','_');
		}
		else
		{
			addr = replace(addr,',','-');
			addr = replace(addr,'.','-');
			addr = replace(addr,' ','-');
			addr = replace(addr,'--','-');
		}
		site.name[0] = addr;
	}
}
else
{
	location_file = choose_file( cwd(), 'Choose Location File', 'CSV files (*.csv)|*.csv');
	locations = csvread(location_file,{'table'=true});
	keys = @locations;
	n_records = 0;
	if ( ( keys ?@ 'address' ) > -1 )
	{
		n_records = #locations.address;
		is_address = true;
	} 
	elseif ( ( keys ?@ 'lat' ) > -1 && ( keys ?@ 'lon' ) > -1 )
	{
		if ( #locations.lat == #locations.lon)
		{
			n_records = #locations.lat;
			is_address = false;
		}
		else
		{
			outln( 'Number of rows of lat and lon must be equal!\n\tExiting script.' );
			exit;
		}
	}
	else
	{
		outln( 'CSV file must have first row "address" or "lat,lon"!\n\t' + keys + '\n\tExiting script.' );
		exit;
	}
	//Check if there is a names column to use
	has_names = false;
	if ( ( keys ?@ 'name' ) > -1 )
	{
		if ( #locations.name == n_records ) 
		{
			has_names = true;
		}
	}
	//For each site in lookup file
	for ( j=0; j<n_records; j++ )
	{
		// Geocode
		if ( is_address )
		{
			latlon = geocode(locations.address[j]);
			site.lat[j] = latlon.lat;
			site.lon[j] = latlon.lon;
			addr = lower(locations.address[j]);
			addr = replace(addr,',','-');
			addr = replace(addr,'.','-');
			addr = replace(addr,' ','-');
			addr = replace(addr,'--','-');
			if ( has_names )
			{
				site.name[j] = locations.name[j];
			}
			else
			{
				site.name[j] = addr;
			}
		}
		else 
		{
			site.lat[j] = locations.lat[j];
			site.lon[j] = locations.lon[j];
			if ( has_names )
			{
				site.name[j] = locations.name[j];
			}
			else
			{
				site.name[j] = to_string(locations.lat[j]) + '_' + to_string(locations.lon[j]);
			}
		}
	}	
}

outln( site );

// nsrdb query to determine what data is available for location
wf = {};
n = 0;
for ( s=0 ; s<#site.lat; s++ )
{
	// on first pass, get list of available versions and urls
	if ( s == 0 )
	{
		base_url = 'https://developer.nrel.gov/api/nsrdb/v2/solar/';
		query_url = 'nsrdb-data-query.json?api_key='+api_key+'&wkt=POINT(' + to_string(site.lon[s]) + '+' + to_string(site.lat[s]) + ')';
		url = base_url + query_url;
		json_str = curl( url );
		var = json_read( json_str );
		if ( #var.errors > 0 )
		{
			outln( 'NSRDB Error!\n\t' + var.errors[0] + '\n\tFor location name ' + site.name[s] + '.\n\tExiting script.' );
			exit;
		}
		if (#var.outputs == 0)
		{
			outln( 'No NSRDB data found for location name ' + site.name[s] + '.\n\tNSRDB grid cell coordinates: Latitude = ' + site.lat[s] + ', Longitude = ' + site.lon[s] + '.\n\tExiting script.' );
			exit;
		}
		for( i=0; i<#var.outputs; i++ )
		{
			available_versions[i] = var.outputs[i].name;
		}
		version = choose_from_list( available_versions, 'Choose an NSRDB dataset:','Choose NSRDB Dataset' );
		for( i=0; i<#var.outputs; i++ )
		{
			if ( var.outputs[i].name == version )
			{
				links = var.outputs[i].links;
				available_years = var.outputs[i].availableYears;
				available_intervals = var.outputs[i].availableIntervals;
			}
		}
		available_years[#available_years] = 'all'; // add option to download files for all available years
		year = '';	
		year = choose_from_list( available_years, 'Choose a year ("all" for all years):  ','Choose Year' );
		if ( year == '' )
		{
			outln( 'You must choose a year. Exiting script.' );
			exit;
		}
		if ( to_int( year ) != 0 ) // mts1 versions uses 'tmy2' instead of 'tmy'
		{
			year = to_int( year );
		}
		if ( strpos( year, 'tmy' ) > -1 ) // only hourly data available for tmy
		{
			interval = 60;
		}
		else
		{
			interval = choose_from_list( available_intervals, 'Choose a the interval (time step) in minutes:  ','Choose Interval' );
			interval = to_int( interval );
		}	
	}
	// get download urls for all available versions, intervals, and years, create
	// file names for downloads
	for( i=0; i<#links; i++ )
	{
		if ( year == 'all' )
		{
			for ( j=0; j<#available_years; j++ )
			{
				if ( available_years[j] != 'all' )
				{
					if ( (links[i].year == available_years[j]) && (links[i].interval == interval) )
					{
						if ( strpos(available_years[j], 't') > -1 ) { intvl = 60; } // tmy, tgy, or tdy
						else { intvl = interval; }
						url = links[i].link;
						url = replace( url, 'yourapikey', api_key );
						url = replace( url, 'youremail', api_email );
						begin = strpos(url,'%28');
						end = strpos(url, '%29');
						substring = mid(url, begin+3, (end-begin -3));
						url = replace(url, substring, to_string(site.lon[s]) + '+' + to_string(site.lat[s]));
						wf.url[n] = url;
						wf.fname[n] = path + '/nsrdb_' + site.name[s] + '_' + site.lat[s] + '_' + site.lon[s] + '_' + intvl + 'min_' + available_years[j] + '.csv';
						n++;
					}
				}	
			}	
		}
		elseif ( (links[i].year == year) && (links[i].interval == interval) )
		{
			url = links[i].link;
			url = replace( url, 'yourapikey', api_key );
			url = replace( url, 'youremail', api_email );
			begin = strpos(url,'%28');
			end = strpos(url, '%29');
			substring = mid(url, begin+3, (end-begin -3));
			url = replace(url, substring, to_string(site.lon[s]) + '+' + to_string(site.lat[s]));
			wf.url[n] = url;
			wf.fname[n] = path + '/nsrdb_' + site.name[s] + '_' + site.lat[s] + '_' + site.lon[s] + '_' + interval + 'min_' + year + '.csv';
			n++;
		}
	}
}

// download test file to get server error message from test file
out( 'Testing NSRDB connection...');
ok = curl( wf.url[0], {'file' = wf.fname[0] } );
if ( !ok ) { outln( 'test failed. NSRDB server could be down.' ); }
else
{
	txt = read_text_file( wf.fname[0] );
	remove_file( wf.fname[0] );
	if ( strpos(txt, '{\"') > -1 )
	{
		json = json_read( txt );
		outln( '\nDownload Error!\n' + 'Message from NSRDB server: \n\t' +  json.errors[0] + '\nExiting script.' ); 
		exit;
	}
	elseif ( #txt < 500 )
	{
		msgbox( 'Download Error!\n' + 'Test file has less than 500 characters, so does not appear to contain valid weather data.\n\nExiting script.\n\n' ); 
		exit;
	}
	else 
	{
		outln( 'test OK.');
	}
}

// download requested files
n=0;
outln( '\nDownloading ' + #wf.url + ' files...' );
outln();
for( i=0; i<#wf.url; i++ )
{
		outln( 'File ' + to_string(i+1) +  ' of ' + #wf.url + ':\n\t' + wf.fname[i] );
		outln( 'URL:\n\t' + wf.url[i] );
		ok = curl( wf.url[i], {'file' = wf.fname[i] } );
		if ( !ok ) 
		{
			outln( '\tDownload failed.' ); 
		}
		else 
		{
			outln( '\tDownload succeeded.' );
			n++; 
		}
		outln();
}

outln( 'Done.' );
browse( path );
