// Users per user per domain per SAM users analysis_TG2.xlsb from Tassos 11/2016

public_versions = ['2014.11.24', '2015.1.30', '2015.6.30', '2016.3.14', '2017.1.17'];

folder = choose_dir(homedir(), "select folder for output");

file = choose_file(folder, "Select input file", "CSV files(*.csv)|*.csv");

// do not include countries with "no data"
hide_no_data = false;
// do not include domains with "other"
hide_other = false;

outln('loading ' + file );
x = csvread( file );

// column indices in CSV file download
enum { user_email,
	user_key,
	user_created_at,
	user_updated_at,
	sam_app_name,
	sam_version,
	usage_count,
	ip_address,
	ip_city,
	ip_region_code,
	ip_region_name,
	ip_country_code,
	ip_country_name,
	ip_latitude,
	ip_longitude };

nusers = 0;
nusage = 0;


outln(date_time());
outln('reading database...');
function approx_days_since( year, month, day )
{
	// Mon Jul 13 12:00:49 2015
	date = split(date_time(), ' ');
	cyear = to_int(date[4]);
	cday = to_int(date[2]);
	smonths = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];
	for(cmonth=0;cmonth<12;cmonth++ )
		if ( smonths[cmonth] == date[1] )
			break;
				
	start = (year-1971)*365 + (month-1)*30 + day;
	end = (cyear-1971)*365 + (cmonth)*30 + cday;
	return end-start;
}

for( i=0;i<#public_versions;i++ )
	nusers{public_versions[i]} = 0;

platusers = {};
platusage = {};
ver_usage = {};

all_domain_users = {};
all_domain_usages = {};
unique_domain_usage_threshold = 0;
//str_unique_domain_usage_threshold = to_string(unique_domain_usage_threshold);
// all domains with usage less than threshold will be grouped as "other"
//str_unique_domain_usage_threshold = in("Usage threshold for determining unique domains", str_unique_domain_usage_threshold);
//unique_domain_usage_threshold = to_real(str_unique_domain_usage_threshold);

total_usage = 0;
N = #x;
number_good_data = 0;
for( i=1;i<N;i++ )
{
	usage = to_int( x[i][ usage_count ]);

	sver = split(x[i][ sam_version ], '-');
	// see 2017.4.12_user_stats.docx - update to skip "bad" data
	if (#sver !=2) continue;
	sam_ver = sver[0];
	plat = sver[1];

	// email to find domain
	email = split(x[i][user_email],'@');
	domain = "";
	if (#email > 0)
	{
	// parse "bad" entries found by skimming downloaded file
		domain = lower(email[#email-1]);
		domain = replace(domain,'\\','');
		domain = replace(domain,' ','');
		domain = replace(domain,'/','');
	}
	/*
	// user based rather than domain based
	if (usage < unique_domain_usage_threshold)
	{
		domain = "other";
	}
	*/
	// country name (filled out consistently in downloaded data)
	country = x[i][ip_country_name];
	// user based rather than country based
	/*
	if (usage < country_usage_threshold)
	{
		country = "no data";
	}
	*/
	if ( !( nusers ?@ sam_ver )) continue;	
	if ( !( ver_usage ?@ sam_ver )) ver_usage{sam_ver} = 0;
	if ( !( platusers ?@ plat )) platusers{plat} = 0;
	if ( !( platusage ?@ plat )) platusage{plat} = 0;
	if ( !( all_domain_users ?@ domain )) all_domain_users{domain} = 0;
	if ( !( all_domain_usages ?@ domain )) all_domain_usages{domain} = 0;
	
	nusers{sam_ver}++;
	platusers{plat}++;
	platusage{plat} += usage;
	all_domain_users{domain}++;
	all_domain_usages{domain} += usage;
	
	ver_usage{sam_ver} += usage;	
	total_usage += usage;
	number_good_data++;
}

ndomains = #all_domain_users;


// reparse domains with usages greater than threshold and if not put in "other"
domain_users = {};
domain_usages = {};
UPUPD = {}; // uses per user per domain
keys = @all_domain_users;
index = 0;
for(i=0;i<#keys;i++ )
{
	domain = keys[i];
	usage = to_real(all_domain_usages{keys[i]});
	if (usage < unique_domain_usage_threshold)
	{
		domain = "other";
	}

	if ( !( domain_users ?@ domain )) domain_users{domain} = 0;
	if ( !( domain_usages ?@ domain )) domain_usages{domain} = 0;
	if ( !( UPUPD ?@ domain )) UPUPD{domain} = 0;

	domain_users{domain} += to_real(all_domain_users{keys[i]});
	domain_usages{domain} += to_real(all_domain_usages{keys[i]});
	if 	(domain_users{domain} !=0)
		UPUPD{domain} = domain_usages{domain} / domain_users{domain};
}

// compute average
average = 0;
for(i=0;i<#keys;i++ )
{
	domain = keys[i];
	average += UPUPD{domain};
}
if (#keys != 0)
	average = average / #keys;

// write out data

path = path_only(file);
fn_all = file_only(file);
fn_split = split(file_only(file),".");
fn = path + "/" + replace(fn_all, fn_split[#fn_split - 1], "UPUPD.csv");
fnum = open(fn,"w");
write_line(fnum, "Raw data for SAM users as of " + date_time());
keys = @domain_users;
write_line(fnum, #keys + " domains with usages greater than " + unique_domain_usage_threshold);
write_line(fnum, "average uses per user in domain " + average );
write_line(fnum, "");
line = "Unique Domain,Total use count per domain,Unique users per domain,uses per user in domain";
write_line(fnum, line);
for(i=0;i<#keys;i++ )
{
	line = keys[i] + "," + domain_usages{keys[i]} + "," + domain_users{keys[i]} + "," + UPUPD{keys[i]};
	write_line(fnum, line);
}

outln("Data written to " + fn);
outln("processed " + number_good_data + " user records out of " + N);



outln( '\ntotal number of users: ' + number_good_data );
outln( 'total usage: ' + total_usage );
outln( 'usage per person: ' + (total_usage/number_good_data) );
ndays = approx_days_since( 2014, 11, 24 );
outln( 'days since 2014/11/24: ' + ndays );
outln( 'average usage per day: ' + (total_usage/ndays) );
outln( 'Total number of domains: ' + ndomains );
outln("average UPUPD = " + average);

