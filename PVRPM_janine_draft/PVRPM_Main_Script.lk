
//*************************************************************************************
//PV Reliability and Performance Model Version 2.0 
//Inputs and Control Script -- BETA --
//Janine Freeman, NREL
//16 May 2017
//*************************************************************************************

//Supporting functions located in a separate file, do not modify this line unless the function script is located in a different folder
import 'PVRPM_Function.lk';

//*******************************************************************************************************************************************************************************
// USER-DEFINED INPUTS
// Please modify these inputs to match your system configuration and desired assumptions.
//*******************************************************************************************************************************************************************************

//----Results options------------------------------------------------------------------------------------------
//results_file = 'C:/users/jfreeman/desktop/pvrpm_results/pvrpm_results.csv';
	global results_folder = 'C:/users/jfreeman/desktop/pvrpm_results';
	show_realization_graphs = false;

//----System setup---------------------------------------------------------------------------------------------
	num_combiners = 2; //total number of DC combiner boxes
	num_transformers = 1; //total number of Transformers
	num_trackers = 2; //total number of trackers
	
//----Financial inputs-----------------------------------------------------------------------------------------
	present_day_labor_rate = 100; //dollars per hour
	inflation = 3; //%
	
//----Tracker failure algorithm--------------------------------------------------------------------------------
	use_worst_case_tracker = false;

//----Degradation input function-------------------------------------------------------------------------------
	/*
	Equation format must follow:
	Inputs: 	percent_per_day = degradation rate in percent per DAY
				t = time (in DAYS) since the module was new or replaced
	Return: Current degradation factor in fractional form, 
	i.e. if module is 2% degraded, returns 0.98
	*/
	function current_degradation_rate(percent_per_day, t)
	{
		return 1 / pow((1 + percent_per_day / 100), t);
	}	

//----Number of stochastic realizations to be run--------------------------------------------------------------
	num_realizations = 3; //must be 2 or greater
	p_value = 60; //PXX is what will get calculated
	conf_interval = 60; //XX % confidence interval around the mean will be calculated
	xl_path = 'C:/Users/jfreeman/documents/samnt/samnt/pvrpm_janine_draft/confidence_interval.xlsx'; //FULL path where the excel file included with the PVRPM script is stored


//run pre-checks on the case and system configuration to make sure that it will run appropriately
check_case(); //do not change this line!

		
//********************************************************************************************************************************************************************************
// USER-DEFINED COMPONENT META DATA
// These inputs control the failure and repair modes and costs for the different component types. Please modify these inputs.
//********************************************************************************************************************************************************************************

//----Component meta information-------------------------------------------------------------------------------
	// The structure of the user-entered component meta container is as follows
	/*
	meta.
		component.
		**NOTE: components currently include: module, string, combiner, inverter, disconnect, transformer, grid, and (optional) tracker
			name = a string containing the name of the component type, used for error reporting
			can_fail = true if component is allowed to fail
			can_repair = true if component is allowed to be repaired after failing
			warranty
				has_warranty = true if the component has a warranty, otherwise false
				days = number of days that the warranty is for (e.g. a 20 year warranty would be 20 * 365 days)
			failure[i]
				distribution = distribution type of failure mode i
				parameters = a table of parameters for failure mode i (e.g. [45, 15] )
				labor_time = number of hours of labor it takes to repair this type of failure
				cost = parts cost to repair this type of failure
				***OPTIONAL PARAMETER
				***fraction = If fraction is defined, then failure mode i is a defective failure mode, and "fraction" represents the fraction of this type of component that are defective
			repair[i]
				distribution = distribution type of repair times
				parameters = parameters of the repair distribution
				times = a vector of repair times
				**NOTE: If there is only ONE repair distribution (repair[0]), then ALL failure modes will use that distribution! Otherwise, # repair modes must equal # failure modes.
			degradation (MODULES ONLY)
				can_degrade = true if the component has degradation
				rate = degradation rate (%/year)
	*/

global meta = null; 

//----Modules--------------------------------------------------------------------------------------------------
	meta.module.name = 'module';	
	meta.module.can_fail = true;
	meta.module.can_repair = true;
	meta.module.warranty.has_warranty = true;
	meta.module.warranty.days = 20 * 365; //years converted to days
	//failure mode 1: normal failures
	meta.module.failure[0].distribution = 'normal';
	meta.module.failure[0].parameters = [4 * 365, 1 * 365]; //mean, std, years converted to days
	meta.module.failure[0].labor_time = 2; //hours
	meta.module.failure[0].cost = 322; //$
	//failure mode 2: defective failures
	meta.module.failure[1].distribution = 'exponential';
	meta.module.failure[1].parameters = [0.5 / 365]; //failures per year converted to days
	meta.module.failure[1].labor_time = 2; //hours
	meta.module.failure[1].cost = 322; //$
	meta.module.failure[1].fraction = 20 / 100; //% converted to fraction
	//repair mode: only one repair mode for both failure types
	meta.module.repair[0].distribution = 'lognormal';
	meta.module.repair[0].parameters =  [60, 20]; //mean, std, in days
	meta.module.degradation.can_degrade = true;
	meta.module.degradation.rate = 20; //%/year
	
//----Strings--------------------------------------------------------------------------------------------------
	meta.string.name = 'string';
	meta.string.can_fail = true;
	meta.string.can_repair = true;
	meta.string.warranty.has_warranty = false;
	meta.string.failure[0].distribution = 'exponential';
	meta.string.failure[0].parameters = [(2 / 365)]; //failures per year converted to per day
	meta.string.failure[0].labor_time = 1; //hours
	meta.string.failure[0].cost = 20; //$
	meta.string.repair[0].distribution = 'lognormal';
	meta.string.repair[0].parameters = [7, 3]; //mean, std, days
	
//----Combiners------------------------------------------------------------------------------------------------
	meta.combiner.name = 'combiner';
	meta.combiner.can_fail = true;
	meta.combiner.can_repair = true;
	meta.combiner.warranty.has_warranty = false;
	meta.combiner.failure[0].distribution = 'normal';
	meta.combiner.failure[0].parameters = [2 * 365, 0.5 * 365]; //mean, std, years converted to days
	meta.combiner.failure[0].labor_time = 2; //hours
	meta.combiner.failure[0].cost = 976; //$
	meta.combiner.repair[0].distribution = 'exponential';
	meta.combiner.repair[0].parameters = [3]; //mean, days
	
//----Inverters------------------------------------------------------------------------------------------------
	meta.inverter.name = 'inverter';
	meta.inverter.can_fail = true;
	meta.inverter.can_repair = true;
	meta.inverter.warranty.has_warranty = false; 
	//failure mode 1: component failure
	meta.inverter.failure[0].distribution = 'exponential';
	meta.inverter.failure[0].parameters = [1 / 365]; //failures per year converted to per day
	meta.inverter.failure[0].labor_time = 0;
	meta.inverter.failure[0].cost = 0.2 * 0.35 * inverter_size; //0.2 times catastrophic cost, which is 35 cents/Watt
	//failure mode 2: routine failures
	meta.inverter.failure[1].distribution = 'exponential';
	meta.inverter.failure[1].parameters = [1 / 365]; //failures per year converted to per day
	meta.inverter.failure[1].labor_time = 0;
	inverter_routine_cost = 0;
	if (inverter_size <= 10000)
		inverter_routine_cost = 200;
	else if (inverter_size <= 100000)
		inverter_routine_cost = 500;
	else
		inverter_routine_cost = 1000;
	meta.inverter.failure[1].cost = inverter_routine_cost;
	//failure mode 3: catastrophic failure
	meta.inverter.failure[2].distribution = 'normal';
	meta.inverter.failure[2].parameters = [500, 365.25]; //mean, std, in days
	meta.inverter.failure[2].labor_time = 0;
	meta.inverter.failure[2].cost = 0.35 * get('inv_snl_paco'); //35 cents per watt
	//repair mode 1: component failure
	meta.inverter.repair[0].distribution = 'lognormal';
	meta.inverter.repair[0].parameters = [3, 1.5]; //mean, std, in days
	//repair mode 2: routine failure
	meta.inverter.repair[1].distribution = 'exponential';
	meta.inverter.repair[1].parameters = [0.5]; //days
	//repair mode 3: catastrophic failure
	meta.inverter.repair[2].distribution = 'lognormal';
	meta.inverter.repair[2].parameters = [3, 1.5]; //mean, std, in days
	
//----AC Disconnects-------------------------------------------------------------------------------------------
	meta.disconnect.name = 'disconnect';
	meta.disconnect.can_fail = true;
	meta.disconnect.can_repair = true;
	meta.disconnect.warranty.has_warranty = false;
	meta.disconnect.failure[0].distribution = 'weibull';
	meta.disconnect.failure[0].parameters = [0.3477, 3 * 365]; //slope (same as shape factor)- unitless, mean- years converted to days
	meta.disconnect.failure[0].labor_time = 4; //hours
	meta.disconnect.failure[0].cost = 500; //$
	meta.disconnect.repair[0].distribution = 'lognormal';
	meta.disconnect.repair[0].parameters = [1, 0.5]; //mean, std, in years converted to days
	
//----Transformers---------------------------------------------------------------------------------------------
	meta.transformer.name = 'transformer';
	meta.transformer.can_fail = true;
	meta.transformer.can_repair = true;
	meta.transformer.warranty.has_warranty = false;
	meta.transformer.failure[0].distribution = 'weibull';
	meta.transformer.failure[0].parameters = [0.3477, 1 * 365]; //slope (shape factor)- unitless, mean- days
	meta.transformer.failure[0].labor_time = 10; //hours
	meta.transformer.failure[0].cost = 32868; //$
	meta.transformer.repair[0].distribution = 'lognormal';
	meta.transformer.repair[0].parameters = [0.25, 0.5]; //mean, std, in days
	
//----Grid-----------------------------------------------------------------------------------------------------
	meta.grid.name = 'grid';
	meta.grid.can_fail = true;
	meta.grid.can_repair = true;
	meta.grid.warranty.has_warranty = false;
	meta.grid.failure[0].distribution = 'weibull';
	meta.grid.failure[0].parameters = [0.75, 100]; //slope (shape factor)- unitless, mean- days
	meta.grid.failure[0].labor_time = 0;
	meta.grid.failure[0].cost = 0;
	meta.grid.repair[0].distribution = 'exponential';
	meta.grid.repair[0].parameters = [0.5]; //mean in days
	
//----Trackers-------------------------------------------------------------------------------------------------
	// Only required for tracking systems, otherwise must be deleted or commented out
	/*
	meta.tracker.name = 'tracker';
	meta.tracker.can_fail = true;
	meta.tracker.can_repair = true;
	meta.tracker.warranty.has_warranty = false;
	meta.tracker.failure[0].distribution = 'exponential';
	meta.tracker.failure[0].parameters = [0.002]; //mean per year in days
	meta.tracker.failure[0].labor_time = 0;
	meta.tracker.failure[0].cost = 2000; //present day tracker cost, will be inflated
	meta.tracker.repair[0].distribution = 'lognormal';
	meta.tracker.repair[0].parameters = [30, 10]; //mean, std, in days
	*/
	

//********************************************************************************************************************************************************************************
// RUNNING THE MODEL, DO NOT CHANGE ANY OF THE FOLLOWING LINES
//********************************************************************************************************************************************************************************
configuration_check();
if (is_tracking_system)
	precalculate_tracker_losses();
pvrpm_exec();






