public_versions = ['2014.11.24', '2015.1.30', '2015.6.30', '2016.3.14', '2017.1.17', '2017.5.15'];

file = homedir() + '/sam_users.csv';

if ( yesno('download latest database file?') )
{
	url = 'https://developer.nrel.gov/api/sam/v1/tracker/user_stats?api_key=rJzFOTOJhNHcLOnPmW2TNCLV8I4HHLgKddAycGpn';
	curl( url, {file=file, message='downloading...'});
}

outln('loading ' + file );
x = csvread( file );

// column indices in CSV file download
enum { user_email,
	user_key,
	user_created_at,
	user_updated_at,
	sam_app_name,
	sam_version,
	usage_count,
	ip_address,
	ip_city,
	ip_region_code,
	ip_region_name,
	ip_country_code,
	ip_country_name,
	ip_latitude,
	ip_longitude };

nusers = 0;
nusage = 0;


outln(date_time());
outln('reading database...');
function approx_days_since( year, month, day )
{
	// Mon Jul 13 12:00:49 2015
	date = split(date_time(), ' ');
	cyear = to_int(date[4]);
	cday = to_int(date[2]);
	smonths = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];
	for(cmonth=0;cmonth<12;cmonth++ )
		if ( smonths[cmonth] == date[1] )
			break;
				
	start = (year-1971)*365 + (month-1)*30 + day;
	end = (cyear-1971)*365 + (cmonth)*30 + cday;
	return end-start;
}

for( i=0;i<#public_versions;i++ )
	nusers{public_versions[i]} = 0;

platusers = {};
platusage = {};
ver_usage = {};

domain_users = {};
domain_usages = {};
unique_domain_usage_threshold = 500;
str_unique_domain_usage_threshold = to_string(unique_domain_usage_threshold);
// all domains with usage less than threshold will be grouped as "other"
str_unique_domain_usage_threshold = in("Usage threshold for determining unique domains", str_unique_domain_usage_threshold);
unique_domain_usage_threshold = to_real(str_unique_domain_usage_threshold);

country_users = {};
country_usages = {};
// all countries with usage less than threshold will be grouped as "no data"
country_usage_threshold = 50;
str_country_usage_threshold = to_string(country_usage_threshold);
// all domains with usage less than threshold will be grouped as "other"
str_country_usage_threshold = in("Usage threshold for determining countries", str_country_usage_threshold);
country_usage_threshold = to_real(str_country_usage_threshold);

total_usage = 0;
N = #x;
for( i=1;i<N;i++ )
{
	usage = to_int( x[i][ usage_count ]);

	sver = split(x[i][ sam_version ], '-');
	sam_ver = sver[0];
	plat = sver[1];

	// email to find domain
	email = split(x[i][user_email],'@');
	domain = "";
	if (#email > 0)
	{
	// parse "bad" entries found by skimming downloaded file
		domain = lower(email[#email-1]);
		domain = replace(domain,'\\','');
		domain = replace(domain,' ','');
		domain = replace(domain,'/','');
	}
	if (usage < unique_domain_usage_threshold)
	{
		domain = "other";
	}

	// country name (filled out consistently in downloaded data)
	country = x[i][ip_country_name];
	if (usage < country_usage_threshold)
	{
		country = "no data";
	}
	
	if ( !( nusers ?@ sam_ver )) continue;	
	if ( !( ver_usage ?@ sam_ver )) ver_usage{sam_ver} = 0;
	if ( !( platusers ?@ plat )) platusers{plat} = 0;
	if ( !( platusage ?@ plat )) platusage{plat} = 0;
	if ( !( domain_users ?@ domain )) domain_users{domain} = 0;
	if ( !( domain_usages ?@ domain )) domain_usages{domain} = 0;
	if ( !( country_users ?@ country )) country_users{country} = 0;
	if ( !( country_usages ?@ country )) country_usages{country} = 0;
	
	nusers{sam_ver}++;
	platusers{plat}++;
	platusage{plat} += usage;
	domain_users{domain}++;
	domain_usages{domain} += usage;
	country_users{country}++;
	country_usages{country} += usage;
	ver_usage{sam_ver} += usage;	
	total_usage += usage;
}

vers = @ver_usage;
for( i=0;i<#vers;i++ )
{
	outln( 'number of users registered for version ' + vers[i] + ': ' + nusers{vers[i]} );
	outln( 'total usage count for version ' + vers[i] + ': ' + ver_usage{vers[i]} );
}

outln( 'platforms (by registrations): ' + platusers );
outln( 'platforms (by usage): ' + platusage );

maxper=0;
keys = @platusage;
for(i=0;i<#keys;i++ )
{
	labels[i][0] = i;
	labels[i][1] = keys[i];
	xx[i] = i;
	per = 100*platusage{keys[i]}/total_usage;
	yy[i] = per;
	if ( per > maxper ) maxper = per;
}
outln(xx);
outln(yy);
	
newplot(true);
plot(xx,yy, {'type'='bar', size=20});
axis('x1', {'type'='label', 'labels'=labels,'label'='Platform', 'min'=-1, 'max'=#keys});
axis('y1', {'label'='Percentage (%)', 'max'=maxper*1.05, 'min'=0});
plotopt({'legend'=false, 'title'='Usage by operating system as of ' + date_time()});

keys = @domain_users;
if ( yesno('Plot ' + #keys + ' unique domains?') )
{

	xx = [];
	labels = [];
	yy=[];
	yy2=[];
	maxusers=0;
	keys = @domain_users;
	index = 0;
	for(i=0;i<#keys;i++ )
	{
		if (keys[i] == "other") continue;
		labels[index][0] = index;
		labels[index][1] = keys[i];
		xx[index] = index;
		users = domain_users{keys[i]};
		yy[index] = users;
		if ( users > maxusers ) maxusers = users;
		index++;
	}
	outln(xx);
	outln(yy);
		
	newplot(false);
	plot(xx,yy, {'type'='bar', size=20});
	axis('x1', {'type'='label', 'labels'=labels,'label'='Domain', 'min'=-1, 'max'=index});
	axis('y1', {'label'='Number users', 'max'=maxusers+1, 'min'=0});
	plotopt({'legend'=false, 'title'='Users by domain as of ' + date_time()});



	xx = [];
	labels = [];
	yy=[];
	yy2=[];
	maxper=0;
	keys = @domain_usages;
	index = 0;
	non_other_domains_usage = total_usage;
	for(i=0;i<#keys;i++ )
	{
		if (keys[i] == "other") 
		{
			non_other_domains_usage -= domain_usages{keys[i]};
			continue;
		}
		labels[index][0] = index;
		labels[index][1] = keys[i];
		xx[index] = index;
		per = 100*domain_usages{keys[i]}/non_other_domains_usage;
		yy[index] = per;
		if ( per > maxper ) maxper = per;
		index++;
	}
	outln(xx);
	outln(yy);
		
	newplot(false);
	plot(xx,yy, {'type'='bar', size=20});
	axis('x1', {'type'='label', 'labels'=labels,'label'='Domain', 'min'=-1, 'max'=index});
	axis('y1', {'label'='Percentage (%)', 'max'=maxper*1.05, 'min'=0});
	plotopt({'legend'=false, 'title'='Usage by domain as of ' + date_time()});

}
outln("number of unique domains=" + #keys);
outln("domains=" + keys);
outln( 'domain (by registrations): ' + domain_users );
outln( 'domain (by usage): ' + domain_usages );



keys = @country_users;

if ( yesno('Plot ' + #keys + ' unique countries?') )
{

	xx = [];
	labels = [];
	yy=[];
	yy2=[];
	maxusers=0;
	keys = @country_users;
	index = 0;
	for(i=0;i<#keys;i++ )
	{
		if (keys[i] == "no data") continue;
		labels[index][0] = index;
		labels[index][1] = keys[i];
		xx[index] = index;
		users = country_users{keys[i]};
		yy[index] = users;
		if ( users > maxusers ) maxusers = users;
		index++;
	}
	outln(xx);
	outln(yy);

		
	newplot(false);
	plot(xx,yy, {'type'='bar', size=20});
	axis('x1', {'type'='label', 'labels'=labels,'label'='country', 'min'=-1, 'max'=index});
	axis('y1', {'label'='Number users', 'max'=maxusers+1, 'min'=0});
	plotopt({'legend'=false, 'title'='Users by country as of ' + date_time()});



	xx = [];
	labels = [];
	yy=[];
	yy2=[];
	maxper=0;
	keys = @country_usages;
	index = 0;
	non_other_countrys_usage = total_usage;
	for(i=0;i<#keys;i++ )
	{
		if (keys[i] == "no data") 
		{
			non_other_countrys_usage -= country_usages{keys[i]};
			continue;
		}
		labels[index][0] = index;
		labels[index][1] = keys[i];
		xx[index] = index;
		per = 100*country_usages{keys[i]}/non_other_countrys_usage;
		yy[index] = per;
		if ( per > maxper ) maxper = per;
		index++;
	}
	outln(xx);
	outln(yy);
		
	newplot(false);
	plot(xx,yy, {'type'='bar', size=20});
	axis('x1', {'type'='label', 'labels'=labels,'label'='country', 'min'=-1, 'max'=index});
	axis('y1', {'label'='Percentage (%)', 'max'=maxper*1.05, 'min'=0});
	plotopt({'legend'=false, 'title'='Usage by country as of ' + date_time()});

}
outln("number of unique countrys=" + #keys);
outln("countrys=" + keys);
outln( 'country (by registrations): ' + country_users );
outln( 'country (by usage): ' + country_usages );



xx = [];
labels = [];
yy=[];
yy2=[];
for( i=0;i<#public_versions;i++ )
{
	labels[i][0] = i;
	labels[i][1] = public_versions[i];
	
	xx[i] = i;
	yy[i] = ver_usage{public_versions[i]};
	yy2[i] = nusers{public_versions[i]};
}

outln('problem = ' + yy);
outln('problem = ' + yy2);


newplot(false);
plot(xx,yy, {'type'='bar', size=20});
axis('x1', {'type'='label', 'labels'=labels,'label'='Version', 'min'=-1, 'max'=#public_versions});
axis('y1', {'label'='Usage count', 'max'=max(yy)*1.05, 'min'=0});
plotopt({'legend'=false, 'title'='Usage by version as of ' + date_time()});


newplot(false);
plot(xx,yy2, {'type'='bar', size=20});
axis('x1', {'type'='label', 'labels'=labels,'label'='Version', 'min'=-1, 'max'=#public_versions});
axis('y1', {'label'='Registrations count', 'max'=max(yy2)*1.05, 'min'=0});
plotopt({'legend'=false, 'title'='Registrations by version as of ' + date_time()});


outln( '\ntotal number of users: ' + N );
outln( 'total usage: ' + total_usage );
outln( 'usage per person: ' + (total_usage/N) );
ndays = approx_days_since( 2014, 11, 24 );
outln( 'days since 2014/11/24: ' + ndays );
outln( 'average usage per day: ' + (total_usage/ndays) );

fn = homedir() + '/sam_users_domain_usage.csv';
fnum = open(fn,"w");

write_line(fnum, "Raw data for SAM users as of " + date_time());
write_line(fnum, "");
write_line(fnum, "Domains with usages greater than " + unique_domain_usage_threshold);
keys = @domain_users;
line = "Domain,Users,Usages";
write_line(fnum, line);
for(i=0;i<#keys;i++ )
{
	line = keys[i] + "," + domain_users{keys[i]} + "," + domain_usages{keys[i]};
	write_line(fnum, line);
}

write_line(fnum, "");
write_line(fnum, "Countries with usages greater than " + country_usage_threshold);
keys = @country_users;
line = "Country,Users,Usages";
write_line(fnum, line);
for(i=0;i<#keys;i++ )
{
	line = keys[i] + "," + country_users{keys[i]} + "," + country_usages{keys[i]};
	write_line(fnum, line);
}

close(fnum);
outln("Data written to " + fn);

/* optional row output
csvwrite(homedir() + '/sam_users_domain_usage.csv', domain_users);
csvwrite(homedir() + '/sam_users_domain_usage.csv', domain_usages);
line1 = "";
line2 = "";
line3 = "";
for(i=0;i<#keys-1;i++ )
{
	line1 += keys[i] + ",";
	line2 += domain_users{keys[i]} + ",";
	line3 += domain_usages{keys[i]} + ",";
}
line1 += keys[i];
line2 += domain_users{keys[i]};
line3 += domain_usages{keys[i]};


write_line(fnum, line1);
write_line(fnum, line2);
write_line(fnum, line3);
*/
