/* 
***************************************************************************************************** 
Notes
*****************************************************************************************************
1. Last tested on 1/6/2016
*/

// Turns 0/1 into failed/passed
function test_status(status)
{
	retCode = "failed";
	if (status == true)
		retCode = "passed";
	return retCode;
}

/* 
***************************************************************************************************** 
Performance tests
*****************************************************************************************************
*/

// Test 1: battery bank sizing test
function bank_sizing_test()
{
	batt_size_choice = get('batt_size_choice');
	e_desired = get('batt_bank_size');
	v_desired = get('batt_bank_voltage');
	e_computed = get('batt_computed_bank_capacity');
	v_computed = get('batt_computed_voltage');
	v_nom = get('batt_Vnom_default');
	q_full = get('batt_Qfull');
	tol = 1.0001;
	if (batt_size_choice == 0)
	{
		cells_series = ceil(v_desired/v_nom);
		v_computed_check = cells_series*v_nom;
		num_strings = ceil(e_desired*1000/(q_full*v_computed));

		e_computed_check = num_strings*q_full*0.001*v_computed_check;
		
		if ( abs(v_computed/v_computed_check) > tol || abs(e_computed/e_computed_check) > tol)
		{
			outln("---------Bank Sizing Test Failed!!!--------------------------");
			outln("num_strings: " + num_strings + " v_computed: " + v_computed + " v_check:" + v_computed_check + " e_computed: " + e_computed + " e_check:" + e_computed_check);
			outln("-------------------------------------------------------------");
			return false;
		}
	}
	return true;
}

// Test 2: chemistry selection test
function chemistry_test()
{
	batt_type = get('batt_type');
	batt_chem = get('batt_chem');
	batt_lead_type = get('batt_lead_type');
	batt_lithium_type = get('batt_lithium_type');
	num_lead_acid = 4;
	num_lithium_ion = 7;
	
	lead_type = 0;
	lithium_type = 1;
	
	if ((batt_type < num_lead_acid && batt_chem != lead_type) || (batt_type >= num_lead_acid && batt_chem != lithium_type))
	{
		outln("-------  Chemistry Test Failed!!! -------------------------------");
		outln(" batt_type: " + batt_type + " batt_chem: " + batt_chem + " batt_lead_type: " + batt_lead_type + " batt_lithium_type: " + batt_lithium_type);
		outln("------------------------------------------------------------------");
		return false;
	}
	return true;

}

// Test 3: voltage properties test
function voltage_test()
{
    Qfull = get('batt_Qfull'); 
    Qexp = get('batt_Qexp');
    Qnom = get('batt_Qnom');
    
	if ( (Qexp > Qfull) || (Qnom > Qfull) || (Qnom < 0) || (Qexp < 0) || (Qnom < 0) )
	{
		outln("------- Voltage Curve Test Failed!!! -------------------------------");
		outln("Qfull: " + Qfull + " Qexp: " + Qexp +" Qnom: " + Qnom);
		outln("------------------------------------------------------------------");
		return false;
	}
	return true;
}

// Test 4: current & capacity test
function current_test()
{
	current_charge_max = get('batt_current_charge_max');
	current_discharge_max = get('batt_current_discharge_max');
	if (current_charge_max < 0 || current_discharge_max < 0)
	{
		outln("------- Current Test Failed!!! -----------------------------------");
		outln("Max charge current: " + current_charge_max + " Max discharge current: " + current_discharge_max);
		outln("------------------------------------------------------------------");
		return false;
	}
	return true;
}

// Test 5: efficiencies check
function efficiencies_test()
{
	ac_dc = get('batt_ac_dc_efficiency');
	dc_ac = get('batt_dc_ac_efficiency');
	roundtrip = get('average_cycle_efficiency');
	if (ac_dc < 0 || ac_dc > 100 || dc_ac < 0 || dc_ac > 100 || roundtrip < 0 || roundtrip > 100)
	{
		outln("------- Efficiencies Test Failed!!! -----------------------------------");
		outln("ac_dc: " + ac_dc + " dc_ac: " + dc_ac + " roundtrip: " + roundtrip);
		outln("------------------------------------------------------------------");
		return false;
	}
	hi_tol = 1.0001; lo_tol = 0.9999;
	batt_power = []; batt_voltage = []; batt_current = [];
	batt_power = get('batt_power');
	batt_voltage = get('batt_voltage');
	batt_current = get('batt_I');
	dt_hour = 8760/#batt_power;
	
	for (i = 1; i < #batt_power; i++)
	{
		multiplier = 0.5*(batt_voltage[i]+batt_voltage[i-1])*dt_hour*0.001;
		batt_energy_compute = batt_current[i]*multiplier;
		batt_energy = batt_power[i]*dt_hour;
		
		batt_reduced_energy = 0;
		if (batt_energy_compute < 0)
			batt_reduced_energy = batt_energy_compute*ac_dc*0.01;
		else
			batt_reduced_energy = batt_energy_compute*dc_ac*0.01;
		
		ratio = abs(batt_reduced_energy/batt_energy);
		
		if (batt_energy == 0)
			ratio = 1;
			
		if ( ratio  > hi_tol || ratio < lo_tol || abs(batt_reduced_energy) > hi_tol*abs(batt_energy))
		{
			outln("------- Efficiencies Test Failed!!! -----------------------------------");
			outln("i: " + i + " ratio: " + ratio + " e_batt: " + batt_energy + " e_batt_computed: " + batt_reduced_energy);
			outln("------------------------------------------------------------------");
			return false;
		}
	}
	return true;
}

// Test 6: check if entries are > 0 and < qmax
function total_charge()
{
	q0 = []; qmax = [];
	q0 = get('batt_q0');
	qmax = get('batt_qmax');
	
	for (i=0; i<#q0; i++)
	{
		if (q0[i] < 0 || q0[i] > qmax[i])
		{
			outln("------- Capacity Output Failed!!! -----------------------------------");
			outln(": i: " + i + "q0: " + q0[i] + " qmax: " + qmax[i]);
			outln("------------------------------------------------------------------");
			return false;
		}
	}
	return true;
}

// Test 7: check if power to load > 0
function power_to_load()
{
	tol = 1.0001;
	pv = []; battery = []; grid = []; load_power = [];

	pv = get('pv_to_load');
	battery = get('batt_to_load');
	grid = get('grid_to_load');
	load_power = get('load');
	
	for (i=0; i<#pv; i++)
	{
		if ( (pv[i] < 0) || (battery[i] < 0) || (grid[i] < 0) || ( abs(load_power[i]/(pv[i] + battery[i] + grid[i])) > tol  ) )
		{
			outln("------- Power to Load Output Failed!!! -----------------------------------");
			outln(": i: " + i + " pv: " + pv[i] + " battery: " + battery[i] + " grid: " + grid[i] + " load: " + load_power[i]);
			outln("------------------------------------------------------------------");
			return false;
		}
	}
	return true;
}

// Test 8: check state of charge & cycle depth of discharge
function charge_state()
{
	SOC = []; DOD = [];
	SOC = get('batt_SOC');
	DOD = get('batt_DOD');
		
	for (i = 0; i<#SOC; i++)
	{
		if ( (SOC[i] < 0) || (SOC[i] > 100) || (DOD[i] < 0) || (DOD[i] > 100) )
		{
			outln("------- Charge State Output Failed!!! -----------------------------------");
			outln(": i: " + i + " SOC: " + SOC[i] + " cycle DOD: " + DOD[i]);
			outln("------------------------------------------------------------------");
			return false;
		}
	}
	return true;
}

// Test 9: check battery number of cycles
function cycle_degradation()
{
	cycles = []; lifetime_percent = [];
	cycles = get('batt_cycles');
	lifetime_percent = get('batt_capacity_percent');
	
	for (i=1; i<#cycles; i++)
	{
		if (cycles[i] < cycles[i-1] && cycles[i] !=0)
		{
			outln("------- Degradation Output Failed!!! -----------------------------------");
			outln(": i: " + i + " cycle: " + cycles[i] + " last cycle " + cycles[i-1]);
			outln("------------------------------------------------------------------");
			return false;
		}
		
	return true;	
	}
}
// Test 10: Peak Shaving Test
function peak_shaving_test()
{
	ret_code = true;
	month_days = [31,28,31,30,30,31,31,31,30,31,30,31];
		
	grid = []; load = [];
	demand_no_sys = []; demand_with_sys = [];
	
	grid = get('grid_power');
	load = get('load');
	demand_no_sys = get('year1_hourly_dc_without_system');
	demand_with_sys = get('year1_hourly_dc_with_system');
		
	// demand charges with sys should be less than without sys
	for (i = 0; i < #demand_no_sys; i++)
	{
		if (demand_with_sys[i] > demand_no_sys[i])
		{
			outln("------- Peak Shaving Test Failed!!! -----------------------------------");
			outln("i: " + i  + " Demand charge with system: " + demand_with_sys[i] + " Demand charge no system: " + demand_no_sys[i]);
			outln("------------------------------------------------------------------");
			ret_code = false;
			break;
		}
	}
	count = 0;
	for (month = 0; month < 12; month++)
	{	
		peak_load = 0; peak_grid = 0;
		for (day = 0; day < month_days[month]; day++)
		{
			for (hour = 0; hour < 24; hour++)
			{
				if (load[count] > peak_load)
					peak_load = load[count];
				if (grid[count] > peak_grid)
					peak_grid = grid[count];
				count++;
			}
		}
		if (peak_grid > peak_load)
		{
			outln("------- Peak Shaving Test Failed!!! -----------------------------------");
			outln("month: " + month  + " Peak load: " + peak_load + " Peak grid: " + peak_grid);
			outln("------------------------------------------------------------------");
			ret_code = false;
			break;
		}
		peak_load = 0;
		peak_grid = 0;
	}
	
	return ret_code;
}

// Test 11: replacements check
function replacements_test(defaults)
{
	lifetime = get('pv_lifetime_simulation');
	if(!lifetime)
	{
		set('pv_lifetime_simulation',true);
		simulate();
	}
	batt_bank_replacement = [];
	
	batt_replacement_option = get('batt_replacement_option');
	batt_capacity_percent = get('batt_capacity_percent');
	batt_replacement_capacity = get('batt_replacement_capacity');

	batt_bank_replacement = get('batt_bank_replacement');	
	
	retCode = true;
	
	// no replacement failed
	if (batt_replacement_option == 0 && sum(batt_bank_replacement) > 0)
		retCode = false;
	// force a replacement run
	else if (batt_replacement_option == 0)
	{
		set('batt_replacement_option',1);
		set('batt_replacement_capacity',98);
		simulate();
		batt_capacity_percent = get('batt_capacity_percent');

		if (batt_capacity_percent[#batt_capacity_percent-1] < get('batt_replacement_capacity'))
		{
			outln("------- Replacements Test Failed!!! -----------------------------------");
			outln("replacement option: " + get('batt_replacement_option') + " replacements: " + sum(get('batt_bank_replacement')) + " capacity_percent_end: " + batt_capacity_percent[#batt_capacity_percent-1] + " replacement capacity: " + get('batt_replacement_capacity'));
			outln("------------------------------------------------------------------");
			retCode = false;
		}
	}
	else if (batt_replacement_option == 1 || batt_replacement_option == 2)
	{
		if (batt_capacity_percent[#batt_capacity_percent-1] < batt_replacement_capacity)
		{
			outln("------- Replacements Test Failed!!! -----------------------------------");
			outln("replacement option: " + batt_replacement_option + " replacements: " + sum(batt_bank_replacement) + " capacity_percent_end: " + batt_capacity_percent[#batt_capacity_percent-1] + " replacement capacity: " + batt_replacement_capacity);
			outln("------------------------------------------------------------------");
			retCode = false;
		}
	}
	reset_default(defaults);
	return retCode;
}
// Test 11: Target Power Test
function target_power_test(default)
{
	simulate();
	retCode = true;
	month_days = [31,28,31,30,30,31,31,31,30,31,30,31];
	grid_to_load = [];
	peak_grid = [];
	grid_to_load = get("grid_to_load");
	count = 0;
	for (month = 0; month < 12; month++)
	{
		peak_grid[month] = 0;
		for (day = 0; day < month_days[month]; day++)
		{
			for (hour = 0; hour < 24; hour++)
			{
				if (grid_to_load[count] > peak_grid[month])
					peak_grid[month] = grid_to_load[count];
				count++;
			}
		}
	}
	
	set('batt_dispatch_choice', 2);
	set('batt_target_choice',0);
	set('batt_target_power_monthly', peak_grid);
	simulate();
	grid_to_load_new = [];
	peak_grid_new = [];
	grid_to_load_new = get("grid_to_load");
	count = 0;
	for (month = 0; month < 12; month++)
	{
		peak_grid_new[month] = 0;
		for (day = 0; day < month_days[month]; day++)
		{
			for (hour = 0; hour < 24; hour++)
			{
				if (grid_to_load_new[count] > peak_grid_new[month])
					peak_grid_new[month] = grid_to_load_new[count];
				count++;
			}
		}
	}
	
	hi_tol = 1.02; lo_tol = 0.98;
	for (i = 0; i < #peak_grid; i++)
	{
		if (abs(peak_grid[i]/peak_grid_new[i]) > hi_tol || abs(peak_grid[i]/peak_grid_new[i] < lo_tol))
		{
			outln("------- Target Power Dispatch Failed!!! -----------------------------------");
			outln("month: " + i + " target_peak_demand: " + peak_grid[i] + " peak_demand: " + peak_grid_new[i]);
			outln("------------------------------------------------------------------");
			retCode = false;
		}
	}
	
	reset_default(default);
	return retCode;
}
function reset_default(default)
{
	set('en_batt',default{"en_batt"});
	set('pv_lifetime_simulation',default{"pv_lifetime_simulation"});
	set('batt_size_choice',default{"batt_size_choice"});
	set('batt_bank_voltage',default{"batt_bank_voltage"});
	set('batt_type',default{"batt_type"});
	set('batt_Vnom_default',default{"batt_Vnom_default"});
	set('batt_C_rate',default{"batt_C_rate"});
	set('batt_Vfull',default{"batt_Vfull"});
	set('batt_Vexp',default{"batt_Vexp"});
	set('batt_Vnom',default{"batt_Vnom"});
	set('batt_Qfull',default{"batt_Qfull"});
	set('batt_Qexp_percent',default{"batt_Qexp_percent"});
	set('batt_Qnom_percent',default{"batt_Qnom_percent"});
	set('batt_C_rate_max_charge',default{"batt_C_rate_max_charge"});
	set('batt_C_rate_max_discharge',default{"batt_C_rate_max_discharge"});
	set('batt_dispatch_choice',default{"batt_dispatch_choice"});
	set('batt_pv_choice',default{"batt_pv_choice"});
	set('batt_target_choice',default{"batt_target_choice"});
	set('batt_minimum_SOC',default{"batt_minimum_SOC"});
	set('batt_maximum_SOC',default{"batt_maximum_SOC"});
	set('batt_minimum_modetime',default{"batt_minimum_modetime"});
	set('batt_replacement_option',default{"batt_replacement_option"});
	set('batt_replacement_capacity',default{"batt_replacement_capacity"});
	simulate();
}
/* 
***************************************************************************************************** 
Base case settings 
*****************************************************************************************************
*/
default{"en_batt"} = get('en_batt');
default{"pv_lifetime_simulation"} = get('pv_lifetime_simulation');
default{"batt_size_choice"} = get('batt_size_choice');
default{"batt_bank_size"} = get('batt_bank_size');
default{"batt_bank_voltage"} = get('batt_bank_voltage');
default{"batt_type"} = get('batt_type');
default{"batt_Vnom_default"} = get('batt_Vnom_default');
default{"batt_resistance"} = get('batt_resistance');
default{"batt_C_rate"} = get('batt_C_rate');
default{"batt_Vfull"} = get('batt_Vfull');
default{"batt_Vexp"} = get('batt_Vexp');
default{"batt_Vnom"} = get('batt_Vnom');
default{"batt_Qfull"} = get('batt_Qfull');
default{"batt_Qexp_percent"} = get('batt_Qexp_percent');
default{"batt_Qnom_percent"} = get('batt_Qnom_percent');
default{"batt_C_rate_max_charge"} = get('batt_C_rate_max_charge');
default{"batt_C_rate_max_discharge"} = get('batt_C_rate_max_discharge');
default{"batt_dispatch_choice"} = get('batt_dispatch_choice');
default{"batt_pv_choice"} = get('batt_pv_choice');
default{"batt_target_choice"} = get('batt_target_choice');
default{"batt_minimum_SOC"} = get('batt_minimum_SOC');
default{"batt_maximum_SOC"} = get('batt_maximum_SOC');
default{"batt_minimum_modetime"} = get('batt_minimum_modetime');
default{"batt_replacement_option"} = get('batt_replacement_option');
default{"batt_replacement_capacity"} = get('batt_replacement_capacity');

// add in manual dispatch tests
// add in power converter efficiencies test
// add in losses tests
// add in lifetime tests
// add in replacement tests
// add in thermal tests


/* 
***************************************************************************************************** 
Run Tests
*****************************************************************************************************
*/
outln("Performance Tests");
simulate();
outln("Test 1: " + test_status(bank_sizing_test()) + " - Bank sizing test" );
outln("Test 2: " + test_status(chemistry_test()) + " - Chemisty test");
outln("Test 3: " + test_status(voltage_test()) + " - Voltage curve test");
outln("Test 4: " + test_status(current_test())+ " - Current test");
outln("Test 5: " + test_status(efficiencies_test())+ " - Efficiencies test");
outln("Test 6: " + test_status(total_charge()) + " - Charge test" );
outln("Test 7: " + test_status(power_to_load()) +" - Power-to-load test");
outln("Test 8: " + test_status(charge_state()) + " -  Charge state test");
outln("Test 9: " + test_status(cycle_degradation()) + " - Cycle test");
outln("Test 10: " + test_status(peak_shaving_test()) + " - Peak shaving test");
outln("Test 11: " + test_status(replacements_test(default)) + " - Replacements test");
outln("Test 12: " + test_status(target_power_test(default)) + " - Target power test");

reset_default(default);
