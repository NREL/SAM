/* 
***************************************************************************************************** 
Notes
*****************************************************************************************************
1. Last tested on 2/3/2016
2. Point to a subhourly weather file
3. Point to an hourly load profile, subhourly load profile
4. Set tolerances
*/

global subhourly_weather = 'C:\\Users\\ndiorio\\Documents\\Data\\One-minute weather\\FortLauderdale.csv';
global hourly_load = 'C:\\Users\\ndiorio\\Documents\\Data\\One-hour load\\SAM_default.txt';
global subhourly_load = 'C:\\Users\\ndiorio\\Documents\\Data\\15-minute load\\El Monte.txt';

global tol = 0.001;

global lo_tol = 0.999;
global hi_tol = 1.001;

global hi_tol_relaxed = 1.02; 
global lo_tol_relaxed = 0.98;

// Turns 0/1 into failed/passed
function test_status(status)
{
	retCode = "failed";
	if (status == true)
		retCode = "passed";
	return retCode;
}

/* 
***************************************************************************************************** 
Performance tests
*****************************************************************************************************
*/

// Test 1: battery bank sizing test
function bank_sizing_test()
{
	retCode = true;
	batt_size_choice = get('batt_size_choice');
	e_desired = get('batt_bank_size');
	v_desired = get('batt_bank_voltage');
	e_computed = get('batt_computed_bank_capacity');
	v_computed = get('batt_computed_voltage');
	v_nom = get('batt_Vnom_default');
	q_full = get('batt_Qfull');

	if (batt_size_choice == 0)
	{
		cells_series = ceil(v_desired/v_nom);
		v_computed_check = cells_series*v_nom;
		num_strings = ceil(e_desired*1000/(q_full*v_computed));

		e_computed_check = num_strings*q_full*0.001*v_computed_check;
		
		if ( abs(v_computed/v_computed_check) > hi_tol || abs(v_computed/v_computed_check) < lo_tol || abs(e_computed/e_computed_check) > hi_tol || abs(e_computed/e_computed_check) < lo_tol)
		{
			outln("---------Bank Sizing Test Failed!!!--------------------------");
			outln("num_strings: " + num_strings + " v_computed: " + v_computed + " v_check:" + v_computed_check + " e_computed: " + e_computed + " e_check:" + e_computed_check);
			outln("-------------------------------------------------------------");
			retCode = false;
		}
	}
	return retCode;
}

// Test 2: chemistry selection test
function chemistry_test()
{
	retCode = true;
	batt_type = get('batt_type');
	batt_chem = get('batt_chem');
	num_lead_acid = 4;
	num_lithium_ion = 7;
	
	lead_type = 0;
	lithium_type = 1;
	
	if ((batt_type < num_lead_acid && batt_chem != lead_type) || (batt_type >= num_lead_acid && batt_chem != lithium_type))
	{
		outln("-------  Chemistry Test Failed!!! -------------------------------");
		outln(" batt_type: " + batt_type + " batt_chem: " + batt_chem);
		outln("------------------------------------------------------------------");
		retCode = false;
	}
	return retCode;

}

// Test 3: voltage properties test
function voltage_test()
{
	retCode = true;
    Qfull = get('batt_Qfull'); 
    Qexp = get('batt_Qexp');
    Qnom = get('batt_Qnom');
    
	if ( (Qexp > Qfull) || (Qnom > Qfull) || (Qnom < 0) || (Qexp < 0) || (Qnom < 0) )
	{
		outln("------- Voltage Curve Test Failed!!! -------------------------------");
		outln("Qfull: " + Qfull + " Qexp: " + Qexp +" Qnom: " + Qnom);
		outln("------------------------------------------------------------------");
		retCode = false;
	}
	return retCode;
}

// Test 4: current & capacity test
function current_test()
{
	retCode = true;
	current_charge_max = get('batt_current_charge_max');
	current_discharge_max = get('batt_current_discharge_max');
	
	if (current_charge_max < 0 || current_discharge_max < 0)
	{
		outln("------- Current Test Failed!!! -----------------------------------");
		outln("Max charge current: " + current_charge_max + " Max discharge current: " + current_discharge_max);
		outln("------------------------------------------------------------------");
		retCode = false;
	}
	
	current = [];
	current = get('batt_I');
	for (i = 0; i < #current; i++)
	{
		I = current[i];
		if ((I > 0 && I > current_discharge_max) || (I < 0 && abs(I) > current_charge_max))
		{
			outln("------- Current Test Failed!!! -----------------------------------");
			outln("i: " + i + " I: " + I + " Max charge current: " + current_charge_max + " Max discharge current: " + current_discharge_max);
			outln("------------------------------------------------------------------");
			retCode = false;
		}
	}
	
	return retCode;
}

// Test 5: efficiencies check
function ac_connected_test()
{
	topology = get('batt_ac_or_dc');
	
	if (topology == 1)
	{
		ac_dc = get('batt_ac_dc_efficiency');
		dc_ac = get('batt_dc_ac_efficiency');
		roundtrip = get('average_cycle_efficiency');
		if (ac_dc < 0 || ac_dc > 100 || dc_ac < 0 || dc_ac > 100 || roundtrip < 0 || roundtrip > 100)
		{
			outln("------- Efficiencies Test Failed!!! -----------------------------------");
			outln("ac_dc: " + ac_dc + " dc_ac: " + dc_ac + " roundtrip: " + roundtrip);
			outln("------------------------------------------------------------------");
			return false;
		}
		batt_power = []; batt_voltage = []; batt_current = [];
		batt_power = get('batt_power');
		batt_voltage = get('batt_voltage');
		batt_current = get('batt_I');
		dt_hour = 8760/#batt_power;
		
		for (i = 1; i < #batt_power; i++)
		{
			multiplier = 0.5*(batt_voltage[i]+batt_voltage[i-1])*dt_hour*0.001;
			batt_energy_compute = batt_current[i]*multiplier;
			batt_energy = batt_power[i]*dt_hour;
			
			batt_reduced_energy = 0;
			if (batt_energy_compute < 0)
				batt_reduced_energy = batt_energy_compute/(ac_dc*0.01);
			else
				batt_reduced_energy = batt_energy_compute*dc_ac*0.01;
			
			ratio = abs(batt_reduced_energy/batt_energy);
			
			if (batt_energy == 0)
				ratio = 1;
				
			if ( ratio  > hi_tol || ratio < lo_tol || abs(batt_reduced_energy) > hi_tol*abs(batt_energy))
			{
				outln("------- Efficiencies Test Failed!!! -----------------------------------");
				outln("i: " + i + " ratio: " + ratio + " e_batt: " + batt_energy + " e_batt_computed: " + batt_reduced_energy);
				outln("------------------------------------------------------------------");
				return false;
			}
		}
	}
	return true;
}

// Test 6: check if entries are > 0 and < qmax
function total_charge()
{
	retCode = true;
	q0 = []; qmax = [];
	q0 = get('batt_q0');
	qmax = get('batt_qmax');
	
	for (i=0; i<#q0; i++)
	{
		if (q0[i] < 0 || q0[i] > qmax[i])
		{
			outln("------- Capacity Output Failed!!! -----------------------------------");
			outln(": i: " + i + "q0: " + q0[i] + " qmax: " + qmax[i]);
			outln("------------------------------------------------------------------");
			retCode = false;
		}
	}
	return retCode;
}

// Test 7: check if power to load > 0
function power_to_load()
{
	retCode = true;
	pv = []; battery = []; grid = []; load_power = [];
	pv = get('pv_to_load');
	battery = get('batt_to_load');
	grid = get('grid_to_load');
	load_energy = [];
	
	lifetime = get('pv_lifetime_simulation');
	analysis_period = 1;
	
	if (lifetime)
	{
		load_energy = get('lifetime_load');
		analysis_period = get('analysis_period');
	}
		
	else
		load_energy = get('load');
		
	// load is output in Kwh for some reason
	time_steps_per_hour = (#load_energy) / (analysis_period * 8760);
	
	// can't compare if using different time steps for weather and load
	if (#load_energy == #pv)
	{
		for (i=0; i<#pv; i++)
		{
			load_power = load_energy[i] * time_steps_per_hour;
			check = load_power/(pv[i] + battery[i] + grid[i]);
			if ( pv[i] < 0 || battery[i] < 0 || grid[i] < 0||  check > hi_tol  || check < lo_tol  )
			{
				outln("------- Power to Load Output Failed!!! -----------------------------------");
				outln(": i: " + i + " pv: " + pv[i] + " battery: " + battery[i] + " grid: " + grid[i] + " load: " + load_power + " check: " + check);
				outln("------------------------------------------------------------------");
				break;
				retCode = false;
			}
		}
	}
	return retCode;
}

// Test 8: check power to battery
function power_to_battery()
{
	retCode = true;
	
	pv = []; battery = []; grid = []; 

	pv = get('pv_to_batt');
	battery = get('batt_power');
	grid = get('grid_to_batt');

	for (i=0; i<#pv; i++)
	{
		if ( (pv[i] < 0) || (grid[i] < 0))
		{
			outln("------- Power to Battery Output Failed!!! -----------------------------------");
			outln(": i: " + i  + " pv_to_batt: " + pv[i] + " battery: " + battery[i] + " grid_to_batt: " + grid[i]);
			outln("------------------------------------------------------------------");
			break;
			retCode = false;
		}
		check = 0;
		if (pv[i] + grid[i] != 0)
			check = abs(battery[i]/(pv[i] + grid[i]));
			
		if (battery[i] < -tol && (  check > hi_tol || check < lo_tol  ) )
		{
			outln("------- Power to Battery Output Failed!!! -----------------------------------");
			outln(": i: " + i +  " pv_to_batt: " + pv[i] + " battery: " + battery[i] + " grid_to_batt: " + grid[i] + " check: " + check );
			outln("------------------------------------------------------------------");
			break;
			retCode = false;
		}
	}
	
	reset_default(default);
	return retCode;
}


// Test 9: check state of charge & cycle depth of discharge
function charge_state()
{
	retCode = true;
	SOC = []; DOD = [];
	SOC = get('batt_SOC');
	DOD = get('batt_DOD');
	q0 = get('batt_q0');
	qmax = get('batt_qmax');

	for (i = 0; i<#SOC; i++)
	{
		if ( (SOC[i] < 0) || (SOC[i] > 100) || (DOD[i] < 0) || (DOD[i] > 100 ) || (q0[i]/qmax[i]>hi_tol*SOC[i]*0.01) || (q0[i]/qmax[i]<lo_tol*SOC[i]*0.01))
		{
			outln("------- Charge State Output Failed!!! -----------------------------------");
			outln(": i: " + i + " SOC: " + SOC[i] + " cycle DOD: " + DOD[i] + " q0: " + q0[i] + " qmax: " + qmax[i]);
			outln("------------------------------------------------------------------");
			retCode = false;
			break;
		}
	}
	return retCode;
}

// Test 10: check battery number of cycles
function cycle_degradation()
{
	retCode = true;
	cycles = []; lifetime_percent = [];
	cycles = get('batt_cycles');
	lifetime_percent = get('batt_capacity_percent');
	
	for (i=1; i<#cycles; i++)
	{
		if (cycles[i] < cycles[i-1] && cycles[i] !=0)
		{
			outln("------- Degradation Output Failed!!! -----------------------------------");
			outln(": i: " + i + " cycle: " + cycles[i] + " last cycle " + cycles[i-1]);
			outln("------------------------------------------------------------------");
			retCode = false;
		}
		if (lifetime_percent[i] > lifetime_percent[i-1] && cycles[i] !=0)
		{
			outln("------- Degradation Output Failed!!! -----------------------------------");
			outln(": i: " + i + " capacity_percent: " + lifetime_percent[i] + " last capacity_percent " + lifetime_percent[i-1]);
			outln("------------------------------------------------------------------");
			retCode = false;
		}
	}
	return retCode;	
}
// Test 11: Peak Shaving Test
function peak_shaving_test()
{
	ret_code = true;
	month_days = [31,28,31,30,30,31,31,31,30,31,30,31];
		
	grid = []; load = [];
	demand_no_sys = []; demand_with_sys = [];
	
	grid = get('grid_power');
	demand_no_sys = get('year1_hourly_dc_without_system');
	demand_with_sys = get('year1_hourly_dc_with_system');
	
	lifetime = get('pv_lifetime_simulation');
	if (lifetime)
		load = get('lifetime_load');
	else
		load = get('load');
		
	// demand charges with sys should be less than without sys
	for (i = 0; i < #demand_no_sys; i++)
	{
		if (demand_with_sys[i] > demand_no_sys[i])
		{
			outln("------- Peak Shaving Test Failed!!! -----------------------------------");
			outln("i: " + i  + " Demand charge with system: " + demand_with_sys[i] + " Demand charge no system: " + demand_no_sys[i]);
			outln("------------------------------------------------------------------");
			ret_code = false;
			break;
		}
	}
	count = 0;
	for (month = 0; month < 12; month++)
	{	
		peak_load = 0; peak_grid = 0;
		for (day = 0; day < month_days[month]; day++)
		{
			for (hour = 0; hour < 24; hour++)
			{
				if (load[count] > peak_load)
					peak_load = load[count];
				if (grid[count] > peak_grid)
					peak_grid = grid[count];
				count++;
			}
		}
		if (peak_grid > peak_load)
		{
			outln("------- Peak Shaving Test Failed!!! -----------------------------------");
			outln("month: " + month  + " Peak load: " + peak_load + " Peak grid: " + peak_grid);
			outln("------------------------------------------------------------------");
			ret_code = false;
			break;
		}
		peak_load = 0;
		peak_grid = 0;
	}
	
	return ret_code;
}

// Test 12: replacements check
function replacements_test(defaults)
{
	batt_bank_replacement = [];
	
	batt_replacement_option = get('batt_replacement_option');
	batt_capacity_percent = get('batt_capacity_percent');
	batt_replacement_capacity = get('batt_replacement_capacity');

	batt_bank_replacement = get('batt_bank_replacement');	
	
	retCode = true;
	
	// no replacement failed
	if (batt_replacement_option == 0 && sum(batt_bank_replacement) > 0)
		retCode = false;
	// force a replacement run
	else if (batt_replacement_option == 0)
	{
		replace_capacity = 99.5;
		set('batt_replacement_option',1);
		set('batt_replacement_capacity',replace_capacity);
		simulate([], false);
		batt_capacity_percent = get('batt_capacity_percent');

		if (batt_capacity_percent[#batt_capacity_percent-1] < replace_capacity)
		{
			outln("------- Replacements Test Failed!!! -----------------------------------");
			outln("replacement option: " + get('batt_replacement_option') + " replacements: " + sum(get('batt_bank_replacement')) + " capacity_percent_end: " + batt_capacity_percent[#batt_capacity_percent-1] + " replacement capacity: " + replace_capacity );
			outln("------------------------------------------------------------------");
			retCode = false;
		}
	}
	else if (batt_replacement_option == 1 || batt_replacement_option == 2)
	{
		if (batt_capacity_percent[#batt_capacity_percent-1] < batt_replacement_capacity)
		{
			outln("------- Replacements Test Failed!!! -----------------------------------");
			outln("replacement option: " + batt_replacement_option + " replacements: " + sum(batt_bank_replacement) + " capacity_percent_end: " + batt_capacity_percent[#batt_capacity_percent-1] + " replacement capacity: " + batt_replacement_capacity);
			outln("------------------------------------------------------------------");
			retCode = false;
		}
	}
	reset_default(defaults);
	return retCode;
}
// Test 13: Target Power Test
function target_power_test(default)
{
	// run over automated dispatch first
	set('batt_dispatch_choice',0);
	simulate([], false);
	retCode = true;
	
	analysis_period = 1;
	if (get('pv_lifetime_simulation') == true)
		analysis_period = get('analysis_period');
		
	month_days = [31,28,31,30,30,31,31,31,30,31,30,31];
	grid_to_load = [];
	peak_grid = [];
	grid_to_load = get("grid_to_load");
	steps_per_hour = #grid_to_load/(8760*analysis_period);
	
	
	count = 0;
	for (month = 0; month < 12; month++)
	{
		peak_grid[month] = 0;
		for (day = 0; day < month_days[month]; day++)
		{
			for (hour = 0; hour < 24; hour++)
			{
				for (step = 0; step < steps_per_hour; step++)
				{
					if (grid_to_load[count] > peak_grid[month])
						peak_grid[month] = grid_to_load[count];
					count++;
				}
			}
		}
	}
	// run target dispatch 
	set('batt_dispatch_choice', 2);
	set('batt_target_choice',0);
	set('batt_target_power_monthly', peak_grid);
	simulate([], false);
	grid_to_load_new = [];
	peak_grid_new = [];
	grid_to_load_new = get("grid_to_load");
	count = 0;
	for (month = 0; month < 12; month++)
	{
		peak_grid_new[month] = 0;
		for (day = 0; day < month_days[month]; day++)
		{
			for (hour = 0; hour < 24; hour++)
			{
				for (step = 0; step < steps_per_hour; step++)
				{
					if (grid_to_load_new[count] > peak_grid_new[month])
						peak_grid_new[month] = grid_to_load_new[count];
					count++;
				}
			}
		}
	}
	
	for (i = 0; i < #peak_grid; i++)
	{
		if (abs(peak_grid[i]/peak_grid_new[i]) > hi_tol_relaxed || abs(peak_grid[i]/peak_grid_new[i] < lo_tol_relaxed))
		{
			outln("------- Target Power Dispatch Failed!!! -----------------------------------");
			outln("month: " + i + " target_peak_demand: " + peak_grid[i] + " peak_demand: " + peak_grid_new[i] + " percent difference: " + 100*abs(peak_grid_new[i] - peak_grid[i])/peak_grid[i]);
			outln("------------------------------------------------------------------");
			retCode = false;
			break;
		}
	}
	
	reset_default(default);
	return retCode;
}
// Test 14: Manual Dispatch Test
function manual_dispatch_test(default)
{
	retCode = true;
	
	set('batt_dispatch_choice',3);	
	simulate([], false);
	
	grid_to_batt = []; pv_to_batt = []; batt_to_load = []; batt_dispatch_sched = []; batt_dispatch_sched_weekend = [];
	can_charge = []; can_gridcharge = []; can_discharge = []; gridcharge_percent = []; discharge_percent = []; q_max = [];
	gridcharge_percent = []; discharge_percent = [];
	
	grid_to_batt = get('grid_to_batt');
	pv_to_batt = get('pv_to_batt');
	batt_to_load = get('batt_to_load');
	batt_dispatch_sched = get('dispatch_manual_sched');
	batt_dispatch_sched_weekend = get('dispatch_manual_sched_weekend');
	can_charge = get('dispatch_manual_charge');
	can_gridcharge = get('dispatch_manual_gridcharge');
	can_discharge = get('dispatch_manual_discharge');
	gridcharge_percent_partial = get('dispatch_manual_percent_gridcharge');
	discharge_percent_partial = get('dispatch_manual_percent_discharge');
	q_max = get('batt_qmax');
	voltage = get('batt_voltage');
	dt_hour = 8760 / #grid_to_batt;
	steps_per_hour = 1/dt_hour;
	
	grid_index = 0;
	discharge_index = 0;
	for (period = 0; period < 6; period++)
	{
		gridcharge_percent[period] = 0;
		discharge_percent[period] = 0;
		
		if (can_gridcharge[period])
		{
			gridcharge_percent[period] = gridcharge_percent_partial[grid_index];
			grid_index++;
		}
		if (can_discharge[period])
		{
			discharge_percent[period] = discharge_percent_partial[discharge_index];
			discharge_index++;
		}
	}

	count = 0;
	month_days = [31,28,31,30,30,31,31,31,30,31,30,31];
	is_weekend = false;
	day_of_week = 0;
	for (month = 0; month < 12; month++)
	{
		for (day = 0; day < month_days[month]; day++)
		{
			for (hour = 0; hour < 24; hour++)
			{
				profile = [];
				if (is_weekend)
					profile = batt_dispatch_sched_weekend[month][hour];
				else
					profile = batt_dispatch_sched[month][hour];
					
				charge = can_charge[profile-1];
				gridcharge = can_gridcharge[profile-1];
				discharge = can_discharge[profile-1];
				grid_percent = gridcharge_percent[profile-1];
				dis_percent = discharge_percent[profile-1];
				pmax = q_max[count]*voltage[count]*0.001/dt_hour;
				
				for (step = 0; step < steps_per_hour; step++)
				{
					if (pv_to_batt[count] > 0 && charge == false  ) 
					{
						outln("------- Manual Dispatch Failed!!! -----------------------------------");
						outln("month: " + month + " day: " + day + " hour: " + hour + " step: " + step + " charge: " + charge + " pv_to_batt: " + pv_to_batt[count] + " profile: " + profile+ " weekend: " + is_weekend);
						outln("------------------------------------------------------------------");
						retCode = false;
						break;
					}
					
					if ( (grid_to_batt[count] > 0 && gridcharge == false) || (grid_to_batt[count]/pmax > (grid_percent*0.01*hi_tol_relaxed + 2 ) )
)					{
						outln("------- Manual Dispatch Failed!!! -----------------------------------");
						outln("month: " + month + " day: " + day +" hour: " + hour + " step: " + step +" gridcharge: " + gridcharge + " grid_to_batt: " + grid_to_batt[count] + " pmax: " + pmax + " gridcharge_percent: " + grid_percent + " profile: " + profile+ " weekend: " + is_weekend);
						outln("------------------------------------------------------------------");
						retCode = false;
						break;
					}
					
					if ( (batt_to_load[count] > 0 && discharge == false) || (batt_to_load[count]/pmax > (dis_percent*0.01 + 2) ) )
					{
						outln("------- Manual Dispatch Failed!!! -----------------------------------");
						outln("month: " + month + " day: " + day + " hour: " + hour + " step: " + step +" discharge: " + discharge + " batt_to_load: " + batt_to_load[count] + " pmax: " + pmax + " discharge_percent: " + dis_percent + " profile: " + profile + " weekend: " + is_weekend);
						outln("------------------------------------------------------------------");
						retCode = false;
						break;
					}
					count++;
				}
				if (retCode == false)
					break;
			}

			day_of_week++;
			if (day_of_week > 6)
				day_of_week = 0;
			if (day_of_week > 4)
				is_weekend = true;
			else
				is_weekend = false;
			
			if (retCode == false)
				break;
		}
		if (retCode == false)
			break;
	}
	reset_default(default);
	return retCode;
}
// Test 15: PV to battery priority test
function pv_charge_battery_first_test()
{
	retCode = true;
	if (get('batt_pv_choice') == 1)
	{
		pv_dc_net = []; pv_to_batt = []; pv_to_load = []; 
		batt_SOC = []; batt_power = []; 
		
		batt_power = get('batt_power');
		pv_dc_net = get('dc_net');
		pv_to_batt = get('pv_to_batt');
		pv_to_load = get('pv_to_load');
		batt_SOC = get('batt_SOC');
		batt_maximum_SOC = get('batt_maximum_SOC');

		for (i = 0; i < #batt_power; i++)
		{
			if (batt_power[i] < 0)
			{
				if (pv_to_batt[i] < abs(batt_power[i]) && pv_to_load[i] > 0)
				{
					outln("------- PV to battery priority Failed!!! -----------------------------------");
					outln("i: " + i + " SOC: " + batt_SOC[i] + "/" + batt_maximum_SOC + " pv_net: " + pv_dc_net[i] + " pv_to_load: " + pv_to_load[i] + " pv_to_batt: " + pv_to_batt[i] + " batt_power: " + batt_power[i]);
					outln("------------------------------------------------------------------");
					retCode = false;
					break;
				}
			}
		}
	}
	return retCode;
}

// default values which will be used to reset
function reset_default(default)
{
	set('en_batt',default{"en_batt"});
	set('pv_lifetime_simulation',default{"pv_lifetime_simulation"});
	set('batt_size_choice',default{"batt_size_choice"});
	set('batt_bank_voltage',default{"batt_bank_voltage"});
	if (get("batt_type") != default{"batt_type"})
		set('batt_type',default{"batt_type"});
	set('batt_Vnom_default',default{"batt_Vnom_default"});
	set('batt_C_rate',default{"batt_C_rate"});
	set('batt_Vfull',default{"batt_Vfull"});
	set('batt_Vexp',default{"batt_Vexp"});
	set('batt_Vnom',default{"batt_Vnom"});
	set('batt_Qfull',default{"batt_Qfull"});
	set('batt_Qexp_percent',default{"batt_Qexp_percent"});
	set('batt_Qnom_percent',default{"batt_Qnom_percent"});
	set('batt_C_rate_max_charge',default{"batt_C_rate_max_charge"});
	set('batt_C_rate_max_discharge',default{"batt_C_rate_max_discharge"});
	set('batt_dispatch_choice',default{"batt_dispatch_choice"});
	set('batt_pv_choice',default{"batt_pv_choice"});
	set('batt_target_choice',default{"batt_target_choice"});
	set('batt_minimum_SOC',default{"batt_minimum_SOC"});
	set('batt_maximum_SOC',default{"batt_maximum_SOC"});
	set('batt_minimum_modetime',default{"batt_minimum_modetime"});
	set('batt_replacement_option',default{"batt_replacement_option"});
	set('batt_replacement_capacity',default{"batt_replacement_capacity"});
	simulate([],false);
}

// add scenarios and loop over all within main test, calling all unit tests 
// for multiople scenarios
function pv_choice_scenarios(scenario)
{
	if (scenario == 0)
		set('batt_pv_choice',0);
	else if (scenario == 1)
		set('batt_pv_choice',1);
}
function weatherfile_scenarios(scenario)
{
	if (scenario == 0)
		set('use_specific_weather_file',0);
	else if (scenario == 1)
	{
		set('use_specific_weather_file',1);
		set('user_specified_weather_file', subhourly_weather );
		outln('weather_file: ' + subhourly_weather);
	}
}
function loadprofile_scenarios(scenario)
{
	if (scenario == 0)
	{
		load_user_data = read_text_file(hourly_load);
		outln('load_profile: ' + hourly_load);
	}
	else if (scenario == 1)
	{
		load_user_data = read_text_file(subhourly_load);
		outln('load_profile: ' + subhourly_load);
	}

	set('load_user_data', load_user_data);
}
function analysisperiod_scenarios(scenario)
{
	if (scenario == 0)
		set('pv_lifetime_simulation',0);
	else if (scenario == 1)
		set('pv_lifetime_simulation',1);
}
function chemistry_scenarios(scenario)
{
	if (scenario == 0)
		set('batt_type',0);
	else if (scenario == 1)
		set('batt_type',1);
	else if (scenario == 2)
		set('batt_type',2);
	else if (scenario == 3)
		set('batt_type',3);
	else if (scenario == 4)
		set('batt_type',4);
	else if (scenario == 5)
		set('batt_type',5);
	else if (scenario == 6)
		set('batt_type',6);
	else if (scenario == 7)
		set('batt_type',7);
	else if (scenario == 8)
		set('batt_type',8);
	else if (scenario == 9)
		set('batt_type',9);
	else if (scenario == 10)
		set('batt_type',10);
}
function set_scenarios(pv_choice, weather, load, analysis, chemistry)
{
	outln('Scenario Settings');
	outln('pv_choice: ' + pv_choice + ' weather: ' + weather + ' load_profile: ' + load + ' analysis_period: ' + analysis + ' chemistry: ' + chemistry);
	pv_choice_scenarios(pv_choice);
	weatherfile_scenarios(weather);
	loadprofile_scenarios(load);
	analysisperiod_scenarios(analysis);
	chemistry_scenarios(chemistry);
}

/* 
***************************************************************************************************** 
Base case settings 
*****************************************************************************************************
*/
default{"en_batt"} = get('en_batt');
default{"batt_size_choice"} = get('batt_size_choice');
default{"batt_bank_size"} = get('batt_bank_size');
default{"batt_bank_voltage"} = get('batt_bank_voltage');
default{"batt_type"} = get('batt_type');
default{"batt_Vnom_default"} = get('batt_Vnom_default');
default{"batt_resistance"} = get('batt_resistance');
default{"batt_C_rate"} = get('batt_C_rate');
default{"batt_Vfull"} = get('batt_Vfull');
default{"batt_Vexp"} = get('batt_Vexp');
default{"batt_Vnom"} = get('batt_Vnom');
default{"batt_Qfull"} = get('batt_Qfull');
default{"batt_Qexp_percent"} = get('batt_Qexp_percent');
default{"batt_Qnom_percent"} = get('batt_Qnom_percent');
default{"batt_C_rate_max_charge"} = get('batt_C_rate_max_charge');
default{"batt_C_rate_max_discharge"} = get('batt_C_rate_max_discharge');
default{"batt_dispatch_choice"} = get('batt_dispatch_choice');
default{"batt_target_choice"} = get('batt_target_choice');
default{"batt_minimum_SOC"} = get('batt_minimum_SOC');
default{"batt_maximum_SOC"} = get('batt_maximum_SOC');
default{"batt_minimum_modetime"} = get('batt_minimum_modetime');
default{"batt_replacement_option"} = get('batt_replacement_option');
default{"batt_replacement_capacity"} = get('batt_replacement_capacity');

// add in losses tests
// add in thermal tests

/*
 manual tests - unless can think of way to script
 1. Upgrade project file with battery, test all dispatch strategies
 2. Upgrade project file, change weather file
*/   

/* 
***************************************************************************************************** 
Run Tests
*****************************************************************************************************
*/
n_pvchoice = 2;
n_weather = 2;
n_load = 2;
n_analysis_period = 2;
n_chemistry = 11;

outln("Performance Tests");

for (pv_choice = 0; pv_choice != n_pvchoice; pv_choice++)
{
	for (weather = 1; weather != n_weather; weather++)
	{
		for (load = 0; load != n_load; load++)
		{
			for (lifetime_analysis = 0; lifetime_analysis != n_analysis_period; lifetime_analysis++)
			{
				for (chemistry = 0; chemistry != n_chemistry; chemistry++)
				{
					set_scenarios(pv_choice, weather, load, lifetime_analysis, chemistry);
					simulate([], false);
					outln("Test 1: " + test_status(bank_sizing_test()) + " - Bank sizing test" );
					outln("Test 2: " + test_status(chemistry_test()) + " - Chemisty test");
					outln("Test 3: " + test_status(voltage_test()) + " - Voltage curve test");
					
					// not sufficient outputs in lifetime mode for these tests
					if (lifetime_analysis == false)
					{
						outln("Test 4: " + test_status(current_test())+ " - Current test");
						outln("Test 5: " + test_status(ac_connected_test())+ " - Efficiencies test");
						outln("Test 6: " + test_status(total_charge()) + " - Charge test" );
					}
					outln("Test 7: " + test_status(power_to_load()) +" - Power-to-load test");
					outln("Test 8: " + test_status(power_to_battery()) + " - Power-to-battery test");
					
					if (lifetime_analysis == false)
					{
						outln("Test 9: " + test_status(charge_state()) + " -  Charge state test");
						outln("Test 10: " + test_status(cycle_degradation()) + " - Cycle test");
					}
					outln("Test 11: " + test_status(peak_shaving_test()) + " - Peak shaving test");
					outln("Test 12: " + test_status(replacements_test(default)) + " - Replacements test");
					outln("Test 13: " + test_status(target_power_test(default)) + " - Target power test");
					
					if (lifetime_analysis == false)
						outln("Test 14: " + test_status(manual_dispatch_test(default)) + " - Manual power test");
						
					outln("Test 15: " + test_status(pv_charge_battery_first_test()) + " - PV charge battery test");
					reset_default(default);
				}
			}
		}
	}
}