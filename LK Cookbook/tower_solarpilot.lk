	if( get('tower_technology') != 1 )
	{
		flux_max = get('flux_max_mspt');
	}
	else
	{
		flux_max = get('flux_max_dsg');
	}
	obj = ssc_create();
	ssc_var(obj, "solar_resource_file",get('solar_resource_file'));
	ssc_var(obj, "helio_width",get('helio_width'));
	ssc_var(obj, "helio_height",get('helio_height'));
	ssc_var(obj, "helio_optical_error",get('helio_optical_error'));
	ssc_var(obj, "helio_active_fraction",get('helio_active_fraction'));
	ssc_var(obj, "dens_mirror",get('dens_mirror'));
	ssc_var(obj, "helio_reflectance",get('helio_reflectance'));
	ssc_var(obj, "rec_absorptance",get('rec_absorptance'));
	ssc_var(obj, "rec_height",get('H_rec'));
	ssc_var(obj, "rec_aspect",get('rec_aspect'));
	ssc_var(obj, "rec_hl_perm2",get('rec_hl_perm2'));
	ssc_var(obj, "q_design",get('Q_rec_des'));
	ssc_var(obj, "dni_des", get('dni_des'));
	ssc_var(obj, "land_max",get('land_max'));
	ssc_var(obj, "land_min",get('land_min'));
	ssc_var(obj, "h_tower",get('THT'));
	ssc_var(obj, "c_atm_0",get('c_atm_0'));
	ssc_var(obj, "c_atm_1",get('c_atm_1'));
	ssc_var(obj, "c_atm_2",get('c_atm_2'));
	ssc_var(obj, "c_atm_3",get('c_atm_3'));
	ssc_var(obj, "n_facet_x",get('n_facet_x'));
	ssc_var(obj, "n_facet_y",get('n_facet_y'));
	ssc_var(obj, "cant_type",get('cant_type'));
	ssc_var(obj, "focus_type",get('focus_type'));
	ssc_var(obj, "calc_fluxmaps", 0);
	ssc_var(obj, "tower_fixed_cost",get('csp.pt.cost.tower.fixed'));
	ssc_var(obj, "tower_exp",get('csp.pt.cost.tower.scaling_exp'));
	ssc_var(obj, "rec_ref_cost",get('csp.pt.cost.receiver.ref_cost'));
	ssc_var(obj, "rec_ref_area",get('csp.pt.cost.receiver.ref_area'));
	ssc_var(obj, "rec_cost_exp",get('csp.pt.cost.receiver.scaling_exp'));
	ssc_var(obj, "site_spec_cost",get('csp.pt.cost.site_improvements_per_m2'));
	ssc_var(obj, "heliostat_spec_cost",get('csp.pt.cost.heliostats_per_m2'));
	ssc_var(obj, "plant_spec_cost",get('csp.pt.cost.power_block_per_kwe'));
	ssc_var(obj, "bop_spec_cost",get('csp.pt.cost.bop_per_kwe'));
	ssc_var(obj, "tes_spec_cost",get('csp.pt.cost.storage_per_kwht'));
	ssc_var(obj, "land_spec_cost",get('csp.pt.cost.plm.per_acre'));
	ssc_var(obj, "contingency_rate",get('csp.pt.cost.contingency_percent'));
	ssc_var(obj, "sales_tax_rate",get('sales_tax_rate'));
	ssc_var(obj, "sales_tax_frac",get('csp.pt.cost.sales_tax.percent'));
	ssc_var(obj, "cost_sf_fixed", get('cost_sf_fixed'));
	
	ssc_var(obj, "opt_max_iter", get('opt_max_iter'));
	ssc_var(obj, "flux_max", flux_max);
	
	is_optimize = 1;
	ssc_var(obj, "is_optimize", is_optimize);
	ssc_var(obj, "opt_init_step", get('opt_init_step'));
	ssc_var(obj, "opt_conv_tol", get('opt_conv_tol'));
	ssc_var(obj, "opt_algorithm", get('opt_algorithm'));
		
	//ssc_dump( obj, homedir() + '/solarpilot.txt' );
	//msgbox("Dumping inputs to: " + homedir() + '/solarpilot.txt');
	
	//save prior values as reference in case we're optimizing
	H_rec0 = get('H_rec');
	D_rec0 = H_rec0/get('rec_aspect');
	THT0 = get('THT');	
	np0 = #get('helio_positions');
	
	//execute solarpilot
	outln("Solar Pilot running");
	ret = ssc_exec(obj, "solarpilot", {'show_dialog'=true, 'hold_dialog'=true});
	
	if (ret == 0)
	{

		H_rec = ssc_var(obj, "rec_height_opt");
		aspect = ssc_var(obj, "rec_aspect_opt");
		D_rec = H_rec/aspect;
		THT = ssc_var(obj, "h_tower_opt");

		if( get('tower_technology') == 1 )
		{
			h_boiler = get('f_h_b')*H_rec;
			h_sh = get('f_h_sh')*H_rec;
			h_rh = get('f_h_rh')*H_rec;
			
			value("h_boiler", h_boiler);
			value("h_sh", h_sh);
			value("h_rh", h_rh);
		}
		
		// The following code is applicable to both MSPT and DSG
		
		hp = ssc_var(obj, "heliostat_positions");
		np = #hp;
				
		if(is_optimize)
		{
			htm_str = 
			"<html><body>"+
			"<table><tr><td><b>Item</b></td><td><b>Units</b></td><td><b>Update Value</b></td><td><b>Previous</b></td></tr>" +
			"<tr><td>" + "Receiver height"   + "</td><td> m </td><td bgcolor='#F2FF63'>" + to_string(H_rec) + "</td><td bgcolor='#DBDBD7'>" + to_string(H_rec0) + "</td></tr>" +
			"<tr><td>" + "Receiver diameter" + "</td><td> m </td><td bgcolor='#F2FF63'>" + to_string(D_rec) + "</td><td bgcolor='#DBDBD7'>" + to_string(D_rec0) + "</td></tr>" +
			"<tr><td>" + "Tower height"      + "</td><td> m </td><td bgcolor='#F2FF63'>" + to_string(THT)   + "</td><td bgcolor='#DBDBD7'>" + to_string(THT0)   + "</td></tr>" +
			"<tr><td>" + "Heliostat count"   + "</td><td>   </td><td bgcolor='#F2FF63'>" + to_string(np)    + "</td><td bgcolor='#DBDBD7'>" + to_string(np0)    + "</td></tr>" +
			"</table>" +
			"</body></html>";
			
			html_dialog(htm_str, "Optimization summary", [400,200]);
		
			/*if( yesno("Optimization successful!\n"
				+ "Rec. height=" + to_string(H_rec) + " [m]  -- (was " + to_string(H_rec0) + ")\n"
				+ "Rec. diameter=" + to_string(D_rec) + " [m]  -- (was " + to_string(D_rec0) + ")\n"
				+ "Tower height=" + to_string(THT) + " [m]  -- (was " + to_string(THT0) + ")\n"
				+ "# heliostats=" + to_string(np) + " -- (was " + to_string(np0) + ")\n"
				+ " [m]\n\n Update to this design?") )*/
			if( yesno("Update optimized values?") )
			{
				set("helio_positions", hp);
				
				if( get('tower_technology') == 1 )
				{
					set("H_rec", H_rec);
					set("h_tower", THT);
					set("d_rec", D_rec);
				}
				else
				{
					set("H_rec", H_rec);
					set("THT", THT);
					set("D_rec", D_rec);				
				}
			}
		}
		else
		{
			set("helio_positions", hp);
			msgbox("Heliostat field positions updated!");
		}
		outln("Solar Pilot Successful");
		
	}
	else
	{
		msgbox("Heliostat field positions update failed: " + ret);
		outln("Heliostat field positions update failed: " + ret);
	}
	
	ssc_free( obj );
