<<<<<<< HEAD
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// SAM LK script samples illustrating how to use the csvread() and csvwrite() //
// to work with CSV files.                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

dir = homedir();


////////////////////////////////////////////////////////////////////////////////
// Example 1.  Write a 2D array of data to a file in CSV format. Array data can
//             be strings or numbers.
////////////////////////////////////////////////////////////////////////////////

outln("Example 1\n=========");

csv_file1 = dir + '\\test1.csv';

// Store column headers in first row of array
A[0][0] = 'A';
A[0][1] = 'B';
A[0][2] = 'C';
A[0][3] = 'D';
outln("Column headers:\n" + A);

// Fill the next 10 rows with random numbers
for( i=1;i<10;i++ )
	for( j=0;j<4;j++)
		A[i][j] = rand();

// Display the array for comparison with the data in the CSV file
outln("Array to write: ");
for( r=0;r<#A;r++ ) {
  for( c=0;c<#A[r];c++ )
    out(A[r][c] + "  ");
  out("\n");
}

// Write the array to a CSV file		
ok = csvwrite( csv_file1 , A );
if ( ok == true ) outln("Array written to " + csv_file1 + ".");
else outln("Failed to write to CSV file.");


////////////////////////////////////////////////////////////////////////////////
// Example 2.   Read the CSV file from Example 1, skipping the header line and 
//              interpreting values as numbers instead of strings. By default 
//              csvread() reads values as strings, but when 'numeric' parameter 
//              is true, it reads values as numbers.
//              Try changing the 'numeric' parameter of the csvread() fucntion 
//              to false, and the multiplication to calculate test_number will 
//              fail because the values in the array are strings instead of 
//              numbers.
////////////////////////////////////////////////////////////////////////////////

outln("\nExample 2\n=========");

B = csvread( csv_file1, { 'skip'=1,'numeric'=true } );

test_number = B[0][0]*39094; // This will fail if 'numeric' = false
outln( test_number ); 


////////////////////////////////////////////////////////////////////////////////
// Example 3.  Write data to a csv file from a table. The table syntax allows
//             you to use the dot operator to define key/value pairs.
//             See Chapter 5 of the LK manual for more on tables. 
////////////////////////////////////////////////////////////////////////////////

outln("\nExample 3\n=========");

csv_file3 = dir + '\\test3.csv';

C.temp = [ 3, 5, 4, 1, -4, 5, 1 ];
C.dew = [4, 6, 1, 4, 4, 4  ];
C.xyz = 'empty string';

outln("Table to write:\n" + C);

ok = csvwrite( csv_file3 , C );
if ( ok == true ) outln("Table written to " + csv_file3 + ".");
else outln("Failed to write to CSV file.");


///////////////////////////////////////////////////////////////////////////////
// Example 4.  Read back the table from the csv file in Example 3 and display
//             the data.  Empty cells may be read in if columns have different
//             numbers of rows.
///////////////////////////////////////////////////////////////////////////////

outln("\nExample 4\n=========");

D = csvread( csv_file3, {'table'=true});
keys= @D;
for(i=0;i<#keys;i++) {
  outln(keys[i] + ": " + D{keys[i]});
=======
////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// SAM LK script samples illustrating how to use the csvread() and csvwrite() //
// to work with CSV files.                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

dir = homedir();


////////////////////////////////////////////////////////////////////////////////
// Example 1.  Write a 2D array of data to a file in CSV format. Array data can
//             be strings or numbers.
////////////////////////////////////////////////////////////////////////////////

outln("Example 1\n=========");

csv_file1 = dir + '\\test1.csv';

// Store column headers in first row of array
A[0][0] = 'A';
A[0][1] = 'B';
A[0][2] = 'C';
A[0][3] = 'D';
outln("Column headers:\n" + A);

// Fill the next 10 rows with random numbers
for( i=1;i<10;i++ )
	for( j=0;j<4;j++)
		A[i][j] = rand();

// Display the array for comparison with the data in the CSV file
outln("Array to write: ");
for( r=0;r<#A;r++ ) {
  for( c=0;c<#A[r];c++ )
    out(A[r][c] + "  ");
  out("\n");
}

// Write the array to a CSV file		
ok = csvwrite( csv_file1 , A );
if ( ok == true ) outln("Array written to " + csv_file1 + ".");
else outln("Failed to write to CSV file.");


////////////////////////////////////////////////////////////////////////////////
// Example 2.   Read the CSV file from Example 1, skipping the header line and 
//              interpreting values as numbers instead of strings. By default 
//              csvread() reads values as strings, but when 'numeric' parameter 
//              is true, it reads values as numbers.
//              Try changing the 'numeric' parameter of the csvread() fucntion 
//              to false, and the multiplication to calculate test_number will 
//              fail because the values in the array are strings instead of 
//              numbers.
////////////////////////////////////////////////////////////////////////////////

outln("\nExample 2\n=========");

B = csvread( csv_file1, { 'skip'=1,'numeric'=true } );

test_number = B[0][0]*39094; // This will fail if 'numeric' = false
outln( test_number ); 


////////////////////////////////////////////////////////////////////////////////
// Example 3.  Write data to a csv file from a table. The table syntax allows
//             you to use the dot operator to define key/value pairs.
//             See Chapter 5 of the LK manual for more on tables. 
////////////////////////////////////////////////////////////////////////////////

outln("\nExample 3\n=========");

csv_file3 = dir + '\\test3.csv';

C.temp = [ 3, 5, 4, 1, -4, 5, 1 ];
C.dew = [4, 6, 1, 4, 4, 4  ];
C.xyz = 'empty string';

outln("Table to write:\n" + C);

ok = csvwrite( csv_file3 , C );
if ( ok == true ) outln("Table written to " + csv_file3 + ".");
else outln("Failed to write to CSV file.");


///////////////////////////////////////////////////////////////////////////////
// Example 4.  Read back the table from the csv file in Example 3 and display
//             the data.  Empty cells may be read in if columns have different
//             numbers of rows.
///////////////////////////////////////////////////////////////////////////////

outln("\nExample 4\n=========");

D = csvread( csv_file3, {'table'=true});
keys= @D;
for(i=0;i<#keys;i++) {
  outln(keys[i] + ": " + D{keys[i]});
>>>>>>> 2c85b0ce6a18646fb532eb72a604d646517b67ae
}