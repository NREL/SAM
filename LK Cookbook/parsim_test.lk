<<<<<<< HEAD
// use LHS to create a set of runs

// number of runs we want
nruns = 20;

lhs = lhs_create();
lhs_dist( lhs, 'tilt', 'uniform', [0,20] );
lhs_dist( lhs, 'azimuth', 'uniform', [160, 200] );
seed = 123;
if ( !lhs_run(lhs, nruns, seed ))
{
	outln( lhs_error(lhs) );
	lhs_free(lhs);
	exit;
}

tilt_vec = lhs_vector(lhs, 'tilt');
azimuth_vec = lhs_vector(lhs, 'azimuth');
lhs_free(lhs);

// set up a vector of all the runs we want to do
runs = alloc(nruns);

for (i=0;i<nruns;i++) 
{
	outln( 'run ' + i + ': tilt=' + tilt_vec[i] + ' azi=' + azimuth_vec[i] );
	
	// each element of the runs vectors
	// is a table with 'variable name'=value pairs
	// that specifies the values that are different
	// from the base case for that specific run
	runs[i] = { 'tilt'=tilt_vec[i],
	            'azimuth'=azimuth_vec[i] };            
}

// with the table assembled, simply tell SAM to run all of them.
// you can optionally change the number of CPUs used:
//   e.g.   nok = parsim( runs, {'nthreads'=2} );
//  by default, all CPU cores are used.
// the number of successful runs is returned.
nok = parsim( runs );

if ( nok == nruns )
{
	// if all runs succeeded, extract the outputs you want from each run
	for( i=0;i<nruns;i++ )
	{
		annkwh = parout(i, 'annual_energy');
		outln( 'run ' + i + ': annual_energy=' + annkwh );
	}
}
else
{
	// if any of them failed, you can get more information
	// by not passing a variable name to the parout() function
	// which will then return a table with these fields:
	//     ok (true/false),
	//     time (msec), 
	//     errors (string), 
	//     warnings (string),
	//     notices (string)
	
	for( i=0;i<nruns;i++ )
		outln( 'run ' + i + ':' + parout(i) + '\n');
}

=======
// use LHS to create a set of runs

// number of runs we want
nruns = 20;

lhs = lhs_create();
lhs_dist( lhs, 'tilt', 'uniform', [0,20] );
lhs_dist( lhs, 'azimuth', 'uniform', [160, 200] );
seed = 123;
if ( !lhs_run(lhs, nruns, seed ))
{
	outln( lhs_error(lhs) );
	lhs_free(lhs);
	exit;
}

tilt_vec = lhs_vector(lhs, 'tilt');
azimuth_vec = lhs_vector(lhs, 'azimuth');
lhs_free(lhs);

// set up a vector of all the runs we want to do
runs = alloc(nruns);

for (i=0;i<nruns;i++) 
{
	outln( 'run ' + i + ': tilt=' + tilt_vec[i] + ' azi=' + azimuth_vec[i] );
	
	// each element of the runs vectors
	// is a table with 'variable name'=value pairs
	// that specifies the values that are different
	// from the base case for that specific run
	runs[i] = { 'tilt'=tilt_vec[i],
	            'azimuth'=azimuth_vec[i] };            
}

// with the table assembled, simply tell SAM to run all of them.
// you can optionally change the number of CPUs used:
//   e.g.   nok = parsim( runs, {'nthreads'=2} );
//  by default, all CPU cores are used.
// the number of successful runs is returned.
nok = parsim( runs );

if ( nok == nruns )
{
	// if all runs succeeded, extract the outputs you want from each run
	for( i=0;i<nruns;i++ )
	{
		annkwh = parout(i, 'annual_energy');
		outln( 'run ' + i + ': annual_energy=' + annkwh );
	}
}
else
{
	// if any of them failed, you can get more information
	// by not passing a variable name to the parout() function
	// which will then return a table with these fields:
	//     ok (true/false),
	//     time (msec), 
	//     errors (string), 
	//     warnings (string),
	//     notices (string)
	
	for( i=0;i<nruns;i++ )
		outln( 'run ' + i + ':' + parout(i) + '\n');
}

>>>>>>> 2c85b0ce6a18646fb532eb72a604d646517b67ae
