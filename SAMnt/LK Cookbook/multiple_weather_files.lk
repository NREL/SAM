////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// This sample LK script demonstrates two techniques for running simulations  //
// for two or more weather files.                                             // 
//                                                                            //
// Instructions:                                                              //
// 1. Create a SAM file (.sam) with a photovoltaic or CSP case and save it.   //
// 2. In the folder that contains the .sam file, create a folder named        //
//    'weather'.                                                              //
// 3. Put a set of weather files in the 'weather' folder.                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

//set location and resource mode to 'use a specific weather file on disk'
set('use_specific_weather_file',1);

// get weather files
dir = path_only(project_file())+"/weather";
if (!dir_exists(dir)) msgbox("Could not find \"" + dir + "\" folder for " +
                             "weather files.\n\n Before running this script, " +
                             "be sure to save the SAM file (.sam) and " + 
                             "create a folder named \"weather\" in " +
                             "the folder that contains the .sam " +
                             "file.");
files = dir_list(dir,'*');
for (i=0;i<#files;i++)
{
  files[i] = dir + '/' + files[i];
}
outln("There are " + #files + " files in " + dir);
outln();
// test with individual runs
outln("Running sequential simulations with the simulate() function...");
errors='';
for (i=0;i<#files;i++)
{
  set('user_specified_weather_file',files[i]);
  ok=simulate(errors,0);
  arr=split(errors,'\n'); //only show first error for legibility
  if (!ok) outln(file_only(files[i]) + ": " + arr[0]);
  else outln(file_only(files[i]) + ": " + "Annual Energy (kWh) = " + get('annual_energy'));
}
outln("Done with individual simulations.");
outln();

// set up a vector of runs
outln("Setting up input vector for parsim() function.");
nruns = #files;
runs = alloc(nruns);
for (i=0;i<nruns;i++) 
{
	outln( 'Run ' + i + ': ' + files[i] );
	// each element of the runs vectors
	// is a table with 'variable name'=value pairs
	// that specifies the values that are different
	// from the base case for that specific run
	runs[i] = { 'user_specified_weather_file'=files[i]};            
}
outln("Table for parsim() function: " + runs);
outln("Done setting up input vector.");
outln();

// with the table assembled, tell SAM to run all of them.
// you can optionally change the number of CPUs used:
//   e.g.   nok = parsim( runs, {'nthreads'=2} );
//  by default, all CPU cores are used.
// the number of successful runs is returned.
outln("Running parallel simulations with parsim() function...");
nok = parsim( runs );
if ( nok == nruns )
{
	// if all runs succeeded, extract the outputs you want from each run
	for( i=0;i<nruns;i++ )
	{
		annkwh = parout(i, 'annual_energy');
		outln( 'run ' + i + ': annual_energy=' + annkwh );
	}
}
else
{
	// if any of them failed, you can get more information
	// by not passing a variable name to the parout() function
	// which will then return a table with these fields:
	//     ok (true/false),
	//     time (msec), 
	//     errors (string), 
	//     warnings (string),
	//     notices (string)
	outln("One or more simulation runs failed:");
	for( i=0;i<nruns;i++ )
		outln( 'run ' + i + ':' + parout(i) + '\n');
}
outln("Done runing parallel simulations.");
