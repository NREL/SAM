/*************************************/
/**           Runtime Tools         **/

// Save the current dir for later use
curDir = userlocaldatadir();
//outln( curDir );

// Determine screen size and set default pop-up positions
scrn = scrnres();

defaultX = scrn[0] - 600;
defaultY = 60;

// exit function (and removes any highlighting)
function exitIf( exitCondition ){
	if( exitCondition ){
		transp();
		exit;
	}
}





/*************************************/
/**         Welcome the User        **/

wS = [500,500];
exitIf( !msgbox("Welcome to the Wind Wizard!\n" +
	         "This tutorial will provide a series of pop-ups which will guide you through the use of the wind model.\n\n" +
			 "Although you will interact with pop-up menus in this wizard, the relevant inputs will be highlighted in SAM so that you can find them later.\n\n" +
			 "Also, there are a lot of options but we'll only focus on the most important ones.", 
			 [defaultX, defaultY, 500, 200]) );
			 





/*************************************/
/**         Case management         **/

// Check if there is an active case
//  - if there is, ask the user if they would like to use this case, or else create a new case
if( active_case() != "" )
	newCase = yesno("First, would you like to create a new case?\n\n(selecting 'no' will make changes to the currently active case)",
		[defaultX, defaultY]);
else
	newCase = true;


// If user chooses to use the current case, ensure the right models are selected
if( newCase == false){
	cnf =  configuration();
	
	if( !(strcmp(cnf[0], "Wind Power") == 0 && strcmp(cnf[1],"LCOE Calculator") == 0) ){
		exitIf(! msgbox("The currently active case does not use the appropriate physical and/or financial model for this wizard.\n\nPlease create a new case.",
			"WARNING",
			[defaultX, defaultY, 500, 500]));
		newCase = true;
	}
} 

// Create a new case if required
if( newCase == true ) {
	tmpName = in("Give your case a name", 
				"Wind Wizard", 
				"Create a new case",
				[defaultX, defaultY]);
	exitIf( tmpName == "" );

	if( !create_case('Wind Power', 'LCOE Calculator', tmpName) ){
		msgbox( 'Something went wrong' );
		exit;
	}
}
caseName = case_name();







/*************************************/
/**     Get Simulation Location     **/

// Show wind resource page
show_page( 'Wind Resource');

// Highlight resource selection box in UI
focusto('GroupBox2');
geom = widgetpos('GroupBox2');
transp( geom, 'yellow', 70 );
millisleep(500);


// Get Location from User
currentWRD = get('wind_resource.location');
windDataList = library('WindResourceData');
initial = 0;
for( i =0; i<#windDataList; i++){
	if( currentWRD == windDataList[i] ){
		initial = i;
		break;
	}
}
wrd = choose_from_list( 
		windDataList,
		"Where is your project located?\n\nChoose a location from the selection box\n(or press 'OK' to use the default)",
		"Wind resource data",
		initial,
		[defaultX, defaultY, 500, 500]);

exitIf(wrd == "");

set('wind_resource.location', wrd);

// Allow user to reflect on their life choices
millisleep(1000);
transp( geom, 'yellow', 0 );


/*************************************/
/**     Get Turnbine Information    **/

// Show wind turbine selection page
show_page('Wind Turbine');

// Ensure hib height is set to 80 m
hubHeight = 80;
set('wind_turbine_hub_ht', hubHeight);

// Highlight turbine selection window
focusto('wind_turbine_selection');
geom = widgetpos('wind_turbine_selection');
transp( geom, 'yellow', 70 );
millisleep(500);

// Get Turbine from user
currentTurbine = get('wind_turbine_selection');
turbineList = library('Wind Turbines');
initial = 0;
for( i =0; i<#turbineList; i++){
	if( currentTurbine == turbineList[i] ){
		initial = i;
		break;
	}
}

turbine = choose_from_list( 
			turbineList,
			'What turbine manufacturer do you wish to use\n\nChoose a turbine from the list below?',
			"Choose a wind turbine",
			initial,
			[defaultX, defaultY, 500, 500]);

exitIf(turbine == "");

set('wind_turbine_selection', turbine);

// Review time
millisleep(1000);
transp( geom, 'yellow', 0 );








/*************************************/
/**       Get Wind Farm Layout      **/

// Show wind farm page
show_page('Wind Farm');

// Ensure wind farm sizing is set to 'Specify desired farm size'
set('wind_farm_sizing_mode', 1);

// Highlight desired farm size input
focusto('desired_farm_size');
geom = widgetpos('desired_farm_size');
geom[0] -= 100;
geom[2] += 130;
transp( geom, 'yellow', 70 );
millisleep(500);

// Get a wind farm size from the user
farmSizeGood = true;
farmSize = in( "What is your desired farm size (kW)?", 
			   get('desired_farm_size'), 
			   "Desired Farm Size",
			   [defaultX, defaultY] );
exitIf(farmSize == "");

set( 'desired_farm_size', to_real( farmSize ) );

// Ensure the user's entered farm size is greater than zero and does not require more than 300 turbines
numTurbines = get('wind_farm_num_turbines');
if( numTurbines > 300 || to_real(farmSize) < 0) farmSizeGood = false;

while( !farmSizeGood ){
	numTurbines = get('wind_farm_num_turbines');
	if (to_real(farmSize) < 0 ){
		farmSize = in("Input farm must be greater than 0 kW.\nPlease enter a new farm size (kW).", 
		              10000, 
		              "Desired Farm Size",
		              [defaultX, defaultY] );
		exitIf( farmSize == "" );
	}
	elseif (numTurbines > 300 ){
		farmSize = in("This farm size would require more than "+ numTurbines +" turbines.\nPlease enter a smaller farm size (kW).", 
		              floor(get('desired_farm_size') * 300/numTurbines), 
		              "Desired Farm Size",
		              [defaultX, defaultY]);
		exitIf( farmSize == "" );
	}
	else
		farmSizeGood = true;
		
	set( 'desired_farm_size', to_real(farmSize) );
}


// Highlight windfarm plot and inform user of this automatic calculation
focusto('windfarm_plot');
geom = widgetpos('windfarm_plot');
transp( geom, 'yellow', 70 );
msgbox("We've calculated that you should use " + get('wind_farm_num_turbines') + " turbines for a system with a nameplate capacity of " + get('system_capacity') + " kW",
       [defaultX, defaultY] );	

transp();





/*************************************/
/**            Set Losses           **/

set('wind_farm_losses_percent', 5);




/*************************************/
/**            Set Finances         **/

// Show financial page
show_page("Financial Parameters");

// Highlight nominal interest rate input
focusto('c_nominal_interest_rate');
geom = widgetpos('c_nominal_interest_rate');
geom[0] -= 150;
geom[2] += 200;
transp( geom, 'yellow', 70 );

// Get noinal interest rate from user
nominalInterest = in( "Almost there! Enter an after-tax nominal interest rate ( %/yr )", 
					  get('c_nominal_interest_rate'), 
					  "Nominal Interest Rate",
		              [defaultX, defaultY]);
exitIf( nominalInterest  == "" );

// Ensure user input is greater than zero
while( to_real(nominalInterest) < 0 ){
	nominalInterest = in( "Nominal interest rate must be a value greater than zero", 
						  get('c_nominal_interest_rate'), 
						  "Nominal Interest Rate",
		                  [defaultX, defaultY]);
	exitIf( nominalInterest  == "" );
}

set('c_nominal_interest_rate', to_real(nominalInterest));

// Ensure cost input is set to 'Enter cost in $/kW'
set('ui_cost_input_option', 1);

// Highligh capital cost input
focusto('ui_capital_cost_capacity');
geom = widgetpos('ui_capital_cost_capacity');
transp( geom, 'yellow', 70 );

// Get capital cost from user
capitalCost = in( "Enter a total capital cost ($/kW)", 
                  get('ui_capital_cost_capacity'), 
                  'Capital Cost',
                  [defaultX, defaultY]);
exitIf( capitalCost  == "" );

// Ensure user input is greater than zero
while( to_real(capitalCost) < 0 ){
	capitalCost = in( "Capital cost must be a value greater than zero", 
						  get('ui_capital_cost_capacity'), 
						  "Capital Cost",
		                  [defaultX, defaultY]);
	exitIf( capitalCost  == "" );
}

set('ui_capital_cost_capacity', to_real(capitalCost));
transp();




/*************************************/
/**          Finish Wizard          **/

// Ask user if they want to run the simulation
//  if not, exit the wizard
runSim = yesno("Great! You've completed the wind wizard! Do you want to run the simulation now?\n\n(selecting 'no' will exit the wizard and enter the regular SAM application)",
				[defaultX, defaultY] );

if( runSim ){
	simMessages = "";
	if( !simulate(simMessages, true) ){
		msgbox( simMessages );
		exit;
	}
	show_page('Results');
} else {
	exit;
}



/*************************************/
/**          Tornado Chart          **/

// Ask user if they would like to make a tornado chart
//  if not, skip to report generation
runTornado = yesno("Would you like to run a few parametrics and generate a tornado chart?",
					[defaultX, defaultY]);
if (runTornado){
	variation = 0.10;
	outLabel = 'lcoe_fcr';
	vars = ['wind_turbine_hub_ht',			
			'wind_farm_losses_percent',			
			'ui_capital_cost_capacity',			
			'c_nominal_interest_rate',			
			'ui_operating_cost_capacity'		
		];
	
	baseVals = alloc( #vars );
	for( i=0; i<#vars; i++) baseVals[i] = get( vars[i] );
	
	baseOutput = get(outLabel);
	outputData_up = alloc( #vars, 2 );
	outputData_dn = alloc( #vars, 2 );
	
	maxVal = 0;
	minVal = 1000;
	avgChanges = alloc( #vars );
	for( i=0; i<#vars; i++) avgChanges[i]=0;
	
	for( i=0;i<#vars;i++){
	
		simMessages = "";
		
		// Run a var + variation sim
		set( vars[i], baseVals[i] * (1+variation) );
		if(!simulate(simMessages, false)){
			outln("Sim Error\n" + simMessages +"\n\nExiting");
			exit;
		}
		
		tmp = get(outLabel);
		if(tmp>maxVal) maxVal = tmp;
		if(tmp<minVal) minVal = tmp;
		
		outputData_up[i] = tmp;
		avgChanges[i] += abs(baseOutput - tmp)/2/baseOutput;

		// Run a var - variation sim
		set( vars[i], baseVals[i] * (1-variation) );
		if(!simulate(simMessages, false)){
			outln("Sim Error\n" + simMessages);
			exit;
		}
		tmp = get(outLabel);
		if(tmp>maxVal) maxVal = tmp;
		if(tmp<minVal) minVal = tmp;
		
		outputData_dn[i] = tmp;
		avgChanges[i] += abs(baseOutput - tmp)/2/baseOutput;
		
		// Reset all parameters
		for( k=0; k<#vars; k++) set( vars[k], baseVals[k] );
	}
	
	range = maxVal - minVal;
	// Sort according to average change
	sortedChanges = avgChanges;
	stable_sort( sortedChanges );
	order = alloc(#vars);
	usedFlag = alloc(#vars);
	
	for(i=0; i<#vars; i++){
		order[i] = 0;
		usedFlag[i] = false;
	}
	
	for(i=0; i<#vars; i++){
	for(j=0; j<#vars; j++){
		if( avgChanges[j] == sortedChanges[i] && usedFlag[j]==false ){
			order[i] = j;
			usedFlag[j] = true;
			break;
		}
	}}

	//update plot data	
	yvals_dn = alloc( #vars );
	yvals_up = alloc( #vars );
	xvals_dn = alloc( #vars );
	xvals_up = alloc( #vars );
	labels = alloc( #vars,2 );

	for(i=0; i<#vars; i++){
		yvals_dn[i] = 0.5 + 2*i;
		yvals_up[i] = 1.0 + 2*i;
		xvals_dn[i] = outputData_dn[order[i]];
		xvals_up[i] = outputData_up[order[i]];

		labels[i][0] = 0.75 + 2*i;
		labels[i][1] = varinfo( vars[ order[i] ] ){'label'};
	}
	
	// create the plot
	newplot();
	plot( xvals_dn, yvals_dn, {'type'='hbar', 'baseline'=baseOutput, 'color'=[140,140,140], 'series'='(--)', thick=20});
	plot( xvals_up, yvals_up, {'type'='hbar', 'baseline'=baseOutput, 'color'=[240,100,100], 'series'='(++)', thick=20});

	axis('x1', {'min'=minVal-range*0.05, 'max'=maxVal+range*0.05, 'label'= varinfo(outLabel){'label'} });
	axis('y1', { 'type'='label', 'labels'=labels, 'min'=0, 'max'=2*#vars} );
	plotopt({'legendpos'='bottom', 'coarse'=true, 'fine'=true, 'title'='LCOE Sensitivity (+/- 10%)'});
	annotate( [baseOutput, 0], [baseOutput, 2*#vars], {type='line', color='black'});

	
	plotLocation = tempfile('png');
	plotout(plotLocation);
}




/***************************:w**********/
/**        Report Generation        **/

// Ask user if they would like to create a report based off this simulation
//  if not, exit wizard

if( yesno("Would you like to generate a report based off these results?",[defaultX, defaultY]) ){
	
	if( runTornado ){
		newplot("");
		data = {'plotTornado' = 1,
				'plotLocation' = plotLocation};
	} else {
		data = {'plotTornado' = 0,
				'plotLocation' = ''};
	}
	
	
	// Create report
	if( yesno("This report will be saved to:\n" + homedir()+"/windReport.pdf\n\nSelect 'Yes' to continue or 'No' to enter a different file path",[defaultX, defaultY]) ){
		reportFile = homedir()+"/windReport.pdf";
	} else {
		reportFile = choose_file( homedir(), "Output report file", 'PDF Files (*.pdf)|*.pdf');
	}
	
	ok = pdfreport( reportFile, 
					{'template'=runtimedir() + 'reports/windwizard.samreport', 'metadata'=data });
	
	// Open Report
	browse(reportFile);
} 

// Delete temporary tornado plot
remove_file( plotLocation );