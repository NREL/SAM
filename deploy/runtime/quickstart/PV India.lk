/*************************************/
/**           Runtime Tools         **/

// Save the current dir for later use
curDir = userlocaldatadir();
//outln( curDir );

// Determine screen size and set default pop-up positions
scrn = scrnres();

defaultX = scrn[0] - scrn[0]/2;
defaultY = 60;

// exit function (and removes any highlighting)
function exitIf( exitCondition ){
	if( exitCondition ){
		transp();
		exit;
	}
}

// if one is open close
close_project();


/*************************************/
/**         Welcome the User        **/

wS = [500,500];
exitIf( !msgbox("Welcome to the PV for India Wizard!\n" +
	         "This tutorial will provide a series of pop-ups which will guide you through the use of the PV model in India.\n\n" +
			 "Although you will interact with pop-up menus in this wizard, the relevant inputs will be highlighted in SAM so that you can find them later.\n\n" +
			 "Also, there are a lot of options but we'll only focus on the most important ones.", 
			 [defaultX, defaultY, 500, 200]) );
			 





/*************************************/
/**         Case management         **/
/* Will have separate default files to load defaults */
/* For now, load updated file from Sara */
/* copy to user folder and load */
template_file = runtimedir() + "quickstart/PV_for_India.sam";
user_file = curDir + "/PV__for_India.sam";
copy_file(template_file, user_file, true);
exitIf (!open_project(user_file));
	
millisleep(500);


caseName = case_name();
exitIf(caseName == "");


/*************************************/
/**     Get Simulation Location     **/

// Show solar resource page
show_page( 'Location and Resource');

// Highlight resource selection box in UI
focusto('GroupBox2');
geom = widgetpos('GroupBox2');
transp( geom, 'yellow', 70 );
millisleep(500);


// Get Location from User
currentSRD = get('solar_resource');
//solarDataList = library('SolarResourceData');
solarDataList = ["India IND Ahmadabad (INTL)","India IND Bombay (INTL)","India IND Calcutta (INTL)","India IND Goa Panaji (INTL)","India IND Madras (INTL)","India IND Nagpur (INTL)","India IND New_Delhi (INTL)","India IND Trivandrum (INTL)"];
initial = 0;
for( i =0; i<#solarDataList; i++){
	if( currentSRD == solarDataList[i] ){
		initial = i;
		break;
	}
}
srd = choose_from_list( 
		solarDataList,
		"Where is your project located?\n\nChoose a location from the selection box\n(or press 'OK' to use the default)",
		"PV resource data",
		initial,
		[defaultX, defaultY, 500, 500]);

exitIf(srd == "");
set('solar_resource', srd);

// Allow user to reflect on their choices
millisleep(1000);
transp( geom, 'yellow', 0 );


/*************************************/
/**     Get System Size    **/

show_page('System Design');

// Highlight resource selection box in UI
focusto('desired_size');
geom = widgetpos('desired_size');
transp( geom, 'yellow', 70 );
millisleep(500);

sysSize = in( "What is your desired PV array size (kW)?", 
			   get('desired_size'), 
			   "Desired PV Array Size",
			   [defaultX, defaultY] );
exitIf(sysSize == "");


// Review time
millisleep(1000);
transp( geom, 'yellow', 0 );


/*************************************/
/**            Set Costs           **/
/* could possibly do conversions.... skip fo now
// Assumptions 1 INR = 0.015 USD conversion rate 1/30/2017
convINRtoUSD = 0.015;
convINRtoUSD = in( "SAM calculates all values in USD. This Wizard allows entries in INR assuming a INR to USD conversion rate. Enter the desired conversion rate or hit enter.", 
                  convINRtoUSD, 
                  'Rupess to Dollars',
                  [defaultX, defaultY]);
exitIf( convINRtoUSD  <= 0 );
*/
// Get capital cost from user - all costs in BOS bucket per file from Sara
// capCostINR = to_real(get('bos_equip_fixed')) / convINRtoUSD;

show_page('System Costs');

// Highlight resource selection box in UI
focusto('bos_equip_fixed');
geom = widgetpos('bos_equip_fixed');
transp( geom, 'yellow', 70 );
millisleep(500);


capitalCost = in( "What is your system's a total capital cost?", 
                  get('bos_equip_fixed') , 
                  'Capital Cost',
                  [defaultX, defaultY]);
exitIf( capitalCost  == "" );

// Ensure user input is greater than zero
while( to_real(capitalCost) < 0 ){
	capitalCost = in( "Capital cost must be a value greater than zero", 
						  get('bos_equip_fixed'), 
						  "Capital Cost",
		                  [defaultX, defaultY]);
	exitIf( capitalCost  == "" );
}

set('bos_equip_fixed', capitalCost );
transp();

/* Fixed Annual Maintenance Costs */
// Highlight resource selection box in UI
focusto('om_fixed');
geom = widgetpos('om_fixed');
transp( geom, 'yellow', 70 );
millisleep(500);


omCostAry = get('om_fixed');
omCost = omCostAry[0];

omCost = in( "What is your fixed annual maintenance cost?", 
                  omCost, 
                  'Fixed Annual Maintenance',
                  [defaultX, defaultY]);
exitIf( omCost  == "" );

// Ensure user input is greater than zero
while( to_real(omCost) < 0 ){
	omCost = in( "Maintenance cost must be a value greater than zero", 
						  omCost, 
						 'Fixed Annual Maintenance',
		                  [defaultX, defaultY]);
	exitIf( omCost  == "" );
}
omCostAry[0] = omCost;

set('om_fixed', omCostAry );
transp();

/* Escalation without inflation */
// Highlight resource selection box in UI
focusto('om_fixed_escal');
geom = widgetpos('om_fixed_escal');
transp( geom, 'yellow', 70 );
millisleep(500);
inflation = get('inflation_rate');
nominalEsc = get('om_fixed_escal');
omCostEsc =  to_real(nominalEsc) + to_real(inflation);

omCostEsc = in( "What is your fixed annual maintenance escalation rate?", 
                   omCostEsc, 
                  'Fixed Annual Maintenance Escalation',
                  [defaultX, defaultY]);
exitIf( omCostEsc  == "" );


nominalEsc = to_real(omCostEsc) - to_real(inflation);
set('om_fixed_escal', nominalEsc); 
// Review time
// Can add message about escalation above inflation
millisleep(1000);
transp();


/*************************************/
/**            Set Finances         **/
show_page('Financial Parameters');

// Highlight resource selection box in UI
focusto('debt_percent');
geom = widgetpos('debt_percent');
transp( geom, 'yellow', 70 );
millisleep(500);


debtPercent = in( "What is your debt percent?", 
                  get('debt_percent') , 
                  'Debt Percent',
                  [defaultX, defaultY]);
exitIf( debtPercent  == "" );

// Ensure user input is greater than zero
while( (to_real(debtPercent) < 0) ||  (to_real(debtPercent) > 100)){
	debtPercent = in( "Debt percent must be a value between 0 and 100", 
						  get('debt_percent'), 
						  "Debt Percent",
		                  [defaultX, defaultY]);
	exitIf( debtPercent  == "" );
}

set('debt_percent', debtPercent );
transp();


focusto('term_int_rate');
geom = widgetpos('term_int_rate');
transp( geom, 'yellow', 70 );
millisleep(500);


interestRate = in( "What is your interest rate?", 
                  get('term_int_rate') , 
                  'Interest Rate',
                  [defaultX, defaultY]);
exitIf( interestRate  == "" );

// Ensure user input is greater than zero
while( (to_real(interestRate) < 0) ||  (to_real(interestRate) > 100) ){
	interestRate = in( "Interest rate must be a value between 0 and 100", 
						  get('term_int_rate'), 
						  "Interest Rate",
		                  [defaultX, defaultY]);
	exitIf( interestRate  == "" );
}

set('term_int_rate', interestRate );
transp();


focusto('loan_moratorium');
geom = widgetpos('loan_moratorium');
transp( geom, 'yellow', 70 );
millisleep(500);


loanMoratorium = in( "What is your loan moratorium?", 
                  get('loan_moratorium') , 
                  'Loan Moratorium',
                  [defaultX, defaultY]);
exitIf( loanMoratorium  == "" );

// Ensure user input is greater than zero
while( to_real(loanMoratorium) < 0 ){
	loanMoratorium = in( "Loan moratorium must be a value greater than zero", 
						  get('loan_moratorium'), 
						  "Loan Moratorium",
		                  [defaultX, defaultY]);
	exitIf( loanMoratorium  == "" );
}

set('loan_moratorium', loanMoratorium );


// Review time
// Can add message about escalation above inflation
millisleep(1000);
transp();




/*************************************/
/**          Finish Wizard          **/

// Ask user if they want to run the simulation
//  if not, exit the wizard
runSim = yesno("All inputs complete. Do you want to run the simulation now?\n\n(selecting 'no' will exit the wizard and enter the regular SAM application)",
				[defaultX, defaultY] );

if( runSim ){
	simMessages = "";
	if( !simulate(simMessages, true) ){
		msgbox( simMessages );
		exit;
	}
	show_page('Results');
} else {
	exit;
}



/*************************************/
/**          Tornado Chart          **/

// Ask user if they would like to make a tornado chart
//  if not, skip to report generation
// add lcoe_roe output
runTornado = yesno("Would you like to run a few parametrics and generate a tornado chart?",
					[defaultX, defaultY]);
if (runTornado){
	variation = 0.10;
	outLabel = 'lcoe_nom';
	vars = ['debt_percent',			
			'term_int_rate',			
			'months_receivables_reserve'			
		];
	
	baseVals = alloc( #vars );
	for( i=0; i<#vars; i++) baseVals[i] = get( vars[i] );
	
	baseOutput = get(outLabel);
	outputData_up = alloc( #vars, 2 );
	outputData_dn = alloc( #vars, 2 );
	
	maxVal = 0;
	minVal = 1000;
	avgChanges = alloc( #vars );
	for( i=0; i<#vars; i++) avgChanges[i]=0;
	
	for( i=0;i<#vars;i++){
	
		simMessages = "";
		
		// Run a var + variation sim
		set( vars[i], baseVals[i] * (1+variation) );
		if(!simulate(simMessages, false)){
			outln("Sim Error\n" + simMessages +"\n\nExiting");
			exit;
		}
		
		tmp = get(outLabel);
		if(tmp>maxVal) maxVal = tmp;
		if(tmp<minVal) minVal = tmp;
		
		outputData_up[i] = tmp;
		avgChanges[i] += abs(baseOutput - tmp)/2/baseOutput;

		// Run a var - variation sim
		set( vars[i], baseVals[i] * (1-variation) );
		if(!simulate(simMessages, false)){
			outln("Sim Error\n" + simMessages);
			exit;
		}
		tmp = get(outLabel);
		if(tmp>maxVal) maxVal = tmp;
		if(tmp<minVal) minVal = tmp;
		
		outputData_dn[i] = tmp;
		avgChanges[i] += abs(baseOutput - tmp)/2/baseOutput;
		
		// Reset all parameters
		for( k=0; k<#vars; k++) set( vars[k], baseVals[k] );
	}
	
	range = maxVal - minVal;
	// Sort according to average change
	sortedChanges = avgChanges;
	stable_sort( sortedChanges );
	order = alloc(#vars);
	usedFlag = alloc(#vars);
	
	for(i=0; i<#vars; i++){
		order[i] = 0;
		usedFlag[i] = false;
	}
	
	for(i=0; i<#vars; i++){
	for(j=0; j<#vars; j++){
		if( avgChanges[j] == sortedChanges[i] && usedFlag[j]==false ){
			order[i] = j;
			usedFlag[j] = true;
			break;
		}
	}}

	//update plot data	
	yvals_dn = alloc( #vars );
	yvals_up = alloc( #vars );
	xvals_dn = alloc( #vars );
	xvals_up = alloc( #vars );
	labels = alloc( #vars,2 );

	for(i=0; i<#vars; i++){
		yvals_dn[i] = 0.5 + 2*i;
		yvals_up[i] = 1.0 + 2*i;
		xvals_dn[i] = outputData_dn[order[i]];
		xvals_up[i] = outputData_up[order[i]];

		labels[i][0] = 0.75 + 2*i;
		labels[i][1] = varinfo( vars[ order[i] ] ){'label'};
	}
	
	// create the plot
	newplot();
	plot( xvals_dn, yvals_dn, {'type'='hbar', 'baseline'=baseOutput, 'color'=[140,140,140], 'series'='(--)', thick=20});
	plot( xvals_up, yvals_up, {'type'='hbar', 'baseline'=baseOutput, 'color'=[240,100,100], 'series'='(++)', thick=20});

	axis('x1', {'min'=minVal-range*0.05, 'max'=maxVal+range*0.05, 'label'= varinfo(outLabel){'label'} });
	axis('y1', { 'type'='label', 'labels'=labels, 'min'=0, 'max'=2*#vars} );
	plotopt({'legendpos'='bottom', 'coarse'=true, 'fine'=true, 'title'='LCOE Sensitivity (+/- 10%)'});
	annotate( [baseOutput, 0], [baseOutput, 2*#vars], {type='line', color='black'});

	
	plotLocation = tempfile('png');
	plotout(plotLocation);
}




/***************************:w**********/
/**        Report Generation        **/

// Ask user if they would like to create a report based off this simulation
//  if not, exit wizard

if( yesno("Would you like to generate a report based off these results?",[defaultX, defaultY]) ){
	
	if( runTornado ){
		newplot("");
		data = {'plotTornado' = 1,
				'plotLocation' = plotLocation};
	} else {
		data = {'plotTornado' = 0,
				'plotLocation' = ''};
	}
	
	
	// Create report
	if( yesno("This report will be saved to:\n" + homedir()+"/PVforIndiaReport.pdf\n\nSelect 'Yes' to continue or 'No' to enter a different file path",[defaultX, defaultY]) ){
		reportFile = homedir()+"/PVforIndiaReport.pdf";
	} else {
		reportFile = choose_file( homedir(), "Output report file", 'PDF Files (*.pdf)|*.pdf');
	}
	
	ok = pdfreport( reportFile, 
					{'template'=runtimedir() + 'reports/pvforindiawizard.samreport', 'metadata'=data });
	
	// Open Report
	browse(reportFile);
} 

// Delete temporary tornado plot
remove_file( plotLocation );