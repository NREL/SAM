/*

PLEASE READ THIS FIRST!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

This script controls upgrading files that were created with previous versions of SAM. This only works with .sam files, not .zsam files.
PLEASE NOTE THAT EACH FUNCTION UPDATES A FILE ***TO*** THE VERSION NUMBER IN THE TITLE OF THE FUNCTION, FROM THE PREVIOUS VERSION.

For example, if you create a file in version 2015.1.30 and open it with version 2015.4.10, ONLY THE 2015.4.10 FUNCTION WILL RUN.
Any variables that changed between 2015.1.30 and 2015.4.10 should be changed IN THE 2015.4.10 FUNCTION.

Please test your changes before you commit them! Thank you!

Some more notes on how to use this:

When an old project file is loaded, only variables that have the same name and data type as in the current version's configuration for
that case are read in and can be accessed by the value() function.  For variables that no longer exist in the current version, or whose
data types have changed, the values can be accessed using the oldvalue() function.

The value() function cannot change the data type of a variable, as that is set by the current version's configuration.  

To upgrade an old variable that no longer exists:

	x = oldvalue('derate1');
	value( 'loss1', 100*(1-x) );

To upgrade an old variable that has a new datatype:

	x = oldvalue('derate1');
	value( 'derate1', [ x ] ); // derate is now an array to support schedules
	
To upgrade just the value of an old variable (same name and datatype), such as when the units have changed:

	x = value('loss1');
	value( 'loss1', 100*x ); // units changed from fraction to percent
	
You don't need to delete any variables.  Old variables are discarded when a project is saved, and only the currently valid values
are saved in the project file.

Some more examples:

	value( 'new_variable', 23.49, "This is a new variable that will help you define special things about your system." );
	
	message('Dont use this financial model anymore - beware!', 'error');
	
	message('Overwrote your old DC/AC ratio!', 'warning');
	
	value( 'loss_derate', 1-value('dc_ac_ratio')*0.01, 'A necessary change to the internal units used in SAM' );
*/

//***********************************************************************************************************************************************************

version_upgrade{'2015.10.16'} = define() {
	message('Upgrading project to version 2015.10.16');
	// shading updates are taking care of when reading in the old shading value.
	//const cfg = config();
	
};

version_upgrade{'2015.9.9'} = define() {
	
	const cfg = config();
	if ( cfg.fin == 'Residential' || cfg.fin == 'Commercial' )
	{
		message('Upgrading project to version 2015.9.9');
		
		// net metering check box removed
		nm = oldvalue('ur_enable_net_metering');
		if (nm==1)
			value('ur_metering_option',oldvalue('ur_excess_monthly_energy_or_dollars'));
		else // non-net metering with monthly reconciliation
			value('ur_metering_option',2);
	}
	
	if( cfg.tech == 'MSPT' )
	{
		message('Upgrading project to version 2015.9.9');
		
		value('piping_loss', oldvalue('Piping_loss'));
		value('piping_length_const', oldvalue('csp.pt.par.piping_length_const'));
		value('piping_length_mult', oldvalue('csp.pt.par.piping_length_mult'));
		value('=gross_net_conversion_factor', oldvalue('csp.pt.pwrb.gross_net_conversion_factor'));
	}
	
	//changes to the Physical Trough model
	if( cfg.tech == 'Physical Trough' )
	{
		value('eta_lhv', oldvalue('csp.dtr.pwrb.boiler_lhv_eff'));
		value('eta_tes_htr', oldvalue('csp.dtr.tes.tank_heater_eff'));
		value('n_pl_inc', oldvalue('csp.dtr.pwrb.hr_pl_nlev'));
	}

};


version_upgrade{'2015.8.17'} = define() {
	
	const cfg = config();

	if( cfg.tech == 'DSPT' )
	{
		message('Upgrading project to version 2015.8.17');
		
		// Tower piping length multiplier and constant addition need to be remapped
		value('piping_length_mult',oldvalue('csp.pt.par.piping_length_const'));
		value('piping_length_add',oldvalue('csp.pt.par.piping_length_mult'));
		
		// Emissivity used for all three receivers, not just boiler...
		value('rec_emis',oldvalue('emis_boiler')); 
	}

};

version_upgrade{'2015.6.30'} = define() {
	
	// have to update adjust:factor to adjust:constant
	adj = value('adjust');
	adj.constant = adj.factor;
	value('adjust', adj, 'Variable name changed from adjust:factor to adjust:constant');
	
	// other updates since 2015.5.27 - everyone please check.	
	const cfg = config();
	if ( cfg.fin == 'Residential' || cfg.fin == 'Commercial' )
		message( 'Utility bill calculations have been updated to use monthly reconciliation for energy and demand charges.  See help for more information.', 'warning' );
		
};


version_upgrade{'2015.5.27'} = define() {
		
	//get the configuration
	const cfg = config();
	
	// changes to the Molten Salt Power Tower model
	if( cfg.tech == 'MSPT' )
	{
		message('Upgrading project to version 2015.5.27');
		
		// Changed names of hot and cold tank max heat variables
		value('hot_tank_max_heat',oldvalue('tank_max_heat'));
		value('cold_tank_max_heat',oldvalue('csp.pt.tes.cold_heater_max_load'));
	}
};

//***********************************************************************************************************************************************************


version_upgrade{'2015.4.10'} = define() {	
	//get the configurationc
	const cfg = config();
		
	//changes to the Physical Trough model
	if( cfg.tech == 'Physical Trough' )
	{
		// 2015.1.30 version stored IAM coefficients as single values. 2015.4.10 version stores IAM coefficients as arrays (for each collector)
		IAMs_1[0] = oldvalue('csp_dtr_sca_iam0_1');
		IAMs_1[1] = oldvalue('csp_dtr_sca_iam1_1');
		IAMs_1[2] = oldvalue('csp_dtr_sca_iam2_1');
		
		IAMs_2[0] = oldvalue('csp_dtr_sca_iam0_2');
		IAMs_2[1] = oldvalue('csp_dtr_sca_iam1_2');
		IAMs_2[2] = oldvalue('csp_dtr_sca_iam2_2');
		
		IAMs_3[0] = oldvalue('csp_dtr_sca_iam0_3');
		IAMs_3[1] = oldvalue('csp_dtr_sca_iam1_3');
		IAMs_3[2] = oldvalue('csp_dtr_sca_iam2_3');
		
		IAMs_4[0] = oldvalue('csp_dtr_sca_iam0_4');
		IAMs_4[1] = oldvalue('csp_dtr_sca_iam1_4');
		IAMs_4[2] = oldvalue('csp_dtr_sca_iam2_4');
		
		value('IAMs_1', IAMs_1, 'Represent IAM coefficients for Collector 1 in variable size array.');
		value('IAMs_2', IAMs_2, 'Represent IAM coefficients for Collector 2 in variable size array.');
		value('IAMs_3', IAMs_3, 'Represent IAM coefficients for Collector 3 in variable size array.');
		value('IAMs_4', IAMs_4, 'Represent IAM coefficients for Collector 4 in variable size array.');
		
		// User defined field and storage HTF properties variable (matrix) name changed between versions
		value('field_fl_props',oldvalue('user_defined_htf_array'));
		value('store_fl_props',oldvalue('csp.dtr.tes.user_htf'));
	}
	
	// changes to the Molten Salt Linear Fresnel model
	if( cfg.tech == 'MSLF' )
	{
		value('store_fl_props',oldvalue('user_fluid'));
	}

};

//***********************************************************************************************************************************************************

version_upgrade{'2015.1.30'} = define() {
	message('Upgrading project to version 2015.1.30');
	
	//get the configuration
	const cfg = config();
		
	//Availability and Curtailment (all three components) changed from factor to loss for ALL configurations	
	adj = value('adjust');
	adj.factor = (1 - adj.factor) * 100.0;
	if (adj.en_hourly)
		for(i=0; i<8760; i++)
			adj.hourly[i] = (1 - adj.hourly[i]) * 100;
	if(adj.en_periods)
		for (i=0; i<#adj.periods; i++)
			adj.periods[i][2] = (1 - adj.periods[i][2]) * 100;
	value('adjust', adj, 'Availability and curtailment numbers were changed from factors to losses.');
	
	//Address fixed bug in the CEC User Entered Module page
	if (cfg.tech == 'Flat Plate PV')
	{
		if (value('module_model') == 2)
		{
			if (value('6par_aisc_units') == 1)
				message('Version 2014.11.24 of SAM had a bug with the units of the ISC Temperature Coefficient. Please double check this input.', 'warning');
			if (value('6par_bvoc_units') == 1)
				message('Version 2104.11.24 of SAM had a bug with the units of the VOC Temperature Coefficient. Please double check this input.', 'warning');
		}
	}
};

//***********************************************************************************************************************************************************

version_upgrade{'2014.11.24'} = define() {
	message( 'version upgrade for 2014.11.24: nothing to do!', 'notice');
};