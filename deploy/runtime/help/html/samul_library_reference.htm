<!DOCTYPE html>
<html>
<head>
   <title>SamUL: Library Reference</title>
   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="content-language" content="en-us" />
   <meta name="description" content="Type/Data Manipulation TypeOf ( ):STRING &nbsp;Returns a description of the argument type. Integer ( VARIANT ):INTEGER &nbsp;Converts the variable to an integer number. Double ( VARI" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <link id="tabscheme" type="text/css" href="hm_topic.css" rel="stylesheet" />   
<style type="text/css">
/* No header topics */

/* Breadcrumb trail */
p#breadcrumbs {
font-family: Verdana, Tahoma, Helvetica, Sans-Serif;   padding: 2px 0 1px 2px;
   margin: 0;
   font-size: 8pt; 
   color: #999;
   }   
p#breadcrumbs a { color: #999; text-decoration: none;}
p#breadcrumbs a:visited { color: #999; }
p#breadcrumbs a:hover { color: #333; border-bottom: 1px dotted #333; }

/* Search hightlight color */
span.highlight {background-color: #ffff40;}
</style>
<script type="text/javascript">
var hmHeaderTopic = true;

</script> 
<!--[if IE 9]>
<link id="iesvgcss" rel="stylesheet" type="text/css" href="hm_webhelp_svg.css" />
<![endif]-->	
<script src="jquery.js"></script>
<script type="text/javascript" src="jquery.tools.min.js"></script>
<script type="text/javascript" src="jquery.scrollTo-min.js"></script>
<script type="text/javascript"> 
// General topic variables
var tVars = {
   hmHelpPage: "index.html",
   nextP: "simulation_options.htm",
   prevP: "samul_code_sample.htm",
   currP: "samul_library_reference.htm",
   defP: "introduction.htm",
   titleP: "SamUL: Library Reference",
   mailsubject: "Feedback on: SAM Help - Library Reference",
   simplesubject: "Documentation%20Feedback",
   mailid: "SamUL_Library_Reference",
   mailpath: "SamUL Scripting Language &gt; Library Reference /",
   mailbody: "Dear SAM Support,",
   mailrecipient: "SAM Support <sam.support@nrel.gov>",
   simplerecipient: "sam.support@nrel.gov",
   fbtype: false,
   header: true,
   background: "bg.png",
   tablesReady: false,
   togglesReady: false,
   webRedirect: true
   }
// Popup configuration
 var hmpBShadow = true;
 var hmPopSmallDim = 500;
 var hmPopKillVideo = false;
 // AutoTOC variables
 var hmatocvars = {
   atoc_show: true,
   atoc_title: "Contents",
   atoc_tip: "Jump to:&nbsp;",
   atoc_minHeaders: 2,
   atoc_btntip_off: "No contents entries on this page",
   atoc_btntip_on: "Display/hide topic directory",
   atoc_toptip: "Jump to top of page",
   atoc_top: "Scroll to Top of Page",
   atoc_bg: "#f6f6f6",
   atoc_border: "silver",
   atoc_linkcolor: "#444",
   atoc_linklimit: 45,
   atoc_hovercolor: "#000",
   atoc_hoverbgcolor: "#e0e0e0"
}
// Sortable tables
var sortVars = {
   europeandate: false,
   germanNumbers: false,
   imagePath: "",
   image_up: "arrow-up.gif",
   image_down: "arrow-down.gif",
   image_empty: "arrow-empty.gif",
   image_none: "arrow-none.gif",
   sort_tip: "Click to sort on this column",
   umlauts: "false"
   }

</script>

<script type="text/javascript"> 
$(document).ready(function() {
var doc = document;  
try {
if (parent.hmWebHelp.navWidth != null) doc = parent.document;
doc.title = $("<div/>").html("SAM Help - SamUL: Library Reference").text();
window.onunload = function() {doc.title = $("<div/>").html("SAM Help").text();}
} catch(err) {}
});
</script>
<script type="text/javascript" src="helpman_settings.js"></script>
<script type="text/javascript" src="helpman_topicinit.js"></script>
<script type="text/javascript" src="hmtopic.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "samul_library_reference.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body>
<!--ZOOMSTOP-->
<ul id="topictabs" class="tabs">
<li id="indextab" class="hmtabs"><a href="#" id="indextablink" class="current"><span>SamUL: Library Reference</span></a></li>
</ul>
<div id="hmbox">
<div id="hmheader">
<div id="hmheadercontents">
<p id="breadcrumbs">
<b>Navigation:</b>
<a href="samul.htm">SamUL Scripting Language</a>:</p> 
<h1 class="p_Heading1"><span class="f_Heading1">Library Reference</span></h1>

</div>
<div id="atocIcon" class="navdivs">
<img class="navicon" id="hmAtocLink" src="contents_off.png" alt="No contents entries on this page" title="No contents entries on this page" />
<br /><span>Contents</span>
</div>
</div>
<div id="autoTocWrapper" class="topicmenu"></div>
<div id="idcontent">
<div id="unclicker"></div>

<!--ZOOMRESTART-->
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Type/Data Manipulation</span></h3>
<p class="p_VariableName"><span class="f_VariableName">TypeOf</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns a description of the argument type.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Integer</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( VARIANT ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Converts the variable to an integer number.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Double</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( VARIANT ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Converts the variable to a double-precision floating point number.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Boolean</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( VARIANT ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Converts the variable to a boolean.</span></p>
<p class="p_VariableName"><span class="f_VariableName">String</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ... ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Converts the given variables to a string.</span></p>
<p class="p_VariableName"><span class="f_VariableName">IntegerArray</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Converts a string delimited by {;, tn} to an integer array.</span></p>
<p class="p_VariableName"><span class="f_VariableName">DoubleArray</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Converts a string delimited by {;, tn} to a double-precision floating point array.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Length</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ARRAY ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Return the length of an array.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Array</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ... ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Creates an array out of the argument list.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Allocate</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:PRIMARY, [INTEGER:SECONDARY] ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Creates an empty array with the specified dimensions.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Resize</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( , INTEGER:PRIMARY, [INTEGER:SECONDARY] ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Resizes an array or 2D matrix.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Append</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( , ... ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Appends one or more items to an array.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Prepend</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( , ... ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Prepends one or more items to an array.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Input/Output</span></h3>
<p class="p_VariableName"><span class="f_VariableName">Out</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ... ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Print data to the output device.</span></p>
<p class="p_VariableName"><span class="f_VariableName">OutLn</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ... ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Print data to the output device followed by a newline.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Print</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Format, ... ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Print formatted data to the output device using an extended 'printf' syntax.</span></p>
<p class="p_VariableName"><span class="f_VariableName">In</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ... ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Request input from the input device, showing an optional prompt.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Notice</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ... ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Show a message dialog.</span></p>
<p class="p_VariableName"><span class="f_VariableName">YesNo</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ... ):BOOLEAN) </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Show a Yes/No dialog. Returns true if yes was clicked</span></p>
<p class="p_VariableName"><span class="f_VariableName">ChooseFile</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( [STRING:Initial dir], [STRING:Filter], [STRING:Caption] ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Show a file selection dialog, with optional parameters.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StartTimer</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Starts a stop watch timer.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ElapsedTime</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns elapsed milliseconds since last call to 'StartTimer'</span></p>
<p class="p_VariableName"><span class="f_VariableName">MilliSleep</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:Milliseconds ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sleep for the specified amount of time.</span></p>
<p class="p_VariableName"><span class="f_VariableName">DateTime</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the current date and time.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Open</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:File, STRING:Mode ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Opens a file for reading 'r', writing 'w', or appending 'a'.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Close</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Closes a file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Seek</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum, INTEGER:Offset, INTEGER:Origin ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets the position in an open file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Tell</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the current file position.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Eof</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Determines whether a file is at the end.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Flush</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Flushes the current file object to disk.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Write</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum, ... ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Writes data as text to a file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">WriteN</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum, VARIANT data, INTEGER: NumChars ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Writes character data to a file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">WriteLn</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum, VARIANT data ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Writes a line to a file as a string.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ReadN</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum, :Data, INTEGER:NumChars ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Reads characters from a file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ReadLn</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:FileNum, :Line ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Reads a line from a file, returning false if no more lines exist.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ReadFmt</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:filenum, STRING:format=[idgefxsb]*, STRING:delimiters, ... VALUE ARGUMENT LIST ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Reads a data line from a file with the given sequence of types and delimiters. Number of value arguments must equal number of characters in format string</span></p>
<p class="p_VariableName"><span class="f_VariableName">OpenWF</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:file, [ARRAY:header info] ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Opens a weather (TM2, TM3, EPW) file for reading.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ReadWF</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:filenum, ARRAY:y - m - d - h - gh - dn - df - wind - tdry - twet - relhum - pres *or* [INTEGER:y, INTEGER:m, INTEGER:d, INTEGER:h, DOUBLE:gh, DOUBLE:dn, DOUBLE:df, DOUBLE:wind, DOUBLE:tdry, DOUBLE:twet, DOUBLE:relhum, DOUBLE:pres]):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Reads a line of data from a weather file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">CustomizeTMY3</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Source tmy3 file, STRING:Target tmy3 file, [ STRING:Column name=gh - dn - df - tdry - twet - wind - pressure - relhum, ARRAY:Values(8760) ]* ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Overwrites columns of 8760 data in a TMY3 file and writes a new file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">WFStatistics</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:File, :DN, :GH, :AMBT, :WSPD ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Extracts annual averages of DN, GH, AmbT, and WSpd</span></p>
<p class="p_VariableName"><span class="f_VariableName">WriteTextFile</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Filename, VARIANT data ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Writes a file of text data to disk. Returns true on success.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ReadTextFile</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Filename, :Data ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Reads a text file from disk, returning true on success.</span></p>
<p class="p_VariableName"><span class="f_VariableName">GetHomeDir</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the current user's home directory.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Cwd</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the current working directory.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ChDir</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING: Path ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Change the current working directory.</span></p>
<p class="p_VariableName"><span class="f_VariableName">DirectoryList</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Path, STRING:Comma-separated extensions, [BOOLEAN:Include folders]):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Enumerates all the files in a directory that match a comma separated string of extensions.</span></p>
<p class="p_VariableName"><span class="f_VariableName">System</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Run a system command, returning the process exit code.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Shell</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Run a system command in a new console window. Returns true on success.</span></p>
<p class="p_VariableName"><span class="f_VariableName">FileNameOnly</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Path ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns only the file name portion of a full path.</span></p>
<p class="p_VariableName"><span class="f_VariableName">DirNameOnly</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Path ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns only the directory portion of a full path.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Extension</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:File ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the extension of a file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">DirExists</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Path ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns true if the specified directory exists.</span></p>
<p class="p_VariableName"><span class="f_VariableName">FileExists</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Path ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns true if the specified file exists.</span></p>
<p class="p_VariableName"><span class="f_VariableName">CopyFile</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:File1, STRING:File2 ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Copies file 1 to file 2.</span></p>
<p class="p_VariableName"><span class="f_VariableName">RenameFile</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:File1, STRING:File2 ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Renames file 1 to file 2.</span></p>
<p class="p_VariableName"><span class="f_VariableName">DeleteFile</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:File ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Deletes the specified file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">MkDir</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Path ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Creates a directory including the full path to it.</span></p>
<p class="p_VariableName"><span class="f_VariableName">RmDir</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Path ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Deletes a directory and everything it contains.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Decompress</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Archive, STRING:Target ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Decompresses an archive file (ZIP, TAR, TAR.GZ, GZ).</span></p>
<p class="p_VariableName"><span class="f_VariableName">HttpGet</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Url ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Performs an HTTP web query and returns the result as plain text.</span></p>
<p class="p_VariableName"><span class="f_VariableName">HttpDownload</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Url, STRING:LocalFile ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Downloads a file form the web, showing a progress dialog.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">String Manipulation</span></h3>
<p class="p_VariableName"><span class="f_VariableName">StrPos</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING, STRING:Search ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the first position of the search string, or -1 if not found.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrRPos</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING, STRING:Search ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the first position of the search string from the right, or -1 if not found.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrLeft</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING, INTEGER:N ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the left 'N' character string.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrRight</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING, INTEGER:N ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the right 'N' character string.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrLower</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns a lower case version of the string.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrUpper</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns an upper case version of the string.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrMid</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING, INTEGER:Start, [INTEGER:Count] ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the substring from the specified start position, of length 'count'. If 'count' is not supplied, the remainder of the string is returned.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrLen</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the length of a string.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrReplace</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING, STRING:s0, STRING:s1 ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns a string with all instances of 's0' replaced with 's1'.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrCmp</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:s0, STRING:s1 ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Case-sensitive comparison. Returns 0 if equal, positive if s0 comes before s1, and negative if s1 comes before s0.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrICmp</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:s0, STRING:s1 ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Case-insensitive comparison. Returns 0 if equal, positive if s0 comes before s1, and negative if s1 comes before s0.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrGCh</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING, INTEGER:position ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Gets the character at the specified position.</span></p>
<p class="p_VariableName"><span class="f_VariableName">StrSCh</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING, INTEGER:position, STRING:char):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets the character at the specified position.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Split</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING, STRING:delimiters ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Splits the string into an array.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Unsplit</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( ARRAY, STRING:delimiters ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Unsplits an array into a string.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Format</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Format, ... ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Formats data into a string using an extended 'printf' syntax.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Math</span></h3>
<p class="p_VariableName"><span class="f_VariableName">Mod</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER, INTEGER ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the remainder after X is divided by Y</span></p>
<p class="p_VariableName"><span class="f_VariableName">Abs</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):NUMBER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Absolute value of the number.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Min</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER, NUMBER *or* ARRAY ):NUMBER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the smaller of two values, or the smallest in an array.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Max</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER, NUMBER *or* ARRAY ):NUMBER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the larger of two values, or the largest in an array</span></p>
<p class="p_VariableName"><span class="f_VariableName">Ceil</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the number rounded up to the nearest integer.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Floor</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the number rounded down to the nearest integer.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Sqrt</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the square root of a number.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Pow</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER:X, NUMBER:Y ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns 'X' raised to the 'Y' power.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Exp</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the exponential value, base 'e'.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Log</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the logarithm of a number, base 'e'.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Log10</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the logarithm of a number, base 10.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Sin</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the sine of a radian value.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Cos</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the cosine of a radian value.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Tan</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the tangent of a radian value.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ASin</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the arcsine of a number in radians.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ACos</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the arccosine of a number in radians.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ATan</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the arctangent of a number in radians.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ATan2</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NUMBER:Y, NUMBER:X ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the arctangent of 'Y'/'X' in radians.</span></p>
<p class="p_VariableName"><span class="f_VariableName">IsNan</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( DOUBLE ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns true if the number is NAN.</span></p>
<p class="p_VariableName"><span class="f_VariableName">NanVal</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns NAN.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">SAM Functions</span></h3>
<p class="p_VariableName"><span class="f_VariableName">SetInput</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Variable name, VARIANT value):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets an input in the active case.</span></p>
<p class="p_VariableName"><span class="f_VariableName">GetInput</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Variable name ):VARIANT </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns an input value from the active case.</span></p>
<p class="p_VariableName"><span class="f_VariableName">GetOutput</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Variable name ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns a base case output from the active case's results as a double-precision array.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ResetOutputSource</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE or STRING:Simulation name, INTEGER:Run number ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Resets the output data source to default BASE case, or changes it to a different simulation and run number.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ClearSimResults</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Simulation name ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Clears all results for the specific simulation name.</span></p>
<p class="p_VariableName"><span class="f_VariableName">SetActiveCase</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Case name ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets the active case.</span></p>
<p class="p_VariableName"><span class="f_VariableName">GetActiveCase</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the active case name.</span></p>
<p class="p_VariableName"><span class="f_VariableName">SwitchToCase</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Switches to the active case tab in the interface.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ChangeConfig</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Technology, STRING:Financing ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Changes the current case's configuration. Application must be '*'.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ListCases</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Lists all the cases in the project.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ProjectFile</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the current project file name.</span></p>
<p class="p_VariableName"><span class="f_VariableName">AppYield</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Yields the interface to respond to user input.</span></p>
<p class="p_VariableName"><span class="f_VariableName">SaveProject</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ): BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Saves the project.</span></p>
<p class="p_VariableName"><span class="f_VariableName">SaveProjectAs</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Saves the project to the specified file.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Simulate</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( BOOLEAN:Save hourly data ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Runs a base case simulation with the current inputs, with the option of saving hourly results.</span></p>
<p class="p_VariableName"><span class="f_VariableName">MPSimulate</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Simulation name, ARRAY[ARRAY]:Variable name/value table NRUNS+1 x NVARS with top row having var names ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Runs many simulations using multiple processors.</span></p>
<p class="p_VariableName"><span class="f_VariableName">WriteResults</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:File name, STRING:Comma-separated output variable names):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Write a comma-separated-value file, with each column specified by a string of comma-separated output names.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ClearResults</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Clear the active case's results from memory.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ClearCache</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Clear the memory cache of previously run simulations.</span></p>
<p class="p_VariableName"><span class="f_VariableName">DeleteTempFiles</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Delete any lingering simulation temporary files.</span></p>
<p class="p_VariableName"><span class="f_VariableName">SetTimestep</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Timestep with units ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets the TRNSYS timestep for the active case.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ReloadDefaults</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Reloads all default values for the active case.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ListTechnologies</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns an array of all the technologies in SAM.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ListFinancing</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Technology ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Lists all financing options in SAM for a given technology.</span></p>
<p class="p_VariableName"><span class="f_VariableName">TechnologyType</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the active case technology type.</span></p>
<p class="p_VariableName"><span class="f_VariableName">FinancingType</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the active case financing type.</span></p>
<p class="p_VariableName"><span class="f_VariableName">ActiveVariables</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( [STRING:Technology, STRING:Financing] ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">List all active variables for the current case or technology/market name.</span></p>
<p class="p_VariableName"><span class="f_VariableName">FluidDensity</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:Fluid number, DOUBLE:Temp 'C ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns density at temperature Tc for a given fluid number (pressure assumed 1Pa).</span></p>
<p class="p_VariableName"><span class="f_VariableName">FluidSpecificHeat</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:Fluid number, DOUBLE:Temp 'C ):DOUBLE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns specific heat at temperature Tc for a given fluid number (pressure assumed 1Pa).</span></p>
<p class="p_VariableName"><span class="f_VariableName">FluidName</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:Fluid number ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns fluid name for a given fluid number.</span></p>
<p class="p_VariableName"><span class="f_VariableName">PtOptimize</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Optimizes the power tower heliostat field, tower height, receiver height, and receiver diameter.</span></p>
<p class="p_VariableName"><span class="f_VariableName">Coeffgen6par</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:cell type, DOUBLE:Vmp, DOUBLE:Imp, DOUBLE:Voc, DOUBLE:Isc, DOUBLE:beta, DOUBLE,alpha, DOUBLE,gamma, INTEGER:nser ):ARRAY[a,Io,Il,Rs,Rsh,Adj] or false on failure</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Calculates the 6 parameters for the CEC 6 parameter model</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSCreate</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Creates a new Latin Hypercube Sampling object.</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSFree</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:lhsref ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Frees an LHS object.</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSReset</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:lhsref ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Erases all distributions and correlations in an LHS object.</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSSeed</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:seed ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets the seed value for the LHS object.</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSPoints</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:lhsref, INTEGER:number of points ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets the number of samples desired.</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSDist</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:lhsref, STRING:distribution name, STRING: variable name, [DOUBLE:param1, DOUBLE:param2, DOUBLE:param3, DOUBLE:param4] ): NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets up a distribution for a variable.</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSCorr</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:lhsref, STRING:variable 1, STRING:variable 2, DOUBLE:corr val ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets up correlation between two variables.</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSRun</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:lhsref ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Runs the LHS sampling program.</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSError</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:lhsref ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns an error message if any.</span></p>
<p class="p_VariableName"><span class="f_VariableName">LHSVector</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:lhsref, STRING:variable ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns the sampled values for a variable.</span></p>
<p class="p_VariableName"><span class="f_VariableName">STEPCreate</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Create a new STEPWISE regression analysis object.</span></p>
<p class="p_VariableName"><span class="f_VariableName">STEPFree</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:stpref ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Frees a STEPWISE object.</span></p>
<p class="p_VariableName"><span class="f_VariableName">STEPInput</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:stpref, STRING:name, ARRAY:values ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets a STEPWISE input vector.</span></p>
<p class="p_VariableName"><span class="f_VariableName">STEPOutput</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:stpref, ARRAY:values ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Sets a STEPWISE output vector.</span></p>
<p class="p_VariableName"><span class="f_VariableName">STEPRun</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:stpref ):NONE </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Runs the STEPWISE analysis.</span></p>
<p class="p_VariableName"><span class="f_VariableName">STEPError</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:stpref ):STRING </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns any error code from STEPWISE.</span></p>
<p class="p_VariableName"><span class="f_VariableName">STEPResult</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( INTEGER:stpref, STRING:name ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns R2 and SRC for a given input name.</span></p>
<p class="p_VariableName"><span class="f_VariableName">OpenEIListUtilities</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( NONE ):ARRAY </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Returns a list of utility company names from OpenEI.org</span></p>
<p class="p_VariableName"><span class="f_VariableName">OpenEIListRates</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Utility name, , ):INTEGER </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Lists all rate schedules for a utility company.</span></p>
<p class="p_VariableName"><span class="f_VariableName">OpenEIApplyRate</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:Guid ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Downloads and applies the specified rate schedule from OpenEI.</span></p>
<p class="p_VariableName"><span class="f_VariableName">URdbFileWrite</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:file ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Writes a local URdb format file with the current case's utility rate information.</span></p>
<p class="p_VariableName"><span class="f_VariableName">URdbFileRead</span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">( STRING:file ):BOOLEAN </span></p>
<p class="p_VariableDescription"><span class="f_VariableDescription">Reads a local URdb format file and overwrites the current case's utility rate information.</span></p>

<!--ZOOMSTOP--> 


</div> <!-- idcontent -->
</div><!-- hmbox --> 
</body>
</html>
