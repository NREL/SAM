<!DOCTYPE HTML>
<html>
<head>
   <title>SamUL: Input, Output, and System Access</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   
   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <style type="text/css">
     body { margin: 0px; background: #FFFFFF; }
   </style>
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "samul_input_output.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body>


<table style="width:100%; border:none; border-spacing:0px; padding:5px; background:#FFFFFF; color:#0072C6;">
  <tr style="vertical-align:middle">
    <td style="text-align:left">
      <h1 class="p_Heading1"><span class="f_Heading1">Input, Output, and System Access</span></h1>

    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table style="width:100%;border:none;border-spacing:0px"><tr style="vertical-align:top"><td style="text-align:left;padding:5px">
<p class="p_Text"><span class="f_Text">SamUL provides a variety of standard library functions to work with files, directories, and interact with other programs. So far, we have used the in, out, and outln functions to accept user input and display program output in the runtime console window. Now we will learn about accessing files and other programs.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Working with Text Files</span></h3>
<p class="p_Text"><span class="f_Text">To write data to a text file, use the </span><span class="f_CHCode">writetextfile</span><span class="f_Text"> function. </span><span class="f_CHCode">writetextfile</span><span class="f_Text"> accepts any type of variable, but most frequently you will write text stored in a string variable. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">data = &quot;&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">for (i=0;i&lt;10;i=i+1) data = data + &quot;Text Data Line &quot; + string(i) + &quot;\n&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">ok = writetextfile( &quot;C:/test.txt&quot;, data )</span></p>
<p class="p_TextCode"><span class="f_TextCode">if (not ok) outln(&quot;Error writing text file.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">Reading a text file is just as simple with the </span><span class="f_CHCode">readtextfile</span><span class="f_Text"> function.</span></p>
<p class="p_TextCode"><span class="f_TextCode">mytext = &quot;&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">if (not readtextfile( &quot;C:/test.txt&quot;, mytext ))</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;could not read text file.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">else</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;text data:&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;out(mytext)</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">While these functions offer an easy way to read an entire text file, often it is useful to be able to access it line by line. SamUL provides the </span><span class="f_CHCode">open</span><span class="f_Text">, </span><span class="f_CHCode">close</span><span class="f_Text">, and </span><span class="f_CHCode">readln</span><span class="f_Text"> functions for this purpose.</span></p>
<p class="p_TextCode"><span class="f_TextCode">file = open(&quot;c:/test.txt&quot;, &quot;r&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">if (not file)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;could not open file&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;exit</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">declare line</span></p>
<p class="p_TextCode"><span class="f_TextCode">while ( readln( file, line ) )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln( &quot;My Text Line='&quot; + line + &quot;'&quot; )</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">close(file)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">In the example above, </span><span class="f_CHCode">file</span><span class="f_Text"> is a number that represents the file on the disk. The </span><span class="f_CHCode">open</span><span class="f_Text"> function opens the specified file for reading when the &quot;r&quot; parameter is given. The </span><span class="f_CHCode">readln</span><span class="f_Text"> function will return true as long as there are more lines to be read from the file, and the text of each line is placed in the line variable.</span></p>
<p class="p_Text"><span class="f_Text">Another way to access individual lines of a text file uses the split function to return an array of text lines. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">mytext = &quot;&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">readtextfile( &quot;C:/test.txt&quot;, mytext )</span></p>
<p class="p_TextCode"><span class="f_TextCode">lines = split( mytext, &quot;\n&quot; )</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln(&quot;There are &quot; + length(lines) + &quot; lines of text in the file.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">if (length(lines) &gt; 5) outln(&quot;Line 5: '&quot;, lines[5], &quot;'&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">File System Functions</span></h3>
<p class="p_Text"><span class="f_Text">Suppose you want to run SAM with many different weather files, and consequently need a list of all the files in a folder that have the .tm2 extension. SamUL provides the directorylist function to help out in this situation. If you want to filter for multiple file extensions, separate them with commas.</span></p>
<p class="p_TextCode"><span class="f_TextCode">file_names = directorylist( &quot;C:/Windows&quot;, &quot;dll&quot; ) ' could also use &quot;txt,dll&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln(&quot;Found &quot; + length(file_names) + &quot; files that match.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln(unsplit(file_names, &quot;\n&quot;))</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">To list all the files in the given folder, leave the extension string empty or pass in &quot;*&quot;.</span></p>
<p class="p_Text"><span class="f_Text">Sometimes you need to be able to quickly extract the file name from the full path, or vice versa. The functions filenameonly and dirnameonly extract the respective sections of the file name, returning the result.</span></p>
<p class="p_Text"><span class="f_Text">To test whether a file or directory exist, use the </span><span class="f_CHCode">direxists</span><span class="f_Text"> or </span><span class="f_CHCode">fileexists</span><span class="f_Text"> functions. Examples:</span></p>
<p class="p_TextCode"><span class="f_TextCode">path = &quot;C:/SAM/2010.11.9/samsim.dll&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">dir = dirnameonly( path )</span></p>
<p class="p_TextCode"><span class="f_TextCode">name = filenameonly( path )</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln( &quot;Path: &quot; + path )</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln( &quot;Name: &quot; + name + &quot; Exists? &quot; + fileexists(path) )</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln( &quot;Dir: &quot; + dir + &quot; Exists? &quot; + direxists(dir))</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Standard Dialogs</span></h3>
<p class="p_Text"><span class="f_Text">To facilitate writing more interactive scripts, SamUL includes various dialog functions. We have already used the </span><span class="f_CHCode">notice</span><span class="f_Text"> and </span><span class="f_CHCode">yesno</span><span class="f_Text"> functions in previous examples.</span></p>
<p class="p_Text"><span class="f_Text">The </span><span class="f_CHCode">choosefile</span><span class="f_Text"> function pops up a file selection dialog to the user, prompting them to select a file. choosefile will accept three optional parameters: the path of the initial directory to show in the dialog, a wildcard filter like &quot;*.txt&quot; to limit the types of files shown in the list, and a dialog caption to display on the window. Example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">file = choosefile(&quot;c:/SAM&quot;, &quot;*.dll&quot;, &quot;Choose a DLL file&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">if (file == &quot;&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;notice(&quot;You did not choose a file, quitting.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;exit</span></p>
<p class="p_TextCode"><span class="f_TextCode">else</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;if ( not yesno(&quot;Do you want to load:\n\n&quot; + file)) exit</span></p>
<p class="p_TextCode"><span class="f_TextCode">  </span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;' proceed to load .dll file</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;Loading &quot; + file)</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Calling Other Programs</span></h3>
<p class="p_Text"><span class="f_Text">Suppose you have a program on your computer that reads an input file, makes some complicated calculations, and writes an output file. For example, a program could read in some system specifications and calculate its heat loss coefficients that could be used in a SAM analysis.</span></p>
<p class="p_Text"><span class="f_Text">There are two very similar ways to call external programs: the system and shell functions. They are identical except that shell pops up an interactive system command window and runs the program in it. Both functions will wait until the called program finishes before returning to SamUL, so that the program runs synchronously. Examples:</span></p>
<p class="p_TextCode"><span class="f_TextCode">system(&quot;notepad.exe&quot;) ' run notepad and wait</span></p>
<p class="p_TextCode"><span class="f_TextCode">shell(&quot;ipconfig /all &gt; c:/test.txt&quot;) ' run in the system shell</span></p>
<p class="p_TextCode"><span class="f_TextCode">output = &quot;&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">readtextfile(&quot;c:/test.txt&quot;, output)</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln(output)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">Each program runs in a folder that the program refers to as the working directory. Sometimes you may need to switch the working directory to conveniently access other files, or to allow an external program to run correctly.</span></p>
<p class="p_TextCode"><span class="f_TextCode">working_dir = cwd() &nbsp;' get the current working directory</span></p>
<p class="p_TextCode"><span class="f_TextCode">chdir( &quot;C:/windows&quot; ) ' change the working directory</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln(&quot;cwd=&quot; + cwd() )</span></p>
<p class="p_TextCode"><span class="f_TextCode">chdir(working_dir) &nbsp; ' change it back to the original one</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln(&quot;cwd=&quot; + cwd() )</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>

</td></tr></table>

</body>
</html>
