<!DOCTYPE HTML>
<html>
<head>
   <title>SamUL: Function Calls</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   
   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <style type="text/css">
     body { margin: 0px; background: #FFFFFF; }
   </style>
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "samul_function_calls.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body>


<table style="width:100%; border:none; border-spacing:0px; padding:5px; background:#FFFFFF; color:#0072C6;">
  <tr style="vertical-align:middle">
    <td style="text-align:left">
      <h1 class="p_Heading1"><span class="f_Heading1">Function Calls</span></h1>

    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table style="width:100%;border:none;border-spacing:0px"><tr style="vertical-align:top"><td style="text-align:left;padding:5px">
<p class="p_Text"><span class="f_Text">It is usually good programming practice to split a larger program up into smaller sections, often called procedures, functions, or subroutines. A program may be easier to read and debug if it is not all thrown together, and you may have common blocks of code that appear several times in the program.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">User Functions</span></h3>
<p class="p_Text"><span class="f_Text">A function is simply a named chunk of code that may be called from other parts of the script. It usually performs a well-defined operation on a set of variables, and it may return a computed value to the caller.</span></p>
<p class="p_Text"><span class="f_Text">Functions can be written anywhere in your SAM script, including after they are called. If a function is never called by the program, it has no effect.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Definition</span></h3>
<p class="p_Text"><span class="f_Text">Consider the very simple procedure listed below.</span></p>
<p class="p_TextCode"><span class="f_TextCode">function show_welcome()</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;Thank you for choosing SamUL.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;This text will only be displayed at the start of the script.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Text"><span class="f_Text">Notable features:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">Use the function keyword to define a new function.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">The function name is next, and follows the same rules as for variable names. Valid function names can have letters, digits, and underscores, but cannot start with a digit.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">The empty parentheses after the name indicate that this function takes no parameters.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">The end keyword closes the function definition.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">To call the function from elsewhere in the code, simply write the function's name, followed by the parentheses:</span></td></tr></table></div><p class="p_TextCode"><span class="f_TextCode">' show a message to the user</span></p>
<p class="p_TextCode"><span class="f_TextCode">show_welcome()</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Returning a Value</span></h3>
<p class="p_Text"><span class="f_Text">A function is generally more useful if it can return information back to the program that called it. In this example, the function will not return unless the user enters Ã¿es&quot; or &quot;no&quot; into the input dialog.</span></p>
<p class="p_TextCode"><span class="f_TextCode">function require_yes_or_no()</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;while( true )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; answer = in(&quot;Destroy everything? Enter yes or no:&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; if (answer == &quot;yes&quot;) return true</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; if (answer == &quot;no&quot;) return false</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; outln(&quot;That was not an acceptable response.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;end</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">' call the input function</span></p>
<p class="p_TextCode"><span class="f_TextCode">result = require_yes_or_no() ' returns true or false</span></p>
<p class="p_TextCode"><span class="f_TextCode">if ( not result )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;user said no, phew!&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;exit</span></p>
<p class="p_TextCode"><span class="f_TextCode">else</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;destroying everything...&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">The important lesson here is that the main script does not worry about the details of how the user is questioned, and only knows that it will receive a true or false response. Also, the function can be reused in different parts of the program, and each time the user will be treated in a familiar way.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Parameters</span></h3>
<p class="p_Text"><span class="f_Text">In most cases, a function will accept arguments when it is called. That way, the function can change its behavior, or take different inputs in calculating a result. Analogous to mathematical functions, SamUL functions can take arguments to compute a result that can be returned. Arguments to a function are given names and are listed between the parentheses on the function definition line.</span></p>
<p class="p_Text"><span class="f_Text">For example, consider a function to determine the minimum of two numbers:</span></p>
<p class="p_TextCode"><span class="f_TextCode">function minimum(a, b)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;if (a &lt; b) return a else return b</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">' call the function</span></p>
<p class="p_TextCode"><span class="f_TextCode">count = 129</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln(&quot;Minimum: &quot; + minimum( count, 77))</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">In SamUL, changing the value of a function's named arguments will modify the variable in the calling program. Instead of passing the actual value of a parameter a, SamUL always passes a reference to the variable in the original program. The reference is hidden from the user, so the variable acts just like any other variable inside the function.</span></p>
<p class="p_Text"><span class="f_Text">Because arguments are passed by reference (as in Fortran, for example), a function can &quot;return&quot; more than one value. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">function sumdiffmult(s, d, a, b)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;s = a+b</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;d = a-b</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;return a*b</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">sum = -1</span></p>
<p class="p_TextCode"><span class="f_TextCode">diff = -1</span></p>
<p class="p_TextCode"><span class="f_TextCode">mult = sumdiffmult(sum, diff, 20, 7)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln(&quot;Sum: &quot; + sum + &quot; Diff: &quot; + diff + &quot; Mult: &quot; + mult) ' will output 27, 13, and 140</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Variable Scope</span></h3>
<p class="p_Text"><span class="f_Text">Generally, variables used inside a function are considered &quot;local&quot;, and cannot be accessed from the caller program. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">function triple(x)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;y = 3*x</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">triple( 4 )</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln( y ) ' this will fail because y is local to the triple function</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">As we have seen, we can write useful functions using arguments and return values to pass data into and out of functions. However, sometimes there are so many inputs to a function that it becomes very cumbersome to list them all as arguments. Alternatively, you might have some variables that are used throughout your program, or are considered reference values or constants. For these situations, you can define variables to be global in SamUL, and then they can be used inside functions and in the main program. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">global pi = 3.1415926</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">function circumference( r )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;return 2*pi*r</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">function deg2rad( x )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;return pi/180*x</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln( &quot;PI: &quot; + pi )</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln( &quot;CIRC: &quot; + circumference( 3 ) )</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln( &quot;D2R: &quot; + deg2rad( 180 ) )</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">Common programming advice is to minimize the number of global variables used in a program. Sometimes the are certainly necessary, but too many can lead to mistakes that are harder to debug and correct, and can reduce the readability and maintainability of your script.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Built-in SamUL Functions</span></h3>
<p class="p_Text"><span class="f_Text">Throughout this guide, we have made use of built-in functions like in, </span><span class="f_CHCode">outln</span><span class="f_Text">, and others. These functions are included with SamUL automatically, and called in exactly the same way as user functions. Like user functions, they can return values, and sometimes they modify the arguments sent to them. Refer to the <a href="samul_library_reference.htm" class="topiclink">Library Reference</a> for documentation on each function's capabilities, parameters, and return values.</span></p>

</td></tr></table>

</body>
</html>
