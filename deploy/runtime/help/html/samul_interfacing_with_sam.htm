<!DOCTYPE html>
<html>
<head>
   <title>SamUL: Interfacing with SAM Analyses</title>
   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="content-language" content="en-us" />
   <meta name="description" content="The SamUL language would be of little interest if it did not allow for direct manipulation and automation of SAM analyses. To this end, there is a set of included function..." />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <link id="tabscheme" type="text/css" href="hm_topic.css" rel="stylesheet" />   
<style type="text/css">
/* No header topics */

/* Breadcrumb trail */
p#breadcrumbs {
font-family: Verdana, Tahoma, Helvetica, Sans-Serif;   padding: 2px 0 1px 2px;
   margin: 0;
   font-size: 8pt; 
   color: #999;
   }   
p#breadcrumbs a { color: #999; text-decoration: none;}
p#breadcrumbs a:visited { color: #999; }
p#breadcrumbs a:hover { color: #333; border-bottom: 1px dotted #333; }

/* Search hightlight color */
span.highlight {background-color: #ffff40;}
</style>
<script type="text/javascript">
var hmHeaderTopic = true;

</script> 
<!--[if IE 9]>
<link id="iesvgcss" rel="stylesheet" type="text/css" href="hm_webhelp_svg.css" />
<![endif]-->	
<script src="jquery.js"></script>
<script type="text/javascript" src="jquery.tools.min.js"></script>
<script type="text/javascript" src="jquery.scrollTo-min.js"></script>
<script type="text/javascript"> 
// General topic variables
var tVars = {
   hmHelpPage: "index.html",
   nextP: "samul_code_sample.htm",
   prevP: "samul_input_output.htm",
   currP: "samul_interfacing_with_sam.htm",
   defP: "introduction.htm",
   titleP: "SamUL: Interfacing with SAM Analyses",
   mailsubject: "Feedback on: SAM Help - Interfacing with SAM Analyses",
   simplesubject: "Documentation%20Feedback",
   mailid: "SamUL_Interfacing_with_SAM",
   mailpath: "SamUL Scripting Language &gt; Interfacing with SAM Analyses /",
   mailbody: "Dear SAM Support,",
   mailrecipient: "SAM Support <sam.support@nrel.gov>",
   simplerecipient: "sam.support@nrel.gov",
   fbtype: false,
   header: true,
   background: "bg.png",
   tablesReady: false,
   togglesReady: false,
   webRedirect: true
   }
// Popup configuration
 var hmpBShadow = true;
 var hmPopSmallDim = 500;
 var hmPopKillVideo = false;
 // AutoTOC variables
 var hmatocvars = {
   atoc_show: true,
   atoc_title: "Contents",
   atoc_tip: "Jump to:&nbsp;",
   atoc_minHeaders: 2,
   atoc_btntip_off: "No contents entries on this page",
   atoc_btntip_on: "Display/hide topic directory",
   atoc_toptip: "Jump to top of page",
   atoc_top: "Scroll to Top of Page",
   atoc_bg: "#f6f6f6",
   atoc_border: "silver",
   atoc_linkcolor: "#444",
   atoc_linklimit: 45,
   atoc_hovercolor: "#000",
   atoc_hoverbgcolor: "#e0e0e0"
}
// Sortable tables
var sortVars = {
   europeandate: false,
   germanNumbers: false,
   imagePath: "",
   image_up: "arrow-up.gif",
   image_down: "arrow-down.gif",
   image_empty: "arrow-empty.gif",
   image_none: "arrow-none.gif",
   sort_tip: "Click to sort on this column",
   umlauts: "false"
   }

</script>

<script type="text/javascript"> 
$(document).ready(function() {
var doc = document;  
try {
if (parent.hmWebHelp.navWidth != null) doc = parent.document;
doc.title = $("<div/>").html("SAM Help - SamUL: Interfacing with SAM Analyses").text();
window.onunload = function() {doc.title = $("<div/>").html("SAM Help").text();}
} catch(err) {}
});
</script>
<script type="text/javascript" src="helpman_settings.js"></script>
<script type="text/javascript" src="helpman_topicinit.js"></script>
<script type="text/javascript" src="hmtopic.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "samul_interfacing_with_sam.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body>
<!--ZOOMSTOP-->
<ul id="topictabs" class="tabs">
<li id="indextab" class="hmtabs"><a href="#" id="indextablink" class="current"><span>SamUL: Interfacing with SAM Analyses</span></a></li>
</ul>
<div id="hmbox">
<div id="hmheader">
<div id="hmheadercontents">
<p id="breadcrumbs">
<b>Navigation:</b>
<a href="samul.htm">SamUL Scripting Language</a>:</p> 
<h1 class="p_Heading1"><span class="f_Heading1">Interfacing with SAM Analyses</span></h1>

</div>
<div id="atocIcon" class="navdivs">
<img class="navicon" id="hmAtocLink" src="contents_off.png" alt="No contents entries on this page" title="No contents entries on this page" />
<br /><span>Contents</span>
</div>
</div>
<div id="autoTocWrapper" class="topicmenu"></div>
<div id="idcontent">
<div id="unclicker"></div>

<!--ZOOMRESTART-->
<p class="p_Text"><span class="f_Text">The SamUL language would be of little interest if it did not allow for direct manipulation and automation of SAM analyses. To this end, there is a set of included function calls that can set SAM input variables, invoke a simulation, and retrieve output data.</span></p>
<p class="p_Text"><span class="f_Text">All of the SamUL function calls involve only &quot;base case&quot; analysis. That is, the built-in parametrics, sensitivity, optimization, and statistical simulation types that are controlled from the user interface are not accessible from SamUL. This is probably less of a hindrance than it sounds, as SamUL exists primarily to allow for specialized simulations that do not fall into one of those categories.</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Getting Started</span></h3>
<p class="p_Text"><span class="f_Text">SamUL scripts are part of a SAM project file that can consist of multiple cases and scripts. The general methodology is to have a SAM case that more or less describes the system you want to investigate, and then create a SamUL script within the same project that can manipulate the case. A SamUL script can only operate on one case at a time, and the active case is specified using the SetActiveCase function call. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">SetActiveCase(&quot;PV System in Arizona Case&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Changing Input Values</span></h3>
<p class="p_Text"><span class="f_Text">Once an active case has been chosen, you can change base case input values using the </span><span class="f_CHCode">SetInput</span><span class="f_Text"> function. If an input affects other calculated variables, they are automatically recalculated, and the updated values are shown on the case input page. Calling </span><span class="f_CHCode">SetInput</span><span class="f_Text"> causes the SAM interface to be updated just as if the user had changed the variable manually. Examples:</span></p>
<p class="p_TextCode"><span class="f_TextCode">SetInput( &quot;system.degradation&quot;, 12.5 ) &nbsp;' set degradation to 12.5 \%/year</span></p>
<p class="p_TextCode"><span class="f_TextCode">SetInput( &quot;pvwatts.array_type&quot;, 1 ) ' sets PVWatts array tracking mode to one axis</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">SamUL requires that you provide the internal names of variables to access them. These names can be accessed from the third button on the SamUL toolbar. A dialog box will pop up, listing all SAM variables sorted by grouping and labels. The internal data type of a variable is also listed. Simply select the input variable from the hierarchical menu, and the internal name will be pasted into the SamUL script at the cursor position.</span></p>
<p class="p_Text"><span class="f_Text">Unfortunately, because of the huge number of variables in SAM, there is no comprehensive reference manual that describes each variable's values or any special formatting that may be required. For example, the PV shading derate factor matrix is actually stored in memory as a one-dimensional column-major array, with the first two elements indicating the number of rows and columns respectively. Supposing that you had read in a 2D array from a text file into the </span><span class="f_CHCode">shading[i,j]</span><span class="f_Text"> variable, you must convert it to a single dimensional array representation as below:</span></p>
<p class="p_TextCode"><span class="f_TextCode">shadarr = allocate(12*24+2)</span></p>
<p class="p_TextCode"><span class="f_TextCode">shadarr[0] = 12</span></p>
<p class="p_TextCode"><span class="f_TextCode">shadarr[1] = 24</span></p>
<p class="p_TextCode"><span class="f_TextCode">c=2</span></p>
<p class="p_TextCode"><span class="f_TextCode">for (i=0; i&lt;12; i=i+1)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;for (j=0; j&lt;24; j=j+1)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; shadarr[c] = shading[i,j]</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; c=c+1</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;end</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">Then you can write </span><span class="f_TextCode">setinput(&quot;pv.shading.mxh.factors&quot;, shadarr)</span><span class="f_Text"> and it will assign the factors correctly. The same holds true for most 2D matrix representations in SAM.</span></p>
<p class="p_Text"><span class="f_Text">One exception is the heliostat field layout matrix for CSP Power Towers. The matrix is also stored as a one-dimensional array as described above, but there is one more number attached to the end of the array to hold the span angle in degrees. Thus the total array length is </span><span class="f_CHCode">nrows*ncols+3</span><span class="f_Text">. In any situation, it is always possible to call the GetInput with a variable to inspect how the data is stored.</span></p>
<p class="p_TextCode"><span class="f_TextCode">setactivecase(&quot;New CSP Power Tower Case 1&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">x = getinput(&quot;csp.pt.sf.user_field&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">outln( &quot;len=&quot;,length(x),&quot;: &quot;,x)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Simulating and Saving Output</span></h3>
<p class="p_Text"><span class="f_Text">To start a base case simulation, use the simulate function. It take a boolean parameter to specify whether to save the hourly (8760) outputs from the simulation. After the simulation has finished, you can access the outputs using the getoutput function.</span></p>
<p class="p_TextCode"><span class="f_TextCode">setactivecase( &quot;Residential PV System&quot; )</span></p>
<p class="p_TextCode"><span class="f_TextCode">setinput( &quot;system.degradation&quot;, 12.5 ) &nbsp;' set degradation to 12.5 percent</span></p>
<p class="p_TextCode"><span class="f_TextCode">simulate( ) </span></p>
<p class="p_TextCode"><span class="f_TextCode">lcoe = getoutput(&quot;sv.lcoe_real&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">notice( &quot;LCOE = &quot; + lcoe )</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">As with the input variables, the internal variable names of the available outputs are also accessible from the SamUL toolbar.</span></p>
<p class="p_Text"><span class="f_Text">You can also save several outputs to a comma-separated value (CSV) file to work with in Excel or another program using the </span><span class="f_CHCode">writeresults</span><span class="f_Text"> function. The outputs variables are passed to the function separated by commas in a single string, and each variable is dumped as a separate column in the CSV file.</span></p>
<p class="p_TextCode"><span class="f_TextCode">setactivecase( &quot;Residential PV System&quot; )</span></p>
<p class="p_TextCode"><span class="f_TextCode">setinput( &quot;system.degradation&quot;, 12.5 ) &nbsp;' set degradation to 12.5 percent</span></p>
<p class="p_TextCode"><span class="f_TextCode">simulate( ) </span></p>
<p class="p_TextCode"><span class="f_TextCode">writeresults( &quot;c:/test.csv&quot;, &quot;system.hourly.e_net,system.monthly.e_net,sv.lcoe_nom&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Batching Weather Files</span></h3>
<p class="p_Text"><span class="f_Text">Let's return to the original hypothetical example discussed in the introduction. You have directory of weather files, and for each one you are asked to calculate the hourly generation and LCOE for the system.</span></p>
<p class="p_Text"><span class="f_Text">The code addresses this need, and makes use of many SamUL language capabilities and built-in function calls.</span></p>
<p class="p_TextCode"><span class="f_TextCode">' Set the active case from the current ones</span></p>
<p class="p_TextCode"><span class="f_TextCode">setactivecase(&quot;Simple PV System&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">' Specify a directory to use for weather batching</span></p>
<p class="p_TextCode"><span class="f_TextCode">dir = &quot;c:/Documents and Settings/David Smith/Desktop/Weather Files&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">' List all the files in a directory that have the extension &quot;tm2&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">file_list = DirectoryList(dir, &quot;tm2&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">' loop through all the files</span></p>
<p class="p_TextCode"><span class="f_TextCode">count = length(file_list)</span></p>
<p class="p_TextCode"><span class="f_TextCode">for (i=0;i&lt;count;i=i+1)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;out(&quot;Weather (&quot;,(i+1),&quot; of &quot;,count,&quot;)=&quot;+FileNameOnly(file_list[i])+&quot;\n&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;' set the climate variable to the file name</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;setinput(&quot;climate.location&quot;, file_list[i])</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;' run the base case</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;simulate( )</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;' make the output file name</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;output_file = dir + &quot;/output_&quot; + FileNameOnly(file_list[i]) + &quot;.csv&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;out(&quot;Writing Output File: &quot;+FileNameOnly(output_file)+&quot;\n\n&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;' dump the needed results into a CSV file</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;WriteResults(output_file, &quot;system.hourly.e_net,sv.lcoe_nom&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">This example and several others are included in the standard SAM sample files.</span></p>

<!--ZOOMSTOP--> 


</div> <!-- idcontent -->
</div><!-- hmbox --> 
</body>
</html>
