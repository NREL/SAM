<!DOCTYPE HTML>
<html>
<head>
   <title>SamUL: Flow Control</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   
   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
   <link type="text/css" href="default.css" rel="stylesheet" />
   <style type="text/css">
     body { margin: 0px; background: #FFFFFF; }
   </style>
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "samul_flow_control.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body>


<table style="width:100%; border:none; border-spacing:0px; padding:5px; background:#FFFFFF; color:#0072C6;">
  <tr style="vertical-align:middle">
    <td style="text-align:left">
      <h1 class="p_Heading1"><span class="f_Heading1">Flow Control</span></h1>

    </td>
  </tr>
</table>


<!-- Placeholder for topic body. -->
<table style="width:100%;border:none;border-spacing:0px"><tr style="vertical-align:top"><td style="text-align:left;padding:5px">
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Comparison Operators</span></h3>
<p class="p_Text"><span class="f_Text">SamUL supports many ways of comparing data. These types of tests can control the program flow with branching and looping constructs that we will discuss later.</span></p>
<p class="p_Text"><span class="f_Text">There are six standard comparison operators that can be used on most types of data. For text strings, &quot;less than&quot; and &quot;greater than&quot; are with respect to alphabetical order.</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 0px;"><table style="border:none; border-spacing:0px; border-collapse:collapse;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableHeadColumn"><span class="f_TableHeadColumn">Comparison</span></p>
</td>
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableHeadColumn"><span class="f_TableHeadColumn">Operator</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter">Equal</span></p>
</td>
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter"> ==</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter">Not Equal</span></p>
</td>
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter"> !=</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter">Less Than</span></p>
</td>
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter"> &lt;</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter">Less Than or Equal</span></p>
</td>
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter"> &lt;=</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter">Greater Than</span></p>
</td>
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter"> &gt;</span></p>
</td>
</tr>
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter">Greater Than or Equal</span></p>
</td>
<td style="vertical-align:top; width:305px; padding:4px; border:solid 1px #000000;"><p class="p_TableTextCenter"><span class="f_TableTextCenter"> &gt;=</span></p>
</td>
</tr>
</table>
</div>
<p class="p_Text"><span class="f_Text">Examples of comparisons:</span></p>
<p class="p_TextCode"><span class="f_TextCode">divisor != 0</span></p>
<p class="p_TextCode"><span class="f_TextCode">state == &quot;oregon&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">error &lt;= -0.003</span></p>
<p class="p_TextCode"><span class="f_TextCode">&quot;pv&quot; &gt; &quot;csp&quot;</span></p>
<p class="p_Text"><span class="f_Text">Single comparisons can be combined by boolean operators into more complicated tests.</span></p>
<p class="p_Text"><span class="f_Text">The not operator yields true when the test is false. It is placed before the test whose result is to be notted:</span></p>
<p class="p_TextCode"><span class="f_TextCode">not (divisor == 0)</span></p>
<p class="p_Text"><span class="f_Text">The and operator yields true only if both tests are true:</span></p>
<p class="p_TextCode"><span class="f_TextCode">divisor != 0 and dividend &gt; 1</span></p>
<p class="p_Text"><span class="f_Text">The or operator yields true if either test is true:</span></p>
<p class="p_TextCode"><span class="f_TextCode">state == Ã¶regon&quot; or state == &quot;colorado&quot;</span></p>
<p class="p_Text"><span class="f_Text">The boolean operators can be combined to make even more complex tests. The operators are listed above in order of highest precedence to lowest. If you are unsure of which test will be evaluated first, use parentheses to group tests. Note that the following statements have very different meanings.</span></p>
<p class="p_TextCode"><span class="f_TextCode">state_count &gt; 0 and state_abbrev == &quot;CA&quot; or state_abbrev == &quot;OR&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">state_count &gt; 0 and (state_abbrev == &quot;CA&quot; or state_abbrev == &quot;OR&quot;)</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Branching</span></h3>
<p class="p_Text"><span class="f_Text">Using the comparison and boolean operators to define tests, you can control whether a section of code in your script will be executed or not. Therefore, the script can make decisions depending on different circumstances and user inputs.</span></p>
<p class="p_Term"><span class="f_Term">if Statements</span></p>
<p class="p_Text"><span class="f_Text">The simplest branching construct is the if statement. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">if ( tilt &lt; 0.0 )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;Error: tilt angle must be 0 or greater&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Text"><span class="f_Text">Note the following characteristics of the </span><span class="f_CHCode">if</span><span class="f_Text"> statement:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">The test is placed in parentheses after the if keyword.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">The following program lines include the statements to execute when the </span><span class="f_CHCode">if</span><span class="f_List"> test succeeds.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">To help program readability, the statements inside the </span><span class="f_CHCode">if</span><span class="f_List"> are usually indented.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">The construct concludes with the </span><span class="f_CHCode">end</span><span class="f_List"> keyword.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">When the </span><span class="f_CHCode">if</span><span class="f_List"> test fails, the program statements inside the </span><span class="f_CHCode">if</span><span class="f_List">-</span><span class="f_CHCode">end</span><span class="f_List"> block are skipped.</span></td></tr></table></div><p class="p_Term"><span class="f_Term"> else Construct</span></p>
<p class="p_Text"><span class="f_Text">When you also have commands you wish to execute when the if test fails, use the else clause. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">if ( power &gt; 0 )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;energy = power * time</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;operating_cost = energy * energy_cost</span></p>
<p class="p_TextCode"><span class="f_TextCode">else</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;Error, no power was generated.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;energy = -1</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;operating_cost = -1</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Term"><span class="f_Term">Multiple if Tests</span></p>
<p class="p_Text"><span class="f_Text">Sometimes you wish to test many conditions in a sequence, and take appropriate action depending on which test is successful. In this situation, use the </span><span class="f_CHCode">elseif</span><span class="f_Text"> clause. Be careful to spell it as a single word, as both else if and </span><span class="f_CHCode">elseif</span><span class="f_Text"> can be syntactically correct, but have different meanings.</span></p>
<p class="p_TextCode"><span class="f_TextCode">if ( angle &gt;= 0 and angle &lt; 90)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;text = &quot;first quadrant&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">elseif ( angle &gt;= 90 and angle &lt; 180 )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;text = &quot;second quadrant&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">elseif ( angle &gt;= 180 and angle &lt; 270 )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;text = &quot;third quadrant&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">else</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;text = &quot;fourth quadrant&quot;</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Text"><span class="f_Text">You do not need to end a sequence of </span><span class="f_CHCode">elseif</span><span class="f_Text"> statements with the else clause, although in most cases it is appropriate so that every situation can be handled. You can also nest if constructs if needed. Again, we recommend indenting each level of nesting to improve your script's readability. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">if ( angle &gt;= 0 and angle &lt; 90 )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;if ( print_value == true )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; &nbsp;outln( &quot;first quadrant: &quot; + angle )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;else</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; &nbsp;outln( &quot;first quadrant&quot; )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;end</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Term"><span class="f_Term">Single line ifs</span></p>
<p class="p_Text"><span class="f_Text">Sometimes you only want to take a single action when an if statement succeeds. To reduce the amount of code you must type, SamUL accepts single line </span><span class="f_CHCode">if</span><span class="f_Text"> statements, as shown below.</span></p>
<p class="p_TextCode"><span class="f_TextCode">if ( azimuth &lt; 0 ) outln( &quot;Warning: azimuth &lt; 0, continuing...&quot; )</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_TextCode"><span class="f_TextCode">if ( tilt &gt; 90 ) tilt = 90 &nbsp;' set maximum tilt value</span></p>
<p class="p_TextCode"><span class="f_TextCode">&nbsp;</span></p>
<p class="p_Text"><span class="f_Text">You can also use an </span><span class="f_CHCode">else</span><span class="f_Text"> statement on single line </span><span class="f_CHCode">if</span><span class="f_Text">. Like the </span><span class="f_CHCode">if</span><span class="f_Text">, it only accepts one program statement, and must be typed on the same program line. Example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">if ( value &gt; average ) outln(&quot;Above average&quot;) else outln(&quot;Not above average&quot;)</span></p>
<h3 class="p_Heading3_atocs_" style="border-top: none; border-right: none; border-left: none;"><span class="f_Heading3_atocs_">Looping</span></h3>
<p class="p_Text"><span class="f_Text">A loop is a way of repeating the same commands over and over. You may need to process each line of a file in the same way, or sort a list of names. To achieve such tasks, SamUL provides two types of loop constructs, the while and for loops.</span></p>
<p class="p_Text"><span class="f_Text">Like if statements, loops contain a &quot;body&quot; of program statements followed by the end keyword to denote where the loop construct ends.</span></p>
<p class="p_Term"><span class="f_Term">while Loops</span></p>
<p class="p_Text"><span class="f_Text">The </span><span class="f_CHCode">while</span><span class="f_Text"> loop is the simplest loop. It repeats one or more program statements as long as a logical test holds true. When the test fails, the loop ends, and the program continues execution of the statements following the loop construct. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">while ( done == false )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;' process some data</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;' check if we are finished and update the 'done' variable</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Text"><span class="f_Text">The test in a while loop is checked before the body of the loop is entered for the first time. In the example above, we must set the variable done to false before the loop, because otherwise no data processing would occur. After each iteration ends, the test is checked again to determine whether to continue the loop or not.</span></p>
<p class="p_Term"><span class="f_Term">Counter-driven Loops</span></p>
<p class="p_Text"><span class="f_Text">Counter-driven loops are useful when you want to run a sequence of commands for a certain number of times. As an example, you may wish to display only the first 10 lines in a text file.</span></p>
<p class="p_Text"><span class="f_Text">There are four basic parts of implementing a counter-driven loop:</span></p>
<div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">Initialize a counter variable before the loop begins.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">Test to see if the counter variable has reached a set maximum value.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 3px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_List">Execute the program statements in the loop, if the counter has not reached the maximum value.</span></td></tr></table></div><div style="text-align: left; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 0px 0px 6px 24px;"><table border="0" cellpadding="0" cellspacing="0" style="border:none;border-spacing:0px;padding:0px;line-height: normal;"><tr valign="baseline" style="vertical-align:baseline"><td style="border:none;width:24px"><span style="font-size:10pt; font-family: 'Arial Unicode MS','Lucida Sans Unicode','Arial';color:#000000;">&#8226;</span></td><td style="border:none"><span class="f_ListLast">Increment the counter by some value.</span></td></tr></table></div><p class="p_Text"><span class="f_Text">For example, we can implement a counter-driven loop using the while construct:</span></p>
<p class="p_TextCode"><span class="f_TextCode">i = 0 &nbsp; ' use i as counter variable</span></p>
<p class="p_TextCode"><span class="f_TextCode">while (i &lt; 10)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln( &quot;value of i is &quot; + i )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;i = i + 1</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Term"><span class="f_Term">for Loops</span></p>
<p class="p_Text"><span class="f_Text">The </span><span class="f_CHCode">for</span><span class="f_Text"> loop provides a streamlined way to write a counter-driven loop. It combines the counter initialization, test, and increment statements into a single line. The script below produces exactly the same effect as the </span><span class="f_CHCode">while</span><span class="f_Text"> loop example above.</span></p>
<p class="p_TextCode"><span class="f_TextCode">for ( i = 0; i &lt; 10; i = i+1 )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln( &quot;value of i is &quot; + i )</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Text"><span class="f_Text">The three loop control statements are separated by semicolons in the for loop statement. The initialization statement (first) is run only once before the loop starts. The test statement (second) is run before entering an iteration of the loop body. Finally, the increment statement is run after each completed iteration, and before the test is rechecked. Note that you can use any assignment or calculation in the increment statement.</span></p>
<p class="p_Text"><span class="f_Text">Just like the </span><span class="f_CHCode">if</span><span class="f_Text"> statement, SamUL allows for loops that contain only one program statement in the body to be written on one line. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">for ( val=57; val &gt; 1; val = val / 2 ) outln(&quot;Value is &quot; + val )</span></p>
<p class="p_Term"><span class="f_Term">Loop Control Statements</span></p>
<p class="p_Text"><span class="f_Text">In some cases you may want to end a loop prematurely. Suppose under normal conditions, you would iterate 10 times, but because of some rare circumstance, you must break the loop's normal path of execution after the third iteration. To do this, use the </span><span class="f_CHCode">break</span><span class="f_Text"> statement.</span></p>
<p class="p_TextCode"><span class="f_TextCode">value = double( in(&quot;Enter a starting value&quot;) )</span></p>
<p class="p_TextCode"><span class="f_TextCode">for ( i=0; i&lt;10; i=i+1 )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;Value is &quot; + value )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;if (value &lt; 0)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; &nbsp;break</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;end</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;value = value / 3.0</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Text"><span class="f_Text">In another situation, you may not want to altogether break the loop, but skip the rest of program statements left in the current iteration. For example, you may be processing a list of files, but each one is only processed if it starts with a specific line. The </span><span class="f_CHCode">continue</span><span class="f_Text"> keyword provides this functionality.</span></p>
<p class="p_TextCode"><span class="f_TextCode">for ( i=0; i&lt;file_count; i=i+1 )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;file_header_ok = false</span></p>
<p class="p_TextCode"><span class="f_TextCode">  </span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;' check if whether current file has the correct header</span></p>
<p class="p_TextCode"><span class="f_TextCode">  </span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;if (file_header_ok == false)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp; &nbsp;continue</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;end</span></p>
<p class="p_TextCode"><span class="f_TextCode">  </span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;' process this file</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Text"><span class="f_Text">The </span><span class="f_CHCode">break</span><span class="f_Text"> and </span><span class="f_CHCode">continue</span><span class="f_Text"> statements can be used with both </span><span class="f_CHCode">for</span><span class="f_Text"> and </span><span class="f_CHCode">while</span><span class="f_Text"> loops. If you have nested loops, the statements will act in relation to the nearest loop structure. In other words, a </span><span class="f_CHCode">break</span><span class="f_Text"> statement in the body of the inner-most loop will only break the execution of the inner-most loop.</span></p>
<p class="p_Term"><span class="f_Term">Quitting</span></p>
<p class="p_Text"><span class="f_Text">SamUL script execution normally ends when there are no more statements to run at the end of the script. However, sometimes you may need to halt early, if the user chooses not to continue an operation.</span></p>
<p class="p_Text"><span class="f_Text">The </span><span class="f_CHCode">exit</span><span class="f_Text"> statement will end the SamUL script immediately. For example:</span></p>
<p class="p_TextCode"><span class="f_TextCode">if ( yesno(&quot;Do you want to quit?&quot;) == true )</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;outln(&quot;Aborted.&quot;)</span></p>
<p class="p_TextCode"><span class="f_TextCode"> &nbsp;exit</span></p>
<p class="p_TextCode"><span class="f_TextCode">end</span></p>
<p class="p_Text"><span class="f_Text">The </span><span class="f_CHCode">yesno</span><span class="f_Text"> function call displays a message box on the user's screen with </span><span class="f_CHInterfaceElement">Yes</span><span class="f_Text"> and </span><span class="f_CHInterfaceElement">No</span><span class="f_Text"> buttons, showing the given message. It returns </span><span class="f_CHCode">true</span><span class="f_Text"> if the user clicked yes, or </span><span class="f_CHCode">false</span><span class="f_Text"> otherwise.</span></p>

</td></tr></table>

</body>
</html>
