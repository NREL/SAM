equations{ '$MIMO$ pv_size_array' } = define() {
	/* need to implement */
	return 0; };

equations{ 'pv.array.total_modules' } = define() {
	return ${pv.array.modules_per_string} *${pv.array.strings_in_parallel}; };

equations{ 'pv.array.voc_string' } = define() {
	return ?${pv.mod.model_type}
[
${pv.mod.spe.voc},
${pv.mod.cec.v_oc_ref},
${pv.mod.6par.voc},
${pv.mod.sandia.voco}
]
* ${pv.array.modules_per_string}; };

equations{ 'pv.array.total_power' } = define() {
	return ?${pv.mod.model_type}
[
	${pv.mod.spe.power},
	${pv.mod.cec.p_mp_ref},
	${pv.mod.6par.pmp},
	${pv.mod.sandia.ref_pmp}
] * ${pv.array.total_modules} / 1000; };

equations{ 'pv.array.vmp_string' } = define() {
	return ?${pv.mod.model_type}
[
${pv.mod.spe.vmp},
${pv.mod.cec.v_mp_ref},
${pv.mod.6par.vmp},
${pv.mod.sandia.ref_vmp}
]
*
${pv.array.modules_per_string}; };

equations{ 'pv.array.total_dc_inverter_capacity' } = define() {
	return ?${pv.inv.model_type} [ ${pv.inv.sandia.pdco},	${pv.inv.ds.pdco}, ${pv.inv.pd.pdco} ] *${pv.array.inverter_count} /1000; };

equations{ 'pv.array.mppt_low_inverter' } = define() {
	return ?${pv.inv.model_type} [ 	${pv.inv.sandia.mppt_low}, 	${pv.inv.ds.mppt_low}, 	${pv.inv.pd.mppt_low} ]; };

equations{ 'pv.array.total_area' } = define() {
	return ?${pv.mod.model_type}
[
	${pv.mod.spe.area},
	${pv.mod.cec.a_c},
	${pv.mod.6par.area},
	${pv.mod.sandia.area}
] * ${pv.array.total_modules}; };

equations{ 'pv.array.total_land_area' } = define() {
	return ${pv.array.total_area} * ${pv.array.packing_factor} * 0.0002471; };

equations{ '$MIMO$ pv_size_array' } = define() {
	/* need to implement */
	return 0; };

equations{ 'pv.array.array_area' } = define() {
	return ${pv.array.total_area}; };

equations{ 'pv.array.mppt_hi_inverter' } = define() {
	return ?${pv.inv.model_type} [ 	${pv.inv.sandia.mppt_hi}, 	${pv.inv.ds.mppt_hi}, 	${pv.inv.pd.mppt_hi} ]; };

equations{ 'pv.array.total_inverter_capacity' } = define() {
	return ?${pv.inv.model_type} [ ${pv.inv.sandia.paco},	${pv.inv.ds.paco}, ${pv.inv.pd.paco} ] *${pv.array.inverter_count} /1000; };

equations{ 'pv.array.vdcmax_inverter' } = define() {
	return ?${pv.inv.model_type}
[
	${pv.inv.sandia.vdcmax},
	${pv.inv.ds.vdcmax},
	${pv.inv.pd.vdcmax}
]; };

equations{ 'pv.subarray.num_strings_total' } = define() {
	return ${pv.array.strings_in_parallel}; };

equations{ '$MIMO$ pv_size_array' } = define() {
	/* need to implement */
	return 0; };

equations{ 'pv.subarray1.num_strings' } = define() {
	return ${pv.array.strings_in_parallel}
    - ?${pv.subarray2.enable}[0,${pv.subarray2.num_strings}]
    - ?${pv.subarray3.enable}[0,${pv.subarray3.num_strings}]
    - ?${pv.subarray4.enable}[0,${pv.subarray4.num_strings}]; };

equations{ 'pv.subarray.num_enabled' } = define() {
	return 1+${pv.subarray2.enable}+${pv.subarray3.enable}+${pv.subarray4.enable}; };

