Battery Model
1052
68
2
GroupBox

1
8
Name
5
23
Battery Chemistry Group
X
3
6
Y
3
3
Width
3
1042
Height
3
60
Tool Tip
5
0
Caption
5
9
Chemistry
Bold
2
1
Choice

1
9
Name
5
9
batt_type
X
3
153
Y
3
24
Width
3
438
Height
3
24
Tool Tip
5
0
Items
6
11
Lead Acid Flooded
Lead Acid VRLA Gel
Lead Acid VRLA AGM
Lead Acid Custom
Lithium-ion Lithium Manganese Oxide (LMO/Graphite)
Lithium-ion Lithium Iron Phosphate (LFP/Graphite)
Lithium-ion Lithium Cobalt Oxide (LCO/Graphite)
Lithium-ion LMO/Lithium Titanate (LMO/LTO)
Lithium-ion Nickel Manganese Cobalt Oxide (NMC/Graphite)
Lithium-ion Nickel Cobalt Aluminum Oxide (NCA/Graphite)
Lithium-ion Custom
Selection
3
4294967295
TabOrder
3
1

12
LeadAcid_q10
3
1
Discharge rate 10-hour
%
BatteryCell
0
2
1
1
1
1
93
Default
LeadAcid_q10_computed
3
1
Discharge rate 10-hour calculated
Ah
BatteryCell
0
8
1
1
1
1
0
Numeric
LeadAcid_q20
3
1
Discharge rate 10-hour
%
BatteryCell
0
2
1
1
1
1
100
Default
LeadAcid_q20_computed
3
1
Discharge rate 10-hour calculated
Ah
BatteryCell
0
8
1
1
1
1
0
Numeric
LeadAcid_qn
3
1
Capacity at n-hour discharge rate
%
BatteryCell
0
1
1
1
1
1
60
Default
LeadAcid_qn_computed
3
1
Capacity at n-hour discharge rate calculated
Ah
BatteryCell
0
8
1
1
1
1
0
Numeric
LeadAcid_tn
3
1
Hours of storage
hours
BatteryCell
0
1
1
1
1
1
1
Default
batt_Qexp
3
1
Battery capacity exp
Ah
BatteryCell
0
9
1
1
1
1
1
Numeric
batt_Qnom
3
1
Battery capacity nominal
Ah
BatteryCell
0
9
1
1
1
1
56
Numeric
batt_chem
3
1
Battery chemistry options
 
BatteryCell
0
9
1
1
1
1
1
Default
batt_meter_position
3
1
Battery meter position
 
BatteryCell
0
0
1
1
1
1
0
Default
batt_type
3
1
Battery type
 
BatteryCell
449
Lead Acid: Flooded|Lead Acid: VRLA Gel|Lead Acid: VRLA AGM|Lead Acid: Custom|Lithium Ion: Lithium Manganese Oxide (LMO/Graphite)|Lithium Ion: Lithium Iron Phosphate (LFP/Graphite)|Lithium Ion: Lithium Cobalt Oxide (LCO/Graphite)|Lithium Ion: LMO/Lithium Titanate (LMO/LTO)|Lithium Ion: Nickel Manganese Cobalt Oxide (NMC/Graphite)|Lithium Ion: Nickel Cobalt Aluminum Oxide (NCA/Graphite)|Lithium Ion: Custom|Flow Battery: Vanadium|Flow Battery: Iron
2
1
1
1
1
0
Choice

270
equations{ 'batt_chem' } = define(){
	// lead acid
	if (${batt_type} <= 3)
		return 0;
	// lithium ion
	else if (${batt_type} <= 10)
		return 1;
	// vanadium redox flow
	else if (${batt_type} == 11)
		return 2;
	// iron flow
	else if (${batt_type} == 12)
		return 3;
};

12095
on_load{'Battery Model'} = define()
{
	set_chemistry();
	set_meter_position();
	battsize_warning_check();
	on_change{'batt_type'};
};

on_change{'batt_type'} = define()
{
	type = value('batt_type');
	
	if (type != 3 && type != 10)
		update_default = yesno('Replace inputs with default values for this battery type?');
	else
		update_default = false;
	
	islead = (value('batt_chem') == 0);
	islithium = (value('batt_chem') == 1);
	isvanadium = (value('batt_chem') == 2);
	isiron = (value('batt_chem') == 3);
	set_chemistry();
	
	// call to other script (Battery Bank Sizing)
	set_bank_sizing();
	
	// call to other script (Battery Voltage)
	set_voltage_choice(update_default);
	
	// call to other script (Battery Current and Capacity)
	set_current_and_capacity();
	
	// lead acid
	if (islead)
		set_lead_acid(update_default);
	// Lithium Ion
	else if (islithium)
		set_lithium_ion(update_default);
	// Vanadium Redox FLow
	else if (isvanadium)
		set_vanadium(update_default);
	// Iron Flow
	else if (isiron)
		set_iron(update_default);

	battsize_warning_check();
};

function is_flow()
{
	flow = false;
	if (value('batt_chem') == 2 || value('batt_chem') == 3)
		flow = true;
	return flow;
}

function set_flow()
{
	show('batt_bank_nseries_stacks', true);
	property('batt_size_choice', 'Items', ['Set desired bank size', 'Specify capacity and stack configuration']); 
	property('batt_series_label', 'Caption', 'Number of cells per stack');
	property('batt_parallel_label', 'Caption', 'Number of parallel stacks');
	property('batt_computed_parallel_label', 'Caption', 'Stacks in parallel');
	property('batt_computed_cells_series_label', 'Caption', 'Cells per stack');
}	
function set_conventional()
{
	show('batt_bank_nseries_stacks', false);
	property('batt_size_choice', 'Items', ['Set desired bank size', 'Specify cells']); 
	property('batt_series_label', 'Caption', 'Number of cells in series');
	property('batt_parallel_label', 'Caption', 'Number of strings in parallel');
	property('batt_computed_parallel_label', 'Caption', 'Strings in parallel');
	property('batt_computed_cells_series_label', 'Caption', 'Cells in series');
}

function set_chemistry()
{
	is_lead = (value('batt_chem') == 0);
	enable('LeadAcid_q20',is_lead);
	enable('LeadAcid_q20_computed',is_lead);
	enable('LeadAcid_q10',is_lead);
	enable('LeadAcid_q10_computed',is_lead);
	enable('LeadAcid_qn',is_lead);
	enable('LeadAcid_qn_computed',is_lead);
	
	// set widget properties
	if (is_flow())
		set_flow();
	else
		set_conventional();
}

function set_meter_position()
{
	f = financing();
	if ( !strcmp(f, 'Residential') 
	|| !strcmp(f, 'Commercial')
	|| !strcmp(f, 'Third Party')
	|| !strcmp(f, 'Host Developer') )
	{	
		// behind the meter
		${batt_meter_position} = 0;	
	}
	elseif (f == 'Single Owner' 
	|| f == 'Merchant Plant'
	|| f == 'Leveraged Partnership Flip'
	|| f == 'All Equity Partnership Flip'
	|| f == 'Sale Leaseback' )
	{
		// in front of the meter
		${batt_meter_position} = 1;	
	}
}
function set_lead_acid(update_default)
{
	lead_type = ${batt_type};
	
	if (update_default)
	{	
		// flooded lead acid
		if (lead_type == 0)
			flooded_lead_acid();
		else if (lead_type == 1)
			GEL();
		else if (lead_type == 2)
			AGM();
			
		lead_acid_defaults();	
	}
}
function set_lithium_ion(update_default)
{
	lithium_type = ${batt_type}-4;
	
	if (update_default)
	{
		lithium_ion_defaults();
		if (lithium_type == 0)
			LMO();
		else if (lithium_type == 1)
			LFP();
		else if (lithium_type == 2)
			LCO();
		else if (lithium_type == 3)
			LTO();
		else if (lithium_type == 4)
			NMC();
		else if (lithium_type == 5)
			NCA();
	}
	if (financing() == 'Residential')
		value('batt_bank_voltage', 50);
	else
		value('batt_bank_voltage', 500);
}
function set_vanadium(update_default)
{
	if (update_default)
	{
		if (${batt_type} == 11)
			VRFB();
	}
}
function set_iron(update_default)
{
	// don't allow iron flow to use voltage model ever
	value('batt_voltage_choice', 1);
	if (update_default)
	{
		if (${batt_type} == 12)
			IronFlow();
	}
}

// Flooded Lead Acid defaults
function flooded_lead_acid()
{
	value('batt_specific_energy_per_mass',50); 
	value('batt_specific_energy_per_volume',98);
}

// AGM defaults
function AGM()
{
	value('batt_specific_energy_per_mass',35); 
	value('batt_specific_energy_per_volume',80);
}
// GEL defaults
function GEL()
{
	value('batt_specific_energy_per_mass',35); 
	value('batt_specific_energy_per_volume',75);
}

function get_batt_data_from_file(filename)
{
	defaults_dir = replace(appdir(), '\\', '/' ) + '/../libraries/BatteryStateful/';
	defaults_dir += filename;
	x = read_json(defaults_dir);
	defs = x.defaults;
	set_batt_defaults_from_data(defs);
}

function set_batt_defaults_from_data(defs)
{
	cell_params = defs.paramscell;
	pack_params = defs.paramspack;
	
	value('batt_Qfull',cell_params.qfull);
	value('batt_Vnom_default', cell_params.vnom_default);
		
	if (value('batt_chem') == 0) {
		value('LeadAcid_q20',cell_params.leadacid_q20);
		value('LeadAcid_q10',cell_params.leadacid_q10);
		value('LeadAcid_qn',cell_params.leadacid_qn);
		value('LeadAcid_tn',cell_params.leadacid_tn);
	}
	
	if (cell_params.voltage_choice == 0) {
		// voltage curve
		value('batt_C_rate',cell_params.c_rate);
		value('batt_Vfull',cell_params.vfull);
		value('batt_Vexp',cell_params.vexp);
		value('batt_Vnom',cell_params.vnom);
		value('batt_Qexp',cell_params.qexp);
		value('batt_Vnom',cell_params.vnom);
		
		${batt_Qexp_percent} = ${batt_Qexp}/${batt_Qfull}/0.01;
		${batt_Qnom_percent} = cell_params.qnom/${batt_Qfull}/0.01;
	}
	else {
		value('batt_voltage_matrix', cell_params.voltage_matrix);
	}
	
	value('batt_resistance', cell_params.resistance); // from UBGC2, and DC400-6
	value('batt_voltage_choice', cell_params.voltage_choice);

  	value('batt_bank_voltage', pack_params.nominal_voltage);
  	
	// Lifetime
	value('batt_lifetime_matrix',cell_params.cycling_matrix);
	
	// turn calendar life model off
	value('batt_calendar_choice', cell_params.calendar_choice);
	
	// Thermal
	value('cap_vs_temp', pack_params.cap_vs_temp);
	value('batt_Cp',pack_params.cp);
	
	// ancilliary system losses
	zero_array = fill_by_month(0);
	value('batt_losses_charging', zero_array);
	value('batt_losses_discharging', zero_array);
	value('batt_losses_idle', zero_array);
}

// Valve Regulated Lead Acid defaults
function lead_acid_defaults()
{
	ConversionEfficiencies();
	get_batt_data_from_file('BatteryStateful_LeadAcid.json');
}

// Lithium Manganese Oxide
function LMO()
{
	// voltage curve
	value('batt_C_rate',1);
	value('batt_Vfull',4.2);
	value('batt_Vexp',4.1);
	value('batt_Vnom',3.6);
	value('batt_Qfull',1.5);
	value('batt_Qexp_percent',0.666);
	value('batt_Qnom_percent',93.33);
	value('batt_Vnom_default',3.6);
	value('batt_specific_energy_per_mass',92.5);
	value('batt_specific_energy_per_volume',231.97);
		
	// Lifetime
	lifetime = [[20,0,100],
				[20, 2500, 92], 
				[20,5000,84], 
				[80,0,100],
				[80, 500, 92], 
				[80,1000,84] ];
	value('batt_lifetime_matrix',lifetime);
}
// Lithium iron phospate
function LFP()
{
	get_batt_data_from_file('BatteryStateful_LFPGraphite.json');
	
	value('batt_specific_energy_per_mass',70);
	value('batt_specific_energy_per_volume',82);
}
// Lithium cobalt Oxide
function LCO()
{
	// voltage curve
	value('batt_C_rate',0.2);
	value('batt_Vfull',4.2);
	value('batt_Vexp',4.15);
	value('batt_Vnom',3.7);
	value('batt_Qfull',2.55);
	value('batt_Qexp_percent',0.40);
	value('batt_Qnom_percent',78.4);
	value('batt_Vnom_default',3.7);
	value('batt_specific_energy_per_mass',176.95);
	value('batt_specific_energy_per_volume',363.79);
		
	// Lifetime
	lifetime = [ [20,0,100],
				 [20,650,98],
				 [20,1500,95],
				 [80,0,102],
				 [80,150,93],
				 [80,300,87] ];
	value('batt_lifetime_matrix',lifetime);
}
// Lithium titanate
function LTO()
{
	// voltage curve
	value('batt_C_rate',1);
	value('batt_Vfull',2.8);
	value('batt_Vexp',2.4);
	value('batt_Vnom',2);
	value('batt_Qfull',12);
	value('batt_Qexp_percent',2.1);
	value('batt_Qnom_percent',91.7);
	value('batt_Vnom_default',2.3);
	value('batt_specific_energy_per_mass',22);
	value('batt_specific_energy_per_volume',14);
		
	// Lifetime
	lifetime = [ [20,0,100],
				 [20,10000,90],
				 [20,20000,85.42],
				 [20,30000, 83.33],
				 [80,0,100],
				 [80,2000,90],
				 [80,4000,85.42],
				 [80,6000, 83.33]];
	value('batt_lifetime_matrix',lifetime);
}
// Lithium nickel cobalt
function NMC()
{
	get_batt_data_from_file('BatteryStateful_NMCGraphite.json');
	
	value('batt_specific_energy_per_mass',101);
	value('batt_specific_energy_per_volume',70);
}
// NMC
function NCA()
{
	// voltage curve
	value('batt_Vnom_default',3.6);
	value('batt_C_rate',0.2);
	value('batt_Vfull',4.2);
	value('batt_Vexp',4.1);
	value('batt_Vnom',3.6);
	value('batt_Qfull',55);
	value('batt_Qexp_percent',1.8);
	value('batt_Qnom_percent',98.2);
	value('batt_specific_energy_per_mass',202.90);
	value('batt_specific_energy_per_volume',532.58);
		
	// Lifetime
	lifetime = [ [20,0,100],
				 [20,5000,80],
				 [20,10000,60],
				 [80,0,100],
				 [80,1000,80],
				 [80,2000,60]];
	value('batt_lifetime_matrix',lifetime);
}
function lithium_ion_defaults()
{

	ConversionEfficiencies();

	// Can be overwritten by chemistry-specific fx
	cap_vs_temp = [[-20, 72.33333333],
					[-10, 81.8],
					[0, 88.8],
					[10, 93],
					[23, 96.66666667],
					[45, 101],
					[60, 101]];
	value('cap_vs_temp', cap_vs_temp);

	// Maleki 1999 Thermal Properties of Lithium-Ion Battery & Components
	value('batt_Cp',1500);
	
	// turn on calendar lifetime model
	value('batt_calendar_choice', 1);
	
	// use voltage model not matrix
	value('batt_voltage_choice', 0);
}
// Vanadium Redox Flow Battery
function VRFB()
{
	FlowDefaults();

	// voltage curve
	value('batt_Vnom_default',1.4);
	value('batt_C_rate',0.2);
	value('batt_Vfull',1.7);
	value('batt_Vexp',1.55);
	value('batt_Vnom',1.4);
	value('batt_Qfull',397);
	value('batt_Qexp_percent',10);
	value('batt_Qnom_percent',85);

	value('batt_voltage_choice', 0);
	voltage_matrix = [[0,0]];
  	value('batt_voltage_matrix', voltage_matrix);

	// dispatch control
	value('batt_minimum_SOC', 15);
	value('batt_maximum_SOC', 95);
	value('batt_minimum_modetime', 10);

	// thermal properties 
	// (from 2016 - Yan, Modelling and simulation of thermal behavior of vanadium redox flow battery)
	value('batt_Cp', 3200);

	// turn calendar life model off
	value('batt_calendar_choice', 0);
	
}
// Iron flow battery
function IronFlow()
{
	FlowDefaults();

	voltage_matrix = [[0, 1.18],
				  [20, 1.11],
				  [40, 1.08],
				  [60, 1.05],
				  [80, 1.02],
				  [100, 0.95]];

	// voltage curve
	value('batt_Vnom_default',1.1);
	value('batt_voltage_matrix', voltage_matrix);
	value('batt_voltage_choice', 1);

	// dispatch control
	value('batt_minimum_SOC', 0);
	value('batt_maximum_SOC', 100);
	value('batt_minimum_modetime', 0);

	// thermal properties
	value('batt_Cp', 3200); // unknown what this actually is
			
	// turn calendar life model off
	value('batt_calendar_choice', 0);
}

function FlowDefaults()
{
	ConversionEfficiencies();
	
	value('batt_resistance', 0.001);

	// desired bank voltage
	value('batt_bank_voltage', 48);
	
	// current control
	value('batt_current_choice', 0);
	value('batt_cell_power_discharge_max', 200);
	value('batt_cell_power_charge_max', 200);
	
	// ancilliary system losses
	value('batt_losses_charging', fill_by_month(0));
	value('batt_losses_discharging', fill_by_month(0));
	value('batt_losses_idle', fill_by_month(0));
	
	// Lifetime
	lifetime = [ [20,0,100],
				 [20,20000,100],
				 [80,0,100],
				 [80,20000,100]];
	value('batt_lifetime_matrix',lifetime);
	
	// Thermal
	cap_vs_temp = [ [19, 100], [21, 100] ];
	value('cap_vs_temp', cap_vs_temp);
	
	// thermal
	value('batt_specific_energy_per_mass',20);
	value('batt_specific_energy_per_volume',20);
}

function ConversionEfficiencies()
{
	value('batt_ac_dc_efficiency', 96);
	value('batt_dc_ac_efficiency', 96);
	value('batt_dc_dc_efficiency', 99);
}

function fill_by_month(num)
{
	month_array = [];
	for (m = 0; m != 12; m++)
		month_array[m] = num;
	return month_array;
}
