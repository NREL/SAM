Battery Dispatch Front of Meter
1058
491
28
GroupBox

1
8
Name
5
9
AutoDCBox
X
3
384
Y
3
15
Width
3
655
Height
3
343
Tool Tip
5
0
Caption
5
26
Automated Dispatch Options
Bold
2
1
Label

1
13
Name
5
20
BatteryChargeOptions
X
3
30
Y
3
204
Width
3
348
Height
3
39
Tool Tip
5
0
Caption
5
73
For manual dispatch, charge options are defined below by dispatch period.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
GroupBox

1
8
Name
5
16
InputDispatchBox
X
3
384
Y
3
360
Width
3
655
Height
3
115
Tool Tip
5
0
Caption
5
27
Custom Time Series Dispatch
Bold
2
1
GroupBox

1
8
Name
5
18
StorageDispatchBox
X
3
6
Y
3
3
Width
3
1042
Height
3
478
Tool Tip
5
0
Caption
5
27
Storage Dispatch Controller
Bold
2
1
Label

1
13
Name
5
18
batt_auto_fom_help
X
3
393
Y
3
36
Width
3
633
Height
3
54
Tool Tip
5
0
Caption
5
199
The automated dispatch options consider the PPA price, electricity rate, battery cycle cost, and inverter power limiting to decide when to charge and discharge, using one of the time horizon options.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Divider

1
10
Name
5
25
batt_charge_options_label
X
3
15
Y
3
180
Width
3
363
Height
3
22
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
14
Charge Options
Bold
2
1
DataArray

1
10
Name
5
20
batt_custom_dispatch
X
3
672
Y
3
435
Width
3
184
Height
3
24
Tool Tip
5
0
Mode
3
1
Label
5
20
Battery power (kWdc)
Description
5
73
Battery dispatch by time step: Negative to charge, positive to discharge.
TabOrder
3
8
SchedNumeric

1
12
Name
5
15
batt_cycle_cost
X
3
678
Y
3
279
Width
3
104
Height
3
24
Tool Tip
5
0
Label
5
5
Value
UseSchedule
2
1
ScheduleOnly
2
0
FixedLength
3
4294967295
Description
5
0
TabOrder
3
4294967295
Choice

1
9
Name
5
22
batt_cycle_cost_choice
X
3
678
Y
3
252
Width
3
198
Height
3
24
Tool Tip
5
0
Items
6
2
Calculate automatically
Enter cost
Selection
3
4294967295
TabOrder
3
4
Label

1
13
Name
5
27
batt_cycle_cost_description
X
3
393
Y
3
198
Width
3
633
Height
3
51
Tool Tip
5
0
Caption
5
305
The dispatch options will cycle the battery if anticipated revenue exceeds the cycle degradation penalty. A higher penalty will decrease cycling, a lower penalty will increase cycling and may lead to additional battery replacements. See the "Battery Storage - Battery Lifetime" page for degradation modes.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Divider

1
10
Name
5
22
batt_cycle_costs_label
X
3
393
Y
3
183
Width
3
633
Height
3
22
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
25
Cycle Degradation Penalty
Bold
2
1
CheckBox

1
9
Name
5
29
batt_dispatch_auto_can_charge
X
3
30
Y
3
273
Width
3
348
Height
3
24
Tool Tip
5
0
Caption
5
30
Battery can charge from system
State
2
1
TabOrder
3
10
CheckBox

1
9
Name
5
33
batt_dispatch_auto_can_clipcharge
X
3
30
Y
3
300
Width
3
348
Height
3
24
Tool Tip
5
0
Caption
5
44
Battery can charge from clipped system power
State
2
1
TabOrder
3
11
CheckBox

1
9
Name
5
37
batt_dispatch_auto_can_fuelcellcharge
X
3
30
Y
3
327
Width
3
348
Height
3
24
Tool Tip
5
0
Caption
5
34
Battery can charge from fuel cell 
State
2
1
TabOrder
3
12
CheckBox

1
9
Name
5
33
batt_dispatch_auto_can_gridcharge
X
3
30
Y
3
246
Width
3
348
Height
3
24
Tool Tip
5
0
Caption
5
28
Battery can charge from grid
State
2
1
TabOrder
3
9
RadioChoice

1
11
Name
5
20
batt_dispatch_choice
X
3
30
Y
3
51
Width
3
345
Height
3
129
Tool Tip
5
0
Selection
3
4
Items
6
5
Automated dispatch look ahead
Automated dispatch one day look behind
Automated dispatch custom weather file
Dispatch to custom time series
Manual dispatch
ShowCaptions
2
1
Horizontal
2
0
TabOrder
3
1
Label

1
13
Name
5
19
batt_dispatch_label
X
3
393
Y
3
381
Width
3
627
Height
3
39
Tool Tip
5
0
Caption
5
110
Import time series data to charge or discharge the battery according to a predetermined schedule by time step.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Divider

1
10
Name
5
21
batt_dispatch_options
X
3
393
Y
3
105
Width
3
633
Height
3
22
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
40
Dispatch Frequency and Look-ahead Period
Bold
2
1
Numeric

1
17
Name
5
36
batt_dispatch_update_frequency_hours
X
3
678
Y
3
126
Width
3
48
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
2
Numeric

1
17
Name
5
21
batt_look_ahead_hours
X
3
678
Y
3
153
Width
3
48
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
3
Button

1
8
Name
5
33
batt_select_weather_file_forecast
X
3
396
Y
3
327
Width
3
90
Height
3
24
Tool Tip
5
0
Caption
5
9
Browse...
TabOrder
3
6
TextEntry

1
11
Name
5
32
batt_user_specified_weather_file
X
3
492
Y
3
327
Width
3
537
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Divider

1
10
Name
5
18
batt_weather_label
X
3
393
Y
3
303
Width
3
636
Height
3
19
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
32
Custom Weather File for Forecast
Bold
2
1
Divider

1
10
Name
5
9
object 21
X
3
18
Y
3
27
Width
3
354
Height
3
16
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
16
Dispatch Options
Bold
2
1
Button

1
8
Name
5
19
select_weather_file
X
3
780
Y
3
678
Width
3
90
Height
3
24
Tool Tip
5
0
Caption
5
9
Browse...
TabOrder
3
9
Button

1
8
Name
5
21
select_weather_file23
X
3
780
Y
3
678
Width
3
90
Height
3
24
Tool Tip
5
0
Caption
5
9
Browse...
TabOrder
3
9
Button

1
8
Name
5
21
select_weather_file24
X
3
780
Y
3
678
Width
3
90
Height
3
24
Tool Tip
5
0
Caption
5
9
Browse...
TabOrder
3
9
Numeric

1
17
Name
5
13
ui_batt_is_dc
X
3
273
Y
3
453
Width
3
90
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295

15
batt_auto_gridcharge_max_daily
3
1
Maximum percent per day
%
BatteryDispatch
0
2
1
1
1
1
100
Numeric
batt_custom_dispatch
3
2
Time series battery power targets
kWdc
BatteryDispatch
22
Battery Power (kWdc)|1
2
1
2
1
1
0
DataArray
batt_cycle_cost
3
2
Cycle degradation penalty
$/cycle-kWh
BatteryDispatch
0
2
1
2
1
1
0.1
SchedNumeric
batt_cycle_cost_choice
3
1
Cycle degradation penalty choice
 
BatteryDispatch
34
Calculate automatically|Enter cost
0
1
1
1
1
0
Choice
batt_dispatch_auto_can_charge
3
1
Battery can charge from unclipped PV
 
BatteryDispatch
0
3
1
1
1
1
1
CheckBox
batt_dispatch_auto_can_clipcharge
3
1
Battery can charge from otherwise clipped PV power
W
BatteryDispatch
0
3
1
1
1
1
1
CheckBox
batt_dispatch_auto_can_fuelcellcharge
3
1
Battery can charge from fuel cell
 
BatteryDispatch
0
3
1
1
1
1
0
CheckBox
batt_dispatch_auto_can_gridcharge
3
1
Battery can charge from grid
 
BatteryDispatch
0
1
1
1
1
1
0
CheckBox
batt_dispatch_choice
3
1
Battery dispatch choice front-of-meter
 
BatteryDispatch
154
Automated dispatch look ahead|Automated dispatch one day look behind|Automated dispatch custom weather file|Dispatch to custom time series|Manual dispatch
3
1
1
1
1
0
RadioChoice
batt_dispatch_update_frequency_hours
3
1
Frequency to update dispatch
hours
BatteryDispatch
0
2
1
1
1
1
24
Numeric
batt_look_ahead_hours
3
1
Look-ahead period
hours
BatteryDispatch
0
2
1
1
1
1
18
Numeric
batt_pv_clipping_forecast
3
2
PV clipping forecast power
kW
BatteryDispatch
0
3
1
2
1
1
0
Default
batt_pv_dc_forecast
3
2
PV DC forecast power
kW
BatteryDispatch
0
0
1
2
1
1
0
Default
batt_user_specified_weather_file
3
4
Weather forecast file on disk
 
BatteryDispatch
0
1
1
4
0
TextEntry
ui_batt_is_dc
3
1
Is DC-connected for show-hide
 
BatteryDispatch
0
8
1
1
1
1
0
Numeric

199
// need a UI variable to trigger on_change event when
// user changes between AC and DC connected on
// Battery Configuration form
equations{'ui_batt_is_dc'}=define()
{
	return !${batt_ac_or_dc};
};

7630
on_load{'Battery Dispatch Front of Meter'}=define()
{	
	// fom = front of meter
	toggle_dispatch_fom();
	enable_charge_from_clip();
	//on_change{'batt_dispatch_choice'};
	//on_change{'batt_select_weather_file_forecast'};
	//on_change{'batt_cycle_cost_choice'};
	show('ui_batt_is_dc',false);
	show('batt_dispatch_auto_can_fuelcellcharge', technology()=='Fuel Cell');
};

on_change{'batt_dispatch_choice'}=define()
{ 
	toggle_dispatch_fom(); // defined in Battery Dispach Manual callback
	enable_charge_from_clip();
};

on_change{'batt_select_weather_file_forecast'}=define()
{
	file = choose_file( "", 'Choose a weather file', 
			'All Weather Files (*.tm2,*.tm3,*.epw,*.smw,*.csv)|*.tm2;*.tm3;*.epw;*.smw;*.csv');
	${batt_user_specified_weather_file} = file;
	run_forecast(file);
};

on_change{'ui_batt_is_dc'}=define()
{
	enable_charge_from_clip();
};

on_change{'batt_cycle_cost_choice'}=define()
{
	enable('batt_cycle_cost', ${batt_cycle_cost_choice} == 1);
};

function toggle_dispatch_fom()
{
	// Turn on/off manual dispatch
	toggle_dispatch(); // defined in Battery Dispatch Manual callback
	
	// Turn on/off custom dispatch
	//toggle_custom_dispatch();
	enable('batt_custom_dispatch', ${batt_dispatch_choice} == 3);

	// Turn on/off forecast input
	//toggle_forecast();
	enable('batt_select_weather_file_forecast', ${batt_dispatch_choice} == 2);
	enable('batt_user_specified_weather_file', ${batt_dispatch_choice} == 2);
	
	if (${batt_dispatch_choice} == 2)
	{
		file = ${batt_user_specified_weather_file};
		run_forecast(file);
	}

	mode = ${batt_dispatch_choice};

	// manual disptch
	if (mode == 4)
	{
		enable_auto_inputs_fom(false);
		enable_non_manual_inputs_fom(false);
	}
	// input custom dispatch
	else if (mode == 3)
	{
		enable_auto_inputs_fom(false);
		enable_non_manual_inputs_fom(true);
	}
	// automated dispatch
	else if (mode < 3)
	{
		enable_auto_inputs_fom(true);
		enable_non_manual_inputs_fom(true);
		//toggle_cycle_cost();
		enable('batt_cycle_cost', ${batt_cycle_cost_choice} == 1);

		// look ahead options
		look_ahead = (mode == 0 || mode == 2);
		enable('batt_look_ahead_hours', look_ahead);
		
	}
}

/*
on_change{'batt_select_weather_file_forecast'}=define()
{
	toggle_inputs();
};
*/
/*
function toggle_inputs()
{
	// enable time series
	en_ts = value('ppa_multiplier_model') == 1; 
	
	//time series inputs
	enable('dispatch_factors_ts', en_ts );
	
	//schedule inputs
	enable('apply_tod_library_values', !en_ts );
	enable('tod_library', !en_ts );
	enable( 'dispatch_sched_weekday', !en_ts );
	enable( 'dispatch_sched_weekend', !en_ts );
	enable( 'dispatch_factor1', !en_ts );
	enable( 'dispatch_factor2', !en_ts );
	enable( 'dispatch_factor3', !en_ts );
	enable( 'dispatch_factor4', !en_ts );
	enable( 'dispatch_factor5', !en_ts );
	enable( 'dispatch_factor6', !en_ts );
	enable( 'dispatch_factor7', !en_ts );
	enable( 'dispatch_factor8', !en_ts );
	enable( 'dispatch_factor9', !en_ts );
	enable( 'btnSaveDispatchData', !en_ts );
	enable( 'btnLoadDispatchData', !en_ts );
	enable( 'dispatch_data_filename', !en_ts );
}

on_change{'apply_tod_library_values'} = define() {

	value( 'dispatch_sched_weekday', value('lib_dispatch_sched_weekday') );
	value( 'dispatch_sched_weekend', value('lib_dispatch_sched_weekend') );
	value( 'dispatch_factor1',       value('lib_dispatch_factor1')       );
	value( 'dispatch_factor2',       value('lib_dispatch_factor2')       );
	value( 'dispatch_factor3',       value('lib_dispatch_factor3')       );
	value( 'dispatch_factor4',       value('lib_dispatch_factor4')       );
	value( 'dispatch_factor5',       value('lib_dispatch_factor5')       );
	value( 'dispatch_factor6',       value('lib_dispatch_factor6')       );
	value( 'dispatch_factor7',       value('lib_dispatch_factor7')       );
	value( 'dispatch_factor8',       value('lib_dispatch_factor8')       );
	value( 'dispatch_factor9',       value('lib_dispatch_factor9')       );
	
};

on_change{'btnSaveDispatchData'} = define() {
	logmsg('running btnSaveDispatchData');
	file = choose_file( '', 'Save TOD Factors Data As', 
		'Data Files (*.csv)|*.csv', true);
		
	if ( file != '' ) {
		file = replace(file, '\\', '/');
		if (group_write('Time of Delivery Factors',file))
		{	
			value( 'dispatch_data_filename', file );
			msgbox("Data saved! \n");
		}
		else
		{
			value( 'dispatch_data_filename', "" );
			msgbox("Data save failed! \n");
		}
	}
};

on_change{'btnLoadDispatchData'} = define() {
	logmsg('running btnLoadDispatchData');
	file = choose_file( '', 'Open TOD Factors File', 
		'Data Files (*.csv)|*.csv');
		
	if ( file != '' ) {
		file = replace(file, '\\', '/');
		update = false;
		data = csvread(file);
		for ( i=0; i<#data; i++ )
		{
			row = data[i];
			if ( row[0] == 'use_tod_library_values' )
			{
				update = yesno('Update TOD data file before loading?\nSAM cannot load your TOD data file because it contains the variable \'use_tod_library_values\' from an older version of SAM that this version of SAM does not use. Click Yes if you want SAM to remove that variable from the file before loading it. Click No to return to the TOD factors page without modifying or loading the file.');
				if (update == true )
				{
					data -@ i;
					csvwrite( file, data );
				}
			}	
		}

		if (group_read('Time of Delivery Factors',file))
		{	
			value( 'dispatch_data_filename', file );
			msgbox("Data loaded! \n");
		}
		else
		{
			value( 'dispatch_data_filename', "" );
			msgbox("Data load failed! \n");
		}
	}
};
*/

function enable_auto_inputs_fom(on_off)
{
	enable('batt_auto_gridcharge_max_daily', on_off);
	enable('batt_dispatch_update_frequency_hours', on_off);
	enable('batt_look_ahead_hours', on_off);
	enable('batt_cycle_cost_choice', on_off);
	enable('batt_cycle_cost', on_off);
}

function enable_non_manual_inputs_fom(on_off)
{
	enable('batt_dispatch_auto_can_gridcharge', on_off);
	enable('batt_dispatch_auto_can_charge', on_off);
	//enable('batt_dispatch_auto_can_clipcharge', value('ui_batt_is_dc'));
}

function enable_charge_from_clip()
{
	if ( value('ui_batt_is_dc' ) == true && value('batt_dispatch_choice') < 3 )
	{ enable('batt_dispatch_auto_can_clipcharge', true); }
	else 
	{ enable('batt_dispatch_auto_can_clipcharge', false); } 
}

function run_forecast(file)
{
	// only run forecast for DC-connected, AC-connected doesn't need
	if (value('batt_ac_or_dc') == 0)
	{
		logmsg('Forecast file: ' + file);
		
		user_specified_weather_file_old = ${user_specified_weather_file};
		use_specific_weather_file_old = ${use_specific_weather_file};
		solar_resource_file_old = ${solar_resource_file};
		
		if ( file != '' ) {
			file = replace(file, '\\', '/');
		}	

		forecast_run = ssc_module_create_from_case('pvsamv1');
		ssc_var(forecast_run, 'en_batt', false);
		ssc_var(forecast_run, 'use_specific_weather_file', true);	
		ssc_var(forecast_run, 'user_specified_weather_file', file);
		ssc_var(forecast_run, 'solar_resource_file', file);	
	
		logmsg('use_specific_weather_file: ' + ssc_var(forecast_run, 'use_specific_weather_file'));
		logmsg('user_specified_weather_file: ' + ssc_var(forecast_run, 'user_specified_weather_file'));
		logmsg('solar_resource_file: ' + ssc_var(forecast_run, 'solar_resource_file'));

		status = ssc_exec(forecast_run, 'pvsamv1', {'show_dialog'=false, 'hold_dialog'=false});
		
		if (status != 0)
			logmsg('Battery forecast run failed with error: ' + status);
		else
		{
			${batt_pv_dc_forecast} = ssc_var(forecast_run, 'dc_net');
			${batt_pv_clipping_forecast} = ssc_var(forecast_run, 'inv_cliploss');
		}
		ssc_free(forecast_run);
	}
	else
	{
		${batt_pv_dc_forecast} = [0];
		${batt_pv_clipping_forecast} = [0];
	}
	
}
