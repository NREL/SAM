Solar Resource Data
884
975
46
GroupBox

1
8
Name
5
9
GroupBox2
X
3
9
Y
3
12
Width
3
870
Height
3
363
Tool Tip
5
0
Caption
5
22
Solar Resource Library
Bold
2
1
Hyperlink

1
9
Name
5
10
Hyperlink2
X
3
21
Y
3
504
Width
3
847
Height
3
21
Tool Tip
5
0
Caption
5
121
For locations not covered by the NSRDB, click here to go to the SAM website Weather Page for links to other data sources.
URL
5
33
https://sam.nrel.gov/weather-data
TabOrder
3
0
Numeric

1
17
Name
5
13
annual_albedo
X
3
666
Y
3
864
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
11
annual_beam
X
3
198
Y
3
849
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
14
annual_diffuse
X
3
198
Y
3
876
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
13
annual_global
X
3
198
Y
3
822
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
11
annual_snow
X
3
666
Y
3
837
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
11
annual_tdry
X
3
198
Y
3
903
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
1
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
11
annual_wspd
X
3
198
Y
3
930
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
1
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Button

1
8
Name
5
23
btn_add_file_to_library
X
3
717
Y
3
567
Width
3
153
Height
3
24
Tool Tip
5
0
Caption
5
19
Add file to library
TabOrder
3
11
Button

1
8
Name
5
22
btn_add_remove_folders
X
3
612
Y
3
309
Width
3
252
Height
3
24
Tool Tip
5
0
Caption
5
34
Add/remove weather file folders...
TabOrder
3
2
Button

1
8
Name
5
12
btn_download
X
3
633
Y
3
474
Width
3
234
Height
3
24
Tool Tip
5
0
Caption
5
30
Download and add to library...
TabOrder
3
10
Button

1
8
Name
5
19
btn_refresh_library
X
3
612
Y
3
336
Width
3
252
Height
3
24
Tool Tip
5
0
Caption
5
15
Refresh library
TabOrder
3
3
Button

1
8
Name
5
13
btn_view_data
X
3
717
Y
3
609
Width
3
153
Height
3
24
Tool Tip
5
0
Caption
5
12
View data...
TabOrder
3
12
Label

1
13
Name
5
15
caption_library
X
3
18
Y
3
66
Width
3
846
Height
3
36
Tool Tip
5
0
Caption
5
239
SAM's default library comes with only a few weather files to help you get started. Use the download tools below to build a library of locations you frequently model. Once you build your library, it is available for all of your work in SAM.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Label

1
13
Name
5
13
caption_techs
X
3
456
Y
3
663
Width
3
406
Height
3
63
Tool Tip
5
0
Caption
5
0
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Label

1
13
Name
5
24
download_weather_caption
X
3
18
Y
3
393
Width
3
846
Height
3
51
Tool Tip
5
0
Caption
5
292
The NSRDB is a database of thousands of weather files that you can download and add to your to your solar resource library: Download a default typical-year (TMY) file for most long-term cash flow analyses, or choose files to download for single-year or P50/P90 analyses. See Help for details.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Numeric

1
17
Name
5
4
elev
X
3
108
Y
3
750
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
317
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
9
Label

1
13
Name
5
14
folder_caption
X
3
18
Y
3
264
Width
3
846
Height
3
39
Tool Tip
5
0
Caption
5
240
SAM scans the following folders on your computer for valid weather files and adds them to your Solar Resource library. To use weather files stored on your computer, click Add/remove Weather File Folders and add folders containing the files.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Divider

1
10
Name
5
14
group_optional
X
3
465
Y
3
816
Width
3
363
Height
3
19
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
13
Optional Data
Bold
2
1
TextEntry

1
11
Name
5
11
in_location
X
3
21
Y
3
474
Width
3
381
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
6
StringArray

1
9
Name
5
16
in_location_list
X
3
303
Y
3
474
Width
3
99
Height
3
24
Tool Tip
5
0
Label
5
17
List of locations
Description
5
51
Type or import a list of addresses or lat-lon pairs
TabOrder
3
7
RadioChoice

1
11
Name
5
19
in_location_options
X
3
21
Y
3
447
Width
3
261
Height
3
24
Tool Tip
5
0
Selection
3
0
Items
6
2
One location
Multiple locations
ShowCaptions
2
1
Horizontal
2
1
TabOrder
3
4
Choice

1
9
Name
5
16
in_nsrdb_options
X
3
405
Y
3
474
Width
3
222
Height
3
24
Tool Tip
5
0
Items
6
3
Default TMY file
Choose year
Download files for all years (P50/P90)
Selection
3
0
TabOrder
3
7
RadioChoice

1
11
Name
5
12
in_time_step
X
3
405
Y
3
447
Width
3
222
Height
3
24
Tool Tip
5
0
Selection
3
0
Items
6
2
60-minute
30-minute
ShowCaptions
2
1
Horizontal
2
1
TabOrder
3
8
CheckBox

1
9
Name
5
11
is_advanced
X
3
633
Y
3
447
Width
3
234
Height
3
24
Tool Tip
5
0
Caption
5
22
Legacy data (advanced)
State
2
1
TabOrder
3
9
Numeric

1
17
Name
5
3
lat
X
3
108
Y
3
669
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
1.1
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
10
Label

1
13
Name
5
16
library_caption6
X
3
18
Y
3
30
Width
3
846
Height
3
33
Tool Tip
5
0
Caption
5
149
The Solar Resource library is a list of weather files on your computer. Choose a file from the library and verify the weather data information below.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
MultilineText

1
11
Name
5
19
library_folder_list
X
3
18
Y
3
309
Width
3
588
Height
3
54
Tool Tip
5
0
Text
5
38
List of Solar Resource library folders
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
3
lon
X
3
108
Y
3
696
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
1.2
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
11
Divider

1
10
Name
5
9
object 22
X
3
18
Y
3
801
Width
3
849
Height
3
16
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
50
Annual Averages Calculated from Weather File  Data
Bold
2
1
Divider

1
10
Name
5
11
object 2236
X
3
30
Y
3
642
Width
3
840
Height
3
16
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
29
Header Data from Weather File
Bold
2
1
GroupBox

1
8
Name
5
8
object 4
X
3
9
Y
3
375
Width
3
870
Height
3
162
Tool Tip
5
0
Caption
5
22
Download Weather Files
Bold
2
1
GroupBox

1
8
Name
5
10
object 423
X
3
9
Y
3
537
Width
3
870
Height
3
432
Tool Tip
5
0
Caption
5
24
Weather Data Information
Bold
2
1
Label

1
13
Name
5
8
object 7
X
3
246
Y
3
732
Width
3
615
Height
3
60
Tool Tip
5
0
Caption
5
233
For NSRDB data, the latitude and longitude shown here from the weather file header are the coordinates of the NSRDB grid cell and may be different from the values in the file name, which are the coordinates of the requested location.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Label

1
13
Name
5
10
object 735
X
3
393
Y
3
930
Width
3
222
Height
3
24
Tool Tip
5
0
Caption
5
28
*NaN indicates missing data.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
1
AlignTop
2
0
TextEntry

1
11
Name
5
20
solar_data_file_name
X
3
318
Y
3
609
Width
3
390
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
11
Name
5
25
solar_data_file_name_load
X
3
318
Y
3
609
Width
3
390
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
11
Name
5
17
solar_data_source
X
3
345
Y
3
693
Width
3
103
Height
3
24
Tool Tip
5
0
Text
5
3
src
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Library

1
8
Name
5
14
solar_resource
X
3
18
Y
3
102
Width
3
846
Height
3
159
Tool Tip
5
0
Library
5
17
SolarResourceData
Fields
5
69
Name,Latitude,Longitude,Time zone,Elevation,Station ID,Source,Version
TextEntry

1
11
Name
5
19
solar_resource_file
X
3
105
Y
3
609
Width
3
604
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
0
ForeColour
4
128
0
64
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
11
Name
5
10
station_id
X
3
345
Y
3
666
Width
3
103
Height
3
24
Tool Tip
5
0
Text
5
4
wban
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Label

1
13
Name
5
15
summary_caption
X
3
18
Y
3
564
Width
3
690
Height
3
36
Tool Tip
5
0
Caption
5
0
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Numeric

1
17
Name
5
2
tz
X
3
108
Y
3
723
Width
3
103
Height
3
24
Tool Tip
5
0
Value
1
-7.5
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
4
GMT 
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
8
Numeric

1
17
Name
5
25
use_specific_weather_file
X
3
618
Y
3
609
Width
3
90
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
0
Format
3
0
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
11
Name
5
27
user_specified_weather_file
X
3
318
Y
3
609
Width
3
390
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295

32
annual_albedo
3
1
Annual albedo
 
Location and Resource
0
8
1
1
1
1
0
Default
annual_beam
3
1
Direct normal (beam)
kWh/m²/day
Location and Resource
0
4
1
1
1
1
0
Numeric
annual_diffuse
3
1
Diffuse horizontal
kWh/m²/day
Location and Resource
0
4
1
1
1
1
0
Numeric
annual_global
3
1
Global horizontal
kWh/m²/day
Location and Resource
0
20
1
1
1
1
0
Numeric
annual_snow
3
1
Maximum snow depth
cm
Location and Resource
0
8
1
1
1
1
0
Default
annual_tdry
3
1
Average temperature
°C
Location and Resource
0
4
1
1
1
1
0
Numeric
annual_wspd
3
1
Average wind speed
m/s
Location and Resource
0
4
1
1
1
1
0
Numeric
city
3
4
City
 
Location and Resource
0
8
1
4
9
<invalid>
TextEntry
country
3
4
Country
 
Location and Resource
0
8
1
4
9
<invalid>
TextEntry
elev
3
1
Elevation
m
Location and Resource
0
8
1
1
1
1
0
Numeric
file_name
3
4
Weather file name required by some SSC modules
 
Location and Resource
0
9
1
4
0
Default
in_location
3
4
Location input (address or lat/lon)
 
Location and Resource
0
1
1
4
64
Type a street address or latitude, longitude (skip for advanced)
Default
in_location_list
3
4
List of locations
 
Location and Resource
3
abc
0
1
4
74
15458 Denver W Pkwy, Golden CO 804041|phoenix,az|45.5,-120.9|Manaus,Brazil
StringArray
in_location_options
3
1
Location options (0=one,1=multiple)
 
Location and Resource
0
1
1
1
1
1
0
Default
in_nsrdb_options
3
1
NSRDB options
 
Location and Resource
0
1
1
1
1
1
0
Choice
in_time_step
3
1
Time Step option (0=60 min,1=30 min)
 
Location and Resource
0
1
1
1
1
1
0
Default
is_advanced
3
1
Legacy and 30-minute data (advanced)
 
Location and Resource
0
1
1
1
1
1
0
Default
lat
3
1
Latitude
DD
Location and Resource
0
8
1
1
1
1
0
Numeric
library_folder_list
3
4
Solar resource library folders
 
Location and Resource
0
5
1
4
0
MultilineText
library_paths
3
4
Solar resource library file path list
 
Location and Resource
0
8
1
4
0
Default
lon
3
1
Longitude
DD
Location and Resource
0
8
1
1
1
1
0
Numeric
solar_data_file_name
3
4
Weather file name from solar resource library
 
Location and Resource
0
4
1
4
0
TextEntry
solar_data_file_name_load
3
4
Weather file when user interface loaded
 
Location and Resource
0
4
1
4
0
Default
solar_data_source
3
4
Data Source
 
 Location and Resource
0
8
1
4
3
src
TextEntry
solar_resource
3
4
Location
 
Location and Resource
19
SolarResourceData|0
19
1
4
0
Library
solar_resource_file
3
4
Weather file
 
Location and Resource
0
12
1
4
0
Default
state
3
4
State
 
Location and Resource
0
8
1
4
9
<invalid>
TextEntry
station_id
3
4
Station ID
 
Location and Resource
0
8
1
4
0
TextEntry
tz
3
1
Time zone
 
Location and Resource
0
8
1
1
1
1
0
Numeric
use_specific_weather_file
3
1
Use weather file from script (legacy)
 
Location and Resource
0
6
1
1
1
1
0
Default
user_specified_weather_file
3
4
Weather file specified from script 0 or 1 (legacy)
 
Location and Resource
0
6
1
4
0
TextEntry
wf_nrecords
3
1
Number of weather file records
 
Location and Resource
0
4
1
1
1
1
8760
Default

338
equations{'solar_resource_file'} = define() {
	if ( ${use_specific_weather_file} ) 
		{ return ${user_specified_weather_file}; }
	else 
		{ return ${solar_data_file_name}; }// file name from solar resource library csv file
};

equations{'file_name'} = define() {
	// for compatibility with most SSC APIs
	return ${solar_resource_file};
};
29070
on_load{'Solar Resource Data'} = define() {
	//msgbox('on load');
	// show/hide widgets
	on_change{'in_location_options'}();
	on_change{'in_nsrdb_options'}();
	on_change{'is_advanced'}();
	// store value of current library item in case an LK script changes the selected library item
	value('solar_data_file_name_load', value('solar_data_file_name'));
	// UI updates do not work consistently if these variables do not have widgets. They are stacked under the solar_resource_file widget.
	show('use_specific_weather_file', false); // determines whether user_specified_weather_file is used instead of solar_data_file_name
	show('user_specified_weather_file', false); // requires use_specific_weather_file = 1, set by LK script
	show('solar_data_file_name_load', false); // stores weather file name when UI form loaded
	show('solar_data_file_name', false); // value from SolarResourceData CSV file
	show('in_time_step', value('in_nsrdb_options') != 0 ); 
	refresh();
	update_library_folders(''); // refresh list of library folders
	update_info( 'on_load Solar Resource Data');
};

// library list, this gets triggered before on_load
on_change{'solar_resource'} = define() {
	// in case LK script changes library selection without setting use_specifc_weather_file to zero
	//msgbox('on_change solar_resource');
	if ( value('solar_data_file_name_load' ) != value('solar_data_file_name') )
	{
		value('use_specific_weather_file',0); 
	}
	update_info('on_change solar_resource');
};

on_change{'use_specific_weather_file'} = define() {
	if ( value('use_specific_weather_file') == 1 )
	{
		update_info('on_change use_specific_weather_file');
	}
};

on_change{ 'btn_add_file_to_library' } = define () {
	f_name = value( 'solar_resource_file' );
	update_library_folders( path_only( f_name ) );
	value( 'solar_resource', file_to_key( f_name ) );
};

on_change{ 'in_location_options' } = define() {
	show('in_location_list',  value('in_location_options') == 1 && !value('is_advanced') );
	show('in_location',       value('in_location_options') == 0 && !value('is_advanced') );
	refresh('');
};

on_change{ 'in_nsrdb_options' } = define() {
	show('in_location_list',   value('in_location_options') == 1 && !value('is_advanced') );
	show('in_location',        value('in_location_options') == 0 && !value('is_advanced') );
	show('in_location_options', !value('is_advanced') );
	// 30-minute data not available for tmy
	show('in_time_step', value('in_nsrdb_options') != 0 ); 
	refresh('');
};

on_change{ 'is_advanced' } = define() {
	if ( value('is_advanced') ) {
		property( 'download_weather_caption' , 'Caption' , 'After downloading legacy data from the NSRDB, click View Data below to check the data before using it for a simulation.');
		property( 'download_weather_caption' , 'TextColour', 'red' );
	}
	else {
		property( 'download_weather_caption' , 'Caption' , 'The NSRDB is a database of thousands of weather files that you can download and add to your to your solar resource library: Download a default typical-year (TMY) file for most long-term cash flow analyses, or choose files to download for single-year or P50/P90 analyses. See Help for details.' );
		property( 'download_weather_caption' , 'TextColour', 'black' );
	}
	show('in_location_list', ( value('in_location_options') && !value('is_advanced') ) );
	show('in_location', ( !value('in_location_options') && !value('is_advanced') ) );
	show('in_location_options', !value('is_advanced') );
	show('in_nsrdb_options', !value('is_advanced') );
	show('in_time_step', !value('is_advanced') );
	refresh('');
};

on_change{'btn_refresh_library'} = define() {
	update_library_folders('');
	update_info('on_change btn_refesh_library');
};

// add/remove weather file folders
on_change{'btn_add_remove_folders'} = define() {
	if ( showsettings( 'solar' ) )
	{
		update_library_folders( '' );
		// if current library selection is no longer in library, change to first item listed in library CSV file
		L = strlen( value( 'library_folder_list' ) );
		if ( strlen( value( 'library_folder_list' ) ) < L )
		{
			if ( !solar_library(value('solar_resource_file'),false){'is_in_library'} )
			{
				first_item = solar_library(value('solar_resource')){'first_item'};
				first_item = replace( file_only(first_item), '.csv', '' );
				msgbox( 'Selected weather file not in solar resource library!\nThe file ' 
					     + value( file_only('solar_resource_file') )
					     + ' is not in the solar resource library. Changing library selection to ' 
					     +  first_item  + '.' );
				value( 'solar_resource' , first_item );
			}	
		}
	}
};

on_change{'btn_view_data'} = define() {
	if ( dview_solar(value('solar_resource_file')) )
	{	msgbox('Failed to read file!\nThe data viewer was not able to open the weather file:\n' + value('solar_resource_file') ); }
};

on_change{'btn_download'} = define() {
	if ( value( 'is_advanced' ) ) { nsrdb_all(); }
	else { nsrdb_get(); }
	rescanlibrary( 'solar' );
	update_library_folders( '' );
	refresh('solar_resource');
};

/////////////////////////////////////////////
// Functions
/////////////////////////////////////////////

function file_to_key( file ) 
{
		key = file_only( file );
		key = replace( key, '.' + ext_only( file ), '' );
		return key;
}

// given a key or file item from the library, return if exists t/f, key, file, and key for first item
// is_key = true if library key with no path or extension
// is_key = false if file name with full path and extension
// should also work with no parameters to return number of files in library and in deploy/solar_resource folder
function solar_library( item, is_key )
{
	T = {};
	lib_file = userlocaldatadir() + '/SolarResourceData.csv';
	lib_data = csvread( lib_file, { 'table' = true } );
	files = lib_data{'File name'}; files -@ 0; files -@ 0;
	keys = lib_data{'Name'}; keys -@ 0; keys -@ 0;
	if ( is_key ) { ii = keys ?@ item; }
	else { ii = files ?@ item; }
	T{'is_in_library'} = false; 
	T{'lib_key'} = null;
	T{'first_item'} = null;
	if ( ii > -1 ) 
	{
		T{'is_in_library'} = true; 
		T{'lib_key'} = keys[ii];
		T{'first_item_key'} = keys[0];
		T{'file_name'} = files[ii];
	}
	T{'num_files_in_library'} = #files;
	str = replace( appdir() , '\\' , '/' );
	arr = split( str, '/' );
	arr -@ #arr-1;
	arr[#arr] = 'solar_resource';
	default_path = '';
	for( i=0; i<#arr; i++ ) {default_path += arr[i] + '/'; }
	default_files = dir_list( default_path, '*', false );
	T{'num_default_files'} = #default_files;
	return T;
}

// update weather file, annual summaries and summary text based on whether file is from library or user specified via LK script
// ctxt is for testing to see when function was called
function update_info( ctxt )
{
	wf = value('solar_resource_file'); 
	L = strlen( value( 'library_folder_list' ) );
	/*msgbox('Hello from update_info() in ' + ctxt + '!\nsolar_resource_file = ' + value('solar_resource_file')
	       + '\nsolar_data_file_name = ' + value('solar_data_file_name')
	       + '\n\nsolar_data_file_name_load = ' + value('solar_data_file_name_load')  
	       + '\n\nuser_specified_weather_file = ' + value('user_specified_weather_file')
	       + '\n\nfile_name = ' + value('file_name') 
	       + '\n\nsolar_resource = ' + value('solar_resource') 
	       + '\n\nwf is in library = ' + solar_library(value('solar_resource_file'),false){'is_in_library'}
	       + '\n\ncurrent selection is in library = ' + solar_library(value('solar_resource'),true){'is_in_library'} );*/
	
	//if selected library file is no longer in library reload library, and exit
	wf_ok = false;
	if (!file_exists(wf) )
	{
		msg_caption = 'Weather file does not exist. Please choose or download a different file above.';
		msg_color = 'red';
		show_button = false;
		rescanlibrary('solar'); // remove deleted file from library
	}
	// display message depending on whether file is in library or is a user-specified file
	elseif ( wf != value('solar_data_file_name') )
	{
		msg_caption = 'The weather file is different from the file selected in the library because it was modified by an LK script. Click Add File to Library if you want the file to appear in the library list above.';
		msg_color = 'red';
		show_button = true;
	}
	elseif ( strlen( value( 'library_folder_list' ) ) < L ) // ** this check should never be true, right???
	{
		msg_caption = 'Weather file folder not in list? Please choose or download a different file above, or click Add file to library.';
		msg_color = 'red';
		show_button = true;
	}
	elseif ( !solar_library(value('solar_resource'),true){'is_in_library'} )
	{
		msg_caption = 'Weather file is not in library. Please choose or download a different file above, or click Add file to library.';
		msg_color = 'red';
		show_button = true;
	}
	else
	{
		msg_caption = 'The following information describes the data in the highlighted weather file from the Solar Resource library above. This is the file SAM will use when you click Simulate.';
		msg_color = 'black';
		show_button = false;
		wf_ok = true;
	}

	// show / hide PV only summary data
	is_pv = ( technology() == 'Flat Plate PV' || technology() == 'PVWatts' );
	property( 'summary_caption' , 'Caption' , msg_caption );
	property( 'summary_caption' , 'TextColour' , msg_color );
	show('btn_add_file_to_library', show_button);
	show('group_optional', is_pv );
	show('annual_snow', is_pv );
	show('annual_albedo',is_pv );
	refresh(''); // always refresh after calling show()

	// display message for new users if library contains only default files
	property( 'caption_library', 'Caption', 'The default library comes with only a few weather files to help you get started. Use the download tools below to build a library of locations you frequently model. Once you build your library, it is available for all of your work in SAM.' );
	property( 'caption_library', 'TextColour', 'black' );
	lib = solar_library( 'dummy', false );
	if ( lib{'num_files_in_library'} == lib{'num_default_files'} )
	{
		property( 'caption_library', 'Caption', 'You have not added any weather files to your library. To add files, use the download tools below to get weather files from the NSRDB, or click Add Remove Weather File folders to add files from your computer. The default library comes with only a few weather files to help you get started.' );
		property( 'caption_library', 'TextColour', 'red' );
	}

	// calculate and display annual summary data
	if ( wf_ok )
	{
		obj = ssc_create();
		ssc_var( obj, 'file_name', wf );
		if ( 0 == ssc_exec( obj, 'wfreader' ) )
		{
			value( 'annual_global', ssc_var(obj, 'annual_global') );
			value( 'annual_beam', ssc_var(obj, 'annual_beam') );
			value( 'annual_diffuse', ssc_var(obj, 'annual_diffuse') );
			value( 'annual_tdry', ssc_var(obj, 'annual_tdry') );
			value( 'annual_wspd', ssc_var(obj, 'annual_wspd') );
			value( 'annual_snow', ssc_var(obj, 'annual_snow') );
			value( 'annual_albedo', ssc_var(obj, 'annual_albedo') );
			rhum = ssc_var(obj, 'rhum');
			rhum_ok = true;
			if ( isnan( rhum[0] ) ) { rhum_ok = false; }
			// used for timestep calculation in editscene3d
			value( 'wf_nrecords', ssc_var(obj, 'nrecords') );
		}
		else
		{
			value( 'annual_global', nan() );
			value( 'annual_beam', nan() );
			value( 'annual_diffuse', nan() );
			value( 'annual_tdry', nan() );
			value( 'annual_wspd', nan() );
			value( 'annual_snow', nan() );
			value( 'annual_albedo', nan() );
			value( 'wf_nrecords', nan() );
		}
		ssc_free( obj );
	}
	
	if ( librarygetcurrentselection('solar_resource') == '' )
	{
		librarynotifytext('solar_resource','Please choose a file. Nothing selected.');
	}
	elseif ( !solar_library(value('solar_resource'),true){'is_in_library'} ) 
	{
		librarynotifytext('solar_resource', 'Please choose a file. Current selection not in library.');
	}
	elseif (librarygetnumbermatches('solar_resource') < 1)
	{
		value('in_location', librarygetfiltertext('solar_resource'));
		librarynotifytext('solar_resource', 'No match found. Try downloading a weather file below.');
	}
	elseif ( librarygetcurrentselection('solar_resource') != file_to_key( value('solar_resource_file')) )
	{
		librarynotifytext('solar_resource','Current selection is different from weather file.');
	}
	else
	{
		librarynotifytext('solar_resource', ''); //'Everything is fine.'
		value('in_location', 'Type a location name, street address, or latitude and longitude');
	}
	
	//msgbox('libraryget functions'+
	//'\nfiltertext = ' + librarygetfiltertext('solar_resource') 
	//+ '\nnumber matches = ' + librarygetnumbermatches('solar_resource') 
	//+ '\ncurrentselection = ' + librarygetcurrentselection('solar_resource'));
	
	display_tech_message();
}

// update ui list of library folders, and optionally add new path to library folders
function update_library_folders( new_path )
{
	//msgbox('Hello from update_library_folders()');
	x = get_settings('solar_data_paths');
	// add new path if provided and it doesn't already exist in the library
	if ( new_path != '' && dir_exists( new_path ) && ( strpos( x, new_path ) < 0 ) )
	{
		if ( x != '' ) { x += ';'; }
		x += new_path;
	}
	// list of library folders files to display on separate lines
	paths = split( x, ';' );
	// put solar download folder at top of list
	clean_list = '';
	// remove folders in list that no longer exist
	for (i = 0; i<#paths; i++ )
	{
		if ( dir_exists( paths[i] ) )
		{
			clean_list += paths[i];
			if ( i < #paths-1 ) { clean_list += ';'; }
		}	
	}		
	// update solar_data_paths used by library.cpp and nsrdb.cpp to cleaned list		
	set_settings('solar_data_paths', clean_list );
	// update list to display
	value( 'library_folder_list', get_settings('solar_download_path') + '\n' 
	       + replace( clean_list , ';' , '\n' ) );
	rescanlibrary( 'solar' );        
}

function display_tech_message() 
{
	str = '';
	str_and = '';
	tech = technology();
	csp_techs = ['Physical Trough','Empirical Trough','MSPT','DSPT','MSLF','DSLF','Dish Stirling','Generic CSP System'];
	for ( i=0; i<#csp_techs; i++ )
	{
		if ( tech == csp_techs[i] ) 
		{
			str = 'CSP models use a different time convention than NREL NSRDB data. See Help for details.';
		}	
	}
	if ( tech == 'Biopower' )
	{ 
		if ( isnan( value('annual_global') ) || !rhum_ok )
		{
			str = 'The Biopower model requires ';
		}
		if ( isnan( value('annual_global' ) ) ) 
		{
			str += 'global horizontal irradiance data ';
			str_and = 'and ';
		}	
		if ( !rhum_ok ) 
		{
		str += str_and + 'relative humidity data. See Help for details.';
		}	
	}
	property( '  ' , 'Caption', str );		
	property( 'caption_techs' , 'TextColour', 'red' );
}

// display window for advanced download
function nsrdb_all() 
{
	hash = nsrdbquery();
	// meta data
	if ( hash != '' )
	{ 
		fn = hash{'file'};
		dn = hash{'folder'};
		af = hash{'addfolder'};
		if ( fn != '' )
		{
			error = wf_check( fn );
		}	
		if (af == "no")
		{
			if ((fn != '') && (dn != ''))
			{
				value( 'use_specific_weather_file', 1 );
				fn = replace(fn, '\\', '/');
				value( 'user_specified_weather_file', fn );
			}
		}
		else
		{
			rescanlibrary( 'solar' );  //** is this necessary??
			if (fn != '')
			{
				value( 'use_specific_weather_file', 0 );
				value( 'solar_resource', file_to_key( fn ) );
			}
		}
	}
}

// clean up location string to use as file name
function clean_name( location )
{
	name = location;
	name = replace( name , ', ' , ',' );
	name = replace( name , ',' , '_' );
	name = replace( name , '  ' , ' ' );
	name = replace( name , ' ' , '_' );
	return lower(name);
}

// return url for current dataset for a location. uses NSRDB lat, lon as input instead of wkt because always downloading single file
function nsrdb( location )
{
	name = '';
	url = '';
	years = [];
	msg = '';
	geocode_ok = false;
	json_ok = false;
	location_ok = true;

	if ( strpos(lower(location),'type a location name') > -1 )
	{
		location_ok = false;
		msg += 'Invalid location name: \n\n' + location + '\n\n';
		location = '';
	}

	g = geocode( location );
	if ( !g.ok ) // sometimes correct address fails but works on second try
	{
		g = geocode( location );
	}
	
	if ( g.ok )
	{
		geocode_ok = true;
		url = webapi( 'nsrdb_query' );
		url = replace( url, '<LAT>', g.lat );
		url = replace( url, '<LON>', g.lon );
		json_str = curl( url );
		msg += 'URL for NSRDB query: ' + url + '\n\n';
		var = json_read( json_str );
		if ( typeof( var ) == 'table' )
		{
			if ( var.errors != [] )
			{
				msg += var.errors + '.\n';
				if ( strpos( lower(var.errors.code), 'api' ) > -1 ) // no or invalid api key
					msg += 'See private.h to set API keys.';
			}
			elseif ( var.outputs == null )
			{
				msg += 'No NSRDB data available for \"' + location + '\".\nSee https://sam.nrel.gov/weather for links to other data sources.\n';
			}
			elseif ( var.outputs == [] )
			{
				msg += 'No NSRDB data available for \"' + location + '\".\nSee https://sam.nrel.gov/weather for links to other data sources.\n';
			}
			else
			{
				json_ok = true;
			}	
		}
		else
		{
			msg += 'NSRDB did not return valid JSON string:\n';
			msg += json_str;
			if ( strpos( lower(json_str), 'api' ) > -1 ) // no or invalid api key
			{
				msg += 'See private.h to set API keys.\n';
			}	
		}
		if ( json_ok )
		{
			arr = var.outputs;
			best_dataset = -1;
			for ( i=0; i<#arr; i++ )
			{
				name = arr[i].name;
				if ( name == 'suny-international' || name == 'psmv3' )
				{
					best_dataset = i; 
				}
			}
			if (best_dataset > -1 )
			{
				// PSM V3 is var.outputs[1]
				// SUNY International is var.outputs[0]
				name = var.outputs[best_dataset].name;
				url = split(var.outputs[best_dataset].links[0].link,'?')[0];
				years = var.outputs[best_dataset].availableYears;
				dataset_ok = true;
			}
			else
			{
				msg += 'No NSRDB PSM V3 data available for \"' + location + '\". ';
				msg += 'Try using the Legacy data option to find data from a different dataset.\n';
				dataset_ok = false;
			}
		}
	}
	else
	{
		geocode_ok = false;
		msg += 'Failed to convert to latitude-longitude pair: \"' + location + '\" \n';
	}
	ok_test = ( ( geocode_ok == true ) && ( json_ok == true ) && ( dataset_ok == true ) && ( location_ok == true ) );
	return { 'name' = name , 'msg' = msg , 'url' = url , 'years' = years , 'ok' = ok_test , 'lat' = g.lat, 'lon' = g.lon };
}

function wf_check( wf )
{
	if ( file_exists( wf ) )
	{
		ssc = ssc_create();
		ssc_var( ssc, 'input_file', wf );
		result = ssc_exec( ssc, 'wfcheck', {'show_dialog'=false} );
		ssc_free( ssc );
	}
	else
		result = 'Failed to open ' + wf + ' for checking.';
	return result;
}

// returns a single-year data file for the current NSRDB data available for a location
function nsrdb_get()
{
	enum { TMY, SINGLE_YEAR, ALL_YEARS };
	enum { ONE_LOCATION, MULTIPLE_LOCATIONS };
	enum { HOURLY, HALF_HOURLY };
	msg = '';
	wf = '';
	download_ok = true;
	location_ok = true;
	folder = wfdownloaddir();
	log_file = folder + '/sam_nsrdb_download_log.txt';
	if ( file_exists( log_file ) ) { flog = open( log_file , 'a' ); }
	else { flog = open( log_file, 'w' ); }
	write_line( flog, 'NSRDB Download ' + date_time());
	write_line( flog, '==========================================================\n');	
	if ( value( 'in_time_step' ) == HOURLY )
	{	time_step = '60'; }
	else
	{	time_step = '30'; }
	
	if ( value( 'in_location_options' ) == ONE_LOCATION )
	{	
		location = value('in_location');
	}
	else
	{
		location_list = value('in_location_list'); // string with '|' delimiter
		location_list = replace( location_list, '\"', '' ); // files from spreadsheets may use quotes for strings
		location = split(location_list, '|');
	}
	if ( typeof( location ) == 'string' )
	{	location = [ location ]; }
	write_line( flog, 'Requested location(s): ' + location + '\n');
	pb_locations = progressbar( { 'title' = 'Download Progress' , 'message' = 'Starting download.' , 'cancelbutton' = false , 'closebutton' = false , 'time' = false , 'max' = #location } );
	for ( n=0; n<#location; n++ )
	{
		write_line( flog, 'Location ' + to_string(n+1) + ' of ' + #location + ': \"' + location[n]  + '\"');
		write_line( flog, '----------------------------------------------------------\n');	
		progressbar( pb_locations, { 'message' = 'Getting download information for \"' + location[n] + '\".' , 'value' = 1+n } );
		dataset[n] = nsrdb( location[n] );
		progressbar( pb_locations, { 'message' = 'Processing download information for \"' + location[n] + '\".' , 'value' = 1+n } );
		if ( !dataset[n].ok )
		{
			download_ok = false;
			write_line( flog, dataset[n].msg + '\n');
			msg += dataset[n].msg + '\n';
			continue;
		}	
		x = value('in_nsrdb_options');
		if ( x == TMY ) // type is a string
		{	type = 'tmy'; }
		elseif ( x == SINGLE_YEAR ) // type is a number
		{
			y = choose_from_list( dataset[n].years, 'Choose a year', 'Available Years for \"' + location[n] +'\"', 0 ); 
			if (y == '')
			{
				download_ok = false;
				write_line( flog, 'Year not valid: Selection cancelled by user.\n' );
				continue;
			}
			else	
			{	type = to_int( y ); }
		}
		else // x == ALL_YEARS, type is an array of numbers
		{	type = dataset[n].years; }
		write_line( flog, 'Requested year(s): ' + type );
		// verify that type parameter is a valid value and convert to array if needed
		d = typeof( type );
		bad = [];
		if ( d == 'string' && type == 'tmy' ) // download tmy only
		{	type = ['tmy']; }
		elseif ( d == 'string' ) // invalid parameter
		{	bad[0] = type; }
		elseif ( d == 'number' ) // single year
		{
			type = [type];
			if ( ( dataset[n].years ?@ type[0] ) == -1 )
				bad[0] = type[0];
		}	
		elseif ( n == 0 ) // multiple years, keep good years and remove bad years, only need to do once
		{	
			j=0;
			for ( i=0; i<#type; i++ )
			{
				if ( ( dataset[n].years ?@ type[i] ) == -1 ) 
				{
					bad[j] = type[i];
					j++;
				}	
			}
			for ( i=0; i<#bad; i++ )
			{
				for ( j=0; j<#type; j++ )
				{
					if ( type[j] == bad[i] )
						type -@ j;
				}		
			}			
		}
		if ( bad == [] )
		{	bad = 'None'; }
		else 
		{	download_ok = false; }
		write_line( flog, 'Invalid requested years: ' + bad);
		if ( dataset[n].ok )
		{ 
			// portion of url that is the same for all download scenarios
			base_url = dataset[n].url;
			base_url += '?api_key=<SAMAPIKEY>';
			base_url += '&full_name=sam_user';
			base_url += '&email=<USEREMAIL>';
			base_url += '&affiliation=unknown'; 
			base_url += '&mailing_list=false';
			base_url += '&reason=SAM';
			base_url += '&interval=' + time_step;
			base_url += '&utc=false';
			base_url += '&leap_day=false';

			// create folder for multiple years to facilitate
			// p50 p90 and add to library folders list
			// do not put tmy file in multiple year folder
			// use default folder if mdkir() fails
			default_download_path = folder;
			tmy_path = default_download_path;
			path = default_download_path;
			if ( #type > 1 )
			{
				path = path + '/' + clean_name( location[n] ) ;
				if ( !dir_exists( path ) )
				{
					if ( !mkdir( path, false ) )
					{	path = default_download_path; }
				}
				if ( path != default_download_path && i == 0)
				{	update_library_folders( path ); }
			}
			
			pb_years = progressbar( { 'title' = 'Download Progress for ' + location[n] , 'message' = 'Downloading, please wait...', 'cancelbutton' = false , 'closebutton' = false , 'time' = false , 'max' = #type } );
				
			// for each year
			for( i=0; i<#type; i++ )
			{
				progressbar( pb_years, { 'message' = 'Preparing file ' + to_string(i+1) + ' of ' + #type + '.' , 'value' = 1+i } );

				file_skipped = false;
				no_current_data = false;
				if ( dataset[n].name == 'psmv3' )
				{
					if ( type[i] == 'tmy' ) // relative_humidity not available for psmv3 tmy data
						{ base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,wind_direction,wind_speed,surface_albedo'; }
					else // single year
						{ base_url += '&attributes=dni,dhi,ghi,dew_point,air_temperature,surface_pressure,relative_humidity,wind_direction,wind_speed,surface_albedo'; }
				}
				elseif ( dataset[n].name == 'suny-international' )
				{
					if ( type[i] == 'tmy' ) // relative_humidity not available for tmy data
						{ base_url += '&attributes=dni,dhi,ghi,dew_point,surface_temperature,surface_pressure,wdir,wspd'; }
					else
						{ base_url += '&attributes=dni,dhi,ghi,dew_point,surface_temperature,surface_pressure,relative_humidity,wdir,wspd,snow_depth'; }
				}
				else
				{
					no_current_data = true;
					dataset_name = dataset[n].name;
					msg += 'No NSRDB PSM V3 or SUNY International data available for ' + dataset[n].location + '.\n';
					msg += 'Try using the Legacy data option to download a file from the ' + dataset_name +' dataset.';
				}
					
				write_line( flog, '\nFile ' + to_string(i+1) + ' of ' + #type + ': ' + type[i]);
				write_line( flog, '----------------------------------------------------------\n');	
				url = base_url + '&names=' + to_string(type[i]);
				url += '&wkt=POINT(' + dataset[n].lon + '%20' + dataset[n].lat + ')';
				write_line( flog, url + '\n');

				fname = path + '/' + clean_name( location[n] ) + '_' + dataset[n].lat + '_' + dataset[n].lon + '_psmv3_' + time_step + '_' + type[i] + '.csv';

				if ( type[i] == 'tmy' ) 
				{
					fname = replace( fname, path, tmy_path ); 
					fname_tmy = fname;
				}
				
				if ( solar_library( fname, false ){'is_in_library'} )
				{
					file_skipped = true;
					write_line( flog, 'File skipped, already exists: ' + fname + '\n');
					if ( #location == 1 )
					{
						value( 'solar_resource', file_to_key( fname ) );
					}	
				}
				elseif ( !no_current_data )	
				{
					start = start_timer();
					progressbar( pb_years, { 'message' = 'Downloading file ' + to_string(i+1) + ' of ' + #type + '.' , 'value' = 1+i } );
					wf = curl( url , { 'file'= fname } ); // curl() should replace <SAMAPI> and <USEREMAIL > with values from private.h
					time = elapsed_time() / 1000;
					progressbar( pb_years, { 'message' = 'Checking file ' + to_string(i+1) + ' of ' + #type + '.' , 'value' = 1+i } );
					write_line( flog, 'Download time: ' + time + ' seconds.\n' );
					wf_error = wf_check( fname );
					if ( wf_error != 0 ) // usually indicates NSRDB returned a file containing error message instead of weather data
					{
						download_ok = false;
						nsrdb_message = read_text_file( fname );
						write_line( flog, 'Weather file test failed, ' + wf_error + ': ' + fname + '.\n');
						write_line( flog, 'Message from NSRDB: ' + left( replace( nsrdb_message, '\n', ';'), 300 ) + '\n');
						msg += 'Weather file test failed for ' + file_only( fname ) + '.';
						fname_new = replace( fname, '.csv' , '_bad.txt' ); // rename file so next download attempt won't detect existing file
						ok = rename_file( fname , fname_new );
						if ( ok ) 
							write_line( flog, '* File renamed to: ' + fname_new + '.\n' );
						else
							write_line( flog, '* Failed to rename ' + fname + '.\n' );	
					}
					// set library to last file that was downloaded and passed weather file test
					elseif ( i == #type - 1 ) 
					{
						rescanlibrary('solar');
						// for multiple file download set library to tmy file
						if ( #type > 1 ) { fn = fname_tmy;  }
						else { fn = fname; }
						value( 'solar_resource', file_to_key( fn ) );
						write_line( flog, 'Weather file test passed: ' + fname + '.\n');
					}	
				}
			}
			progressbar( pb_years );
		}	
		else
		{
			download_ok = false;
			write_line( flog, dataset[n].msg + '\n');
		}
	}
	progressbar( pb_locations );
	close ( flog );
	if ( download_ok && #type > 1 ) // multiple years
	{
		str = 'Download complete!\n';
		str += 'Multiple single-year files downloaded to:\n  ' + path + '\n\n';
		//str += 'Click \"P50 P90\" and choose this folder for P50 P90 simulations.\n\n';
		str += 'TMY file downloaded to:\n  ' + default_download_path + '\n';
		str += 'and selected from library for simulation to compare to P50 result.\n\n';
		str += '\n\nDo you want to show instructions for running a P50/P90 analysis now?';
		if ( yesno( str ) )
		{
			folder = path;
			p50p90_text = 'Instructions for running P50/P90 simulations:\n\n'
			+ '1. Click P50 / P90 at the bottom left of the main SAM window.\n\n'
			+ '2. Click the ellipses (...) to the right of the Select Weather File Folder box.\n\n'
			+ '3. Navigate to ' + folder + '.\n\n'
			+ '4. Click "Run P50/P90 simulations".\n'
			+ '\nIf you want to set a custom P value in addition to P10, P50 and P90, you can type a value for "Custom Px" before running the simulations.'
			+ '\n\nTo remove this note window, delete all of its contents and close the window.';
			pagenote( p50p90_text );
		}
	}
	elseif ( download_ok && !file_skipped && !no_current_data )
	{
		str = 'Download complete!\n';
		str += 'Weather file(s) downloaded to:\n' + path + '.\n';
		str += '\nOpen log file?';
		show_log = yesno( str );
		if ( show_log ) { browse( log_file ); }
	}
	elseif ( download_ok && file_skipped )
	{
		str = 'File already in library.\n Download skipped.\n\n' + fname;
		msgbox( str );
	}
	else 
	{
		show_log = yesno( 'Download error(s)!\n' + msg + '\nOpen log file?');
		if ( show_log ) { browse( log_file ); }
	}
}
