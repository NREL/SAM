{
    "Name": "Battery REopt Optimization",
    "Width": 1052.0,
    "Height": 127.0,
    "FormObjects": {
        "Label": {
            "Visible": 1.0,
            "ObjectProperties": {
                "Name": {
                    "Type": 5.0,
                    "String": "batt_size_label3"
                },
                "X": {
                    "Type": 3.0,
                    "Integer": 9.0
                },
                "Y": {
                    "Type": 3.0,
                    "Integer": 21.0
                },
                "Width": {
                    "Type": 3.0,
                    "Integer": 1029.0
                },
                "Height": {
                    "Type": 3.0,
                    "Integer": 54.0
                },
                "Tool Tip": {
                    "Type": 5.0,
                    "String": ""
                },
                "Caption": {
                    "Type": 5.0,
                    "String": "The REopt API web service automatically sizes the battery bank and calculates a time series dispatch schedule. Click Get Size and Dispatch to run a simulation, send data from SAM to the service, run a REopt optimization on the service, and choose whether to modify SAM battery size and dispatch inputs with results from the REopt run. You can also choose whether to size the battery to maintain power during a grid outage. See Help for details."
                },
                "TextColour": {
                    "Type": 4.0,
                    "Color": {
                        "Red": 0.0,
                        "Green": 0.0,
                        "Blue": 0.0,
                        "Alpha": 255.0
                    }
                },
                "Bold": {
                    "Type": 2.0,
                    "Boolean": 0.0
                },
                "FontSize": {
                    "Type": 3.0,
                    "Integer": 0.0
                },
                "WordWrap": {
                    "Type": 2.0,
                    "Boolean": 1.0
                },
                "AlignRight": {
                    "Type": 2.0,
                    "Boolean": 0.0
                },
                "AlignTop": {
                    "Type": 2.0,
                    "Boolean": 1.0
                }
            }
        },
        "Button": {
            "Visible": 1.0,
            "ObjectProperties": {
                "Name": {
                    "Type": 5.0,
                    "String": "call_reopt"
                },
                "X": {
                    "Type": 3.0,
                    "Integer": 486.0
                },
                "Y": {
                    "Type": 3.0,
                    "Integer": 81.0
                },
                "Width": {
                    "Type": 3.0,
                    "Integer": 198.0
                },
                "Height": {
                    "Type": 3.0,
                    "Integer": 28.0
                },
                "Tool Tip": {
                    "Type": 5.0,
                    "String": ""
                },
                "Caption": {
                    "Type": 5.0,
                    "String": "Get size and dispatch"
                },
                "TabOrder": {
                    "Type": 3.0,
                    "Integer": 2.0
                }
            }
        },
        "GroupBox": {
            "Visible": 1.0,
            "ObjectProperties": {
                "Name": {
                    "Type": 5.0,
                    "String": "object 4"
                },
                "X": {
                    "Type": 3.0,
                    "Integer": 6.0
                },
                "Y": {
                    "Type": 3.0,
                    "Integer": 3.0
                },
                "Width": {
                    "Type": 3.0,
                    "Integer": 1042.0
                },
                "Height": {
                    "Type": 3.0,
                    "Integer": 117.0
                },
                "Tool Tip": {
                    "Type": 5.0,
                    "String": ""
                },
                "Caption": {
                    "Type": 5.0,
                    "String": "Optimal Sizing and Dispatch from REopt"
                },
                "Bold": {
                    "Type": 2.0,
                    "Boolean": 1.0
                }
            }
        },
        "CheckBox": {
            "Visible": 1.0,
            "ObjectProperties": {
                "Name": {
                    "Type": 5.0,
                    "String": "reopt_consider_outage"
                },
                "X": {
                    "Type": 3.0,
                    "Integer": 72.0
                },
                "Y": {
                    "Type": 3.0,
                    "Integer": 81.0
                },
                "Width": {
                    "Type": 3.0,
                    "Integer": 351.0
                },
                "Height": {
                    "Type": 3.0,
                    "Integer": 24.0
                },
                "Tool Tip": {
                    "Type": 5.0,
                    "String": ""
                },
                "Caption": {
                    "Type": 5.0,
                    "String": "Consider grid outage in REopt optimization"
                },
                "State": {
                    "Type": 2.0,
                    "Boolean": 1.0
                },
                "TabOrder": {
                    "Type": 3.0,
                    "Integer": -1.0
                }
            }
        }
    },
    "VarDatabase": {
        "reopt_consider_outage": {
            "Version": 4.0,
            "Type": 1.0,
            "Label": "Consider grid outage in REopt optimization",
            "Units": "",
            "Group": "Battery REopt Optimization",
            "IndexLabels": "",
            "Flags": 1.0,
            "DefaultValue": 0.0,
            "UIObject": "CheckBox",
            "sscVariableName": "",
            "sscVariableValue": ""
        }
    },
    "Equations": [],
    "Callbacks": [
        "on_load{'Battery REopt Optimization'} = define() {",
        "\tenable_consider_grid_outage();",
        "};",
        "",
        "on_change{'reopt_consider_outage'} = define() {",
        "\tenable_consider_grid_outage();",
        "};",
        "",
        "on_change{'call_reopt'} = define() {",
        "\t// check inputs before making REopt call",
        "\twf_len = 60 / ${ui_step_minutes} * 8760;",
        "\tload_len = #(${load});",
        "\tif (wf_len != load_len) {\r",
        "\t\tmsgbox('Time step issue.\\nWeather and load data must have the same time step.');\r",
        "\t\texit;\r",
        "\t}\r",
        "\tif (load_len != 8760 * 4 && load_len != 8760 * 2 && load_len != 8760) \r",
        "\t{\r",
        "\t\tmsgbox('Unsupported simulation time step.\\nWeather file time step is ' + to_string(${ui_step_minutes}) + ' minutes. REopt requires 15-, 30-, or 60-minute time steps.');\r",
        "\t\texit;\r",
        "\t}\r",
        "",
        "\tif (!value('batt_dispatch_auto_can_charge'))",
        "\t{",
        "\t\tchange = yesno('REopt requires that battery can charge from PV.\\nChange Battery Can Charge from System input on Battery Dispatch page automatically? Click No to exit optimization.');",
        "\t\tif (change)",
        "\t\t{",
        "\t\t\tvalue('batt_dispatch_auto_can_charge', true);",
        "\t\t\trefresh();",
        "\t\t}",
        "\t\telse ",
        "\t\t{",
        "\t\t\texit;",
        "\t\t}",
        "\t}",
        "\tif ( value('batt_duration_choice') != 0 )",
        "\t{",
        "\t\tchange = yesno('REopt requires desired battery size in kWh.\\nChange Desired Bank Capacity units on Battery Cell and System page from h to kWh automatically? Click No to exit the optimization.');",
        "\t\tif (change)",
        "\t\t{",
        "\t\t\tvalue('batt_bank_size_ui',value('batt_computed_bank_capacity'));",
        "\t\t\tvalue('batt_duration_choice',0);",
        "\t\t\trefresh();",
        "\t\t}",
        "\t\telse",
        "\t\t{",
        "\t\t\texit;",
        "\t\t}",
        "\t}\r",
        "\t",
        "\tsize_outage = false;",
        "\t// is_crit() and is_grid_outage() defined on Grid Outage form",
        "\tif ( is_crit() && is_grid_outage() ) {",
        "\t\tsize_outage = value('reopt_consider_outage');",
        "\t}",
        "\t",
        "\tbatt_kw_original = value('batt_bank_power');",
        "\tbatt_kwh_original = value('batt_bank_size_ui');",
        "\tdispatch_original_mode = value('batt_dispatch_choice_ui'); //store original batt dispatch mode",
        "\tcustom_dispatch_original = value('batt_custom_dispatch');\r",
        "\t",
        "\t// temporarily size to 0 to remove battery costs from total_installed_cost for REopt API call",
        "\tvalue('batt_bank_power', 0);",
        "\tvalue('batt_bank_size_ui', 0);\r",
        "\t\r",
        "\tcustom_dispatch = value('batt_custom_dispatch');\r",
        "\tif (#custom_dispatch != #(${load})) {",
        "\t\tvalue('batt_custom_dispatch', ${load}); //reset size of dispatch array to match load and wf",
        "\t}\r",
        "\t",
        "\treopt = reopt_size_battery(size_outage);",
        "\r",
        "\t// avoid callback error if reopt fails to return valid result\r",
        "\tif (typeof(reopt)!=\"table\")\r",
        "\t{\r",
        "\t\tmsg = 'Callback function reopt_size_battery() did not return a table.';\r",
        "\t\tif (typeof(reopt) == \"string\")\r",
        "\t\t{\r",
        "\t\t\tmsg = reopt;\r",
        "\t\t}\r",
        "\t\tmsgbox('REopt Error\\n' + reopt);\r",
        "\t\texit;\r",
        "\t}\r",
        "\t",
        "\tif (reopt.error)",
        "\t{\r",
        "\t\tif (strlen(reopt.error) > 0)",
        "\t\t{",
        "\t\t\tmsgbox(reopt.error);",
        "\t\t}",
        "\t\telse",
        "\t\t{",
        "\t\t\tmsgbox('REopt optimization failed.\\nThe REopt API may have timed out.');",
        "\t\t}",
        "\t\treset_original_inputs();\r",
        "\t\texit;",
        "\t}",
        "\t",
        "\ty = reopt.response;",
        "",
        "\tif (y.outputs == null)",
        "\t{",
        "\t\tmsgbox('REopt optimization failed.\\nTry again later or try another system design.');",
        "\t\treset_original_inputs();\r",
        "\t\texit;",
        "\t}",
        "\r",
        "\tif (y.status == 'error')\r",
        "\t{\r",
        "\t\tmsgbox('REopt optimization failed.\\n' + y.messages.errors);\r",
        "\t\treset_original_inputs();\r",
        "\t\texit;\r",
        "\t}",
        "\telseif (y.status != 'optimal')",
        "\t{",
        "\t\tmsgbox('REopt could not find optimal battery size and dispatch.\\nOptimization status: ' + y.status);",
        "\t\treset_original_inputs();\r",
        "\t\texit;",
        "\t}",
        "",
        "\tpv = y.outputs.PV;",
        "\tbatt = y.outputs.ElectricStorage;",
        "\telec = y.outputs.ElectricUtility;",
        "",
        "\tif (batt == null || (batt.size_kw == null && batt.size_kwh == null))",
        "\t{",
        "\t\tapply_str = 'Optimal capacity: ' + to_string(0) + ",
        "\t\t\t' kWh\\nOptimal power: ' + to_string(0) + ' kW\\n\\nApply results?';",
        "\t\tapply = yesno('REopt found that optimal system has no storage.\\n' + apply_str);",
        "\t\tif (apply)",
        "\t\t{",
        "\t\t\tvalue('batt_bank_power', 0.0);",
        "\t\t\tvalue('batt_bank_size_ui', 0.0);",
        "\t\t\trefresh();\r",
        "\t\t}",
        "\t\telse",
        "\t\t{",
        "\t\t\treset_original_inputs();\r",
        "\t\t}",
        "\t\texit;",
        "\t}",
        "",
        "\tapply_str = 'Optimal capacity: ' + to_string(batt.size_kwh) + ",
        "\t\t' kWh\\nOptimal power: ' + to_string(batt.size_kw) + ' kW\\n\\nChange ' +",
        "\t\t'battery capacity, battery power, and battery dispatch battery power target inputs with to optimal values from REopt?\\n\\nClick Yes to change the inputs. Click No to continue without changing inputs.';",
        "\tapply = yesno('Success! REopt found an optimal battery size and time series dispatch schedule.\\n' + apply_str);",
        "\tif ( apply )",
        "\t{",
        "\t\tvalue('batt_bank_power', batt.size_kw);",
        "\t\tvalue('batt_bank_size_ui', batt.size_kwh);",
        "\t\trefresh();",
        "\t}",
        "\telse",
        "\t{",
        "\t\treset_original_inputs();\r",
        "\t\texit;",
        "\t}",
        "",
        "\tif ((batt.size_kw == 0 && batt.size_kwh == 0) || !apply)",
        "\t{",
        "\t\texit;",
        "\t}",
        "",
        "\tbatt_to_grid = null;",
        "\tif (batt.year_one_to_grid_series_kw)",
        "\t{",
        "\t\tbatt_to_grid = batt.year_one_to_grid_series_kw;",
        "\t}",
        "\tbatt_to_load = batt.storage_to_load_series_kw;",
        "\tpv_charge = pv.electric_to_storage_series_kw;",
        "\tgrid_charge = elec.electric_to_storage_series_kw;",
        "",
        "\tvalue('batt_dispatch_choice_ui', 2); // make sure UI input is consistent with SSC input",
        "\tvalue('batt_dispatch_excl', value('batt_dispatch_choice_ui'));",
        "\t",
        "\tload = ${load};",
        "\t",
        "\tdispatch = alloc(#load);",
        "\tfor (i=0; i<#grid_charge; i++)",
        "\t{",
        "\t\tif (batt_to_grid)",
        "\t\t{",
        "\t\t\tdischarge = batt_to_grid[i] + batt_to_load[i];",
        "\t\t} ",
        "\t\telse",
        "\t\t{",
        "\t\t\tdischarge = batt_to_load[i];",
        "\t\t}",
        "\t\tcharge = -pv_charge[i] - grid_charge[i];",
        "\t\t",
        "\t\tdispatch[i] = discharge + charge;",
        "\t}",
        "",
        "\tvalue('batt_custom_dispatch', dispatch);",
        "\tvalue('batt_dispatch_charge_only_system_exceeds_load', false);",
        "\tvalue('batt_dispatch_discharge_only_load_exceeds_system', false);",
        "\trefresh();\r",
        "\t\r",
        "\tif (size_outage) {\r",
        "\t\tmsgbox('REopt found an optimal PV size of ' + to_string(pv.size_kw) + ' kW\\n' +\r",
        "\t\t\t'This will need to be applied manually.' );\r",
        "\t}",
        "",
        "};",
        "",
        "function enable_consider_grid_outage() {",
        "\tenable('reopt_consider_outage',  is_crit() && is_grid_outage());\r",
        "}\r",
        "\r",
        "function reset_original_inputs() {\r",
        "\t\tvalue('batt_dispatch_choice_ui',dispatch_original_mode); //make sure UI input is consistent with SSC input\r",
        "\t\tvalue('batt_custom_dispatch',custom_dispatch_original);\r",
        "\t\tvalue('batt_bank_power', batt_kw_original);\r",
        "\t\tvalue('batt_bank_size_ui', batt_kwh_original); \r",
        "\t\trefresh();\r",
        "}"
    ]
}