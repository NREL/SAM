PV3 Subarray 1 Spacing
742
411
14
Label

1
13
Name
5
11
Label121113
X
3
4294966932
Y
3
237
Width
3
284
Height
3
21
Tool Tip
5
0
Caption
5
28
Number of Modules along Side
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
0
AlignRight
2
1
AlignTop
2
0
Numeric

1
17
Name
5
11
module_area
X
3
630
Y
3
267
Width
3
60
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
4
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Image

1
8
Name
5
9
object 12
X
3
393
Y
3
45
Width
3
337
Height
3
108
Tool Tip
5
0
Image
7
PV3 Subarray 1 Spacing_object 12.png
Centered
2
1
Label

1
13
Name
5
8
object 7
X
3
12
Y
3
12
Width
3
708
Height
3
24
Tool Tip
5
0
Caption
5
99
Subarray spacing inputs are only used when a self-shading model or the snow loss model are enabled.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
0
AlignRight
2
0
AlignTop
2
0
Image

1
8
Name
5
20
self_shading_diagram
X
3
354
Y
3
159
Width
3
337
Height
3
106
Tool Tip
5
0
Image
7
PV3 Subarray 1 Spacing_self_shading_diagram.png
Centered
2
1
Numeric

1
17
Name
5
17
subarray1_gcr_ref
X
3
207
Y
3
96
Width
3
124
Height
3
21
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
3
Choice

1
9
Name
5
20
subarray1_mod_orient
X
3
207
Y
3
120
Width
3
125
Height
3
21
Tool Tip
5
0
Items
6
0
Selection
3
4294967295
TabOrder
3
2
Numeric

1
17
Name
5
15
subarray1_nmodx
X
3
294
Y
3
69
Width
3
100
Height
3
21
Tool Tip
5
0
Value
1
0
Mode
3
0
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
3
Numeric

1
17
Name
5
15
subarray1_nmody
X
3
291
Y
3
45
Width
3
100
Height
3
21
Tool Tip
5
0
Value
1
0
Mode
3
0
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
3
Choice

1
9
Name
5
20
subarray1_shade_mode
X
3
207
Y
3
144
Width
3
125
Height
3
21
Tool Tip
5
0
Items
6
3
None
Standard (non-linear)
Thin film (linear)
Selection
3
4294967295
TabOrder
3
4294967295
Label

1
13
Name
5
15
ui_msg_selfshad
X
3
15
Y
3
297
Width
3
678
Height
3
84
Tool Tip
5
0
Caption
5
0
TextColour
4
255
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
0
AlignRight
2
0
AlignTop
2
1
Numeric

1
17
Name
5
24
ui_subarray1_length_side
X
3
207
Y
3
243
Width
3
124
Height
3
21
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
3
Numeric

1
17
Name
5
18
ui_subarray1_nrows
X
3
231
Y
3
195
Width
3
100
Height
3
21
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
17
Name
5
24
ui_subarray1_row_spacing
X
3
207
Y
3
219
Width
3
124
Height
3
21
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
3

21
module_area
3
1
Module area
mÂ²
Shading and Snow
0
8
1
1
1
1
0
Default
shading_3d_scene
3
6
Open 3D shade calculator
 
Shading and Snow
0
0
1
6
0
Default
subarray1_gcr_ref
3
1
GCR
m
Shading and Snow
0
0
1
1
1
1
0.3
Default
subarray1_mod_orient
3
1
Module orientation
 
Shading and Snow
19
Portrait| Landscape
2
1
1
1
1
0
Choice
subarray1_nmodx
3
1
Number of modules along bottom of row
 
Shading and Snow
0
2
1
1
1
1
8
Numeric
subarray1_nmody
3
1
Number of modules along side of row
 
Shading and Snow
0
2
1
1
1
1
2
Numeric
subarray1_ref_nmodules
3
1
Number of modules 1
 
Shading and Snow
0
9
1
1
1
1
0
Default
subarray1_shade_mode
3
1
Self shading mode
 
Shading and Snow
45
None|Standard (Non-linear)|Thin film (Linear)
2
1
1
1
1
0
Choice
subarray1_shading
3
5
Edit shading losses 1
 
Shading and Snow
0
3
1
5
1
0
ShadingFactors
ui_subarray1_length_side
3
1
Length of subarray side
 
Shading and Snow
0
8
1
1
1
1
0
Default
ui_subarray1_nrows
3
1
Number of rows
 
Shading and Snow
0
8
1
1
1
1
0
Default
ui_subarray1_row_spacing
3
1
Row spacing
m
Shading and Snow
0
8
1
1
1
1
0
Default
ui_subarray2_length_side
3
1
Length of subarray side 2
 
Shading and Snow
0
9
1
1
1
1
0
Default
ui_subarray2_nrows
3
1
Number of rows 2
 
Shading and Snow
0
9
1
1
1
1
0
Default
ui_subarray2_row_spacing
3
1
Row spacing 2
m
Shading and Snow
0
9
1
1
1
1
0
Default
ui_subarray3_length_side
3
1
Length of subarray side 3
 
Shading and Snow
0
9
1
1
1
1
0
Default
ui_subarray3_nrows
3
1
Number of rows 3
 
Shading and Snow
0
9
1
1
1
1
0
Default
ui_subarray3_row_spacing
3
1
Row spacing 3
m
Shading and Snow
0
9
1
1
1
1
0
Default
ui_subarray4_length_side
3
1
Length of subarray side 4
 
Shading and Snow
0
9
1
1
1
1
0
Default
ui_subarray4_nrows
3
1
Number of rows 4
 
Shading and Snow
0
9
1
1
1
1
0
Default
ui_subarray4_row_spacing
3
1
Row spacing 4
m
Shading and Snow
0
9
1
1
1
1
0
Default

3482
equations{'ui_subarray1_length_side'} = define() {
	o=${subarray1_mod_orient};
	n=${subarray1_nmody};
	a=${module_area};
	if (o==0) l=1.7*n; //portrait
	else l=a/1.7*n; //landscape
	return l;
};
equations{'ui_subarray2_length_side'} = define() {
	o=${subarray2_mod_orient};
	n=${subarray2_nmody};
	a=${module_area};
	if (o==0) l=1.7*n; //portrait
	else l=a/1.7*n; //landscape
	return l;
};
equations{'ui_subarray3_length_side'} = define() {
	o=${subarray3_mod_orient};
	n=${subarray3_nmody};
	a=${module_area};
	if (o==0) l=1.7*n; //portrait
	else l=a/1.7*n; //landscape
	return l;
};
equations{'ui_subarray4_length_side'} = define() {
	o=${subarray4_mod_orient};
	n=${subarray4_nmody};
	a=${module_area};
	if (o==0) l=1.7*n; //portrait
	else l=a/1.7*n; //landscape
	return l;
};

equations{'ui_subarray1_row_spacing'} = define() {
	a=${module_area};
	w=a/1.7; //module width
	l=a/w; //module length
	s=w*${subarray1_nmody}; //length of side, landscape
	if (${subarray1_mod_orient}==0) s=l*${subarray1_nmody};//length of side, portrait
	return s/${subarray1_gcr_ref};
};

equations{'ui_subarray2_row_spacing'} = define() {
	a=${module_area};
	w=a/1.7; //module width
	l=a/w; //module length
	s=w*${subarray2_nmody}; //length of side, landscape
	if (${subarray2_mod_orient}==0) s=l*${subarray2_nmody};//length of side, portrait
	return s/${subarray2_gcr_ref};
};
equations{'ui_subarray3_row_spacing'} = define() { 
	a=${module_area};
	w=a/1.7; //module width
	l=a/w; //module length
	s=w*${subarray3_nmody}; //length of side, landscape
	if (${subarray3_mod_orient}==0) s=l*${subarray3_nmody};//length of side, portrait
	return s/${subarray3_gcr_ref};
};
equations{'ui_subarray4_row_spacing'} = define() { 
	a=${module_area};
	w=a/1.7; //module width
	l=a/w; //module length
	s=w*${subarray4_nmody}; //length of side, landscape
	if (${subarray4_mod_orient}==0) s=l*${subarray4_nmody};//length of side, portrait
	return s/${subarray4_gcr_ref};
};

equations{ 'ui_subarray1_nrows' } = define() {
	return ${subarray1_ref_nmodules}/${subarray1_nmodx}/${subarray1_nmody};
};
equations{ 'ui_subarray2_nrows' } = define() {
	return ${subarray2_ref_nmodules}/${subarray2_nmodx}/${subarray2_nmody};
};
equations{ 'ui_subarray3_nrows' } = define() {
	return ${subarray3_ref_nmodules}/${subarray3_nmodx}/${subarray3_nmody};
};
equations{ 'ui_subarray4_nrows' } = define() {
	return ${subarray4_ref_nmodules}/${subarray4_nmodx}/${subarray4_nmody};
};

equations{ 'module_area' } = define() {
return ?${module_model}
	[
		${spe_area},
		${cec_area},
		${6par_area},
		${snl_area},
		${sd11par_area}
	] ;
};

equations{ 'subarray1_ref_nmodules' } = define() {
	return ${subarray1_nstrings} * ${modules_per_string};
};

equations{ 'subarray2_ref_nmodules' } = define() {
	if(${subarray2_enable} == 0)
		return 0;
	else
		return ${subarray2_nstrings} * ${modules_per_string};
};

equations{ 'subarray3_ref_nmodules' } = define() {
	if(${subarray3_enable} == 0)
		return 0;
	else
		return ${subarray3_nstrings} * ${modules_per_string};
};

equations{ 'subarray4_ref_nmodules' } = define() {
	if(${subarray4_enable} == 0)
		return 0;
	else
		return ${subarray4_nstrings} * ${modules_per_string};
};

equations{ 'subarray1_gcr_ref' } = define() {
	return ${subarray1_gcr};
};

equations{ 'subarray2_gcr_ref' } = define() {
	return ${subarray2_gcr};
};

equations{ 'subarray3_gcr_ref' } = define() {
	return ${subarray3_gcr};
};

equations{ 'subarray4_gcr_ref' } = define() {
	return ${subarray4_gcr};
};
7114
//just run this function anytime anything relevant changes
function input_enabling()
{
	msg='';
	property('ui_msg_selfshad','Caption',msg);
	
	enable_module_area = false;
	
	msg_snow = '';
	if ( isnan(value('annual_snow')) == true && value('en_snow_model') == 1 ) {
		msg_snow = 'Weather file has no snow data. Simulation will fail.';
	}
	property('ui_msg_snow','Caption',msg_snow);

	for(i=1; i<=4; i++)
	{
		prefix = 'subarray' + i + '_';
		//is subarray enabled?
		en1 = false;
		if (i==1)
			en1 = true;
		else
			if (value(prefix + 'enable') == 1)
				en1 = true;
		//is it the correct type of tracking?
		en2 = false;
		if (value(prefix + 'track_mode') == 0 || //fixed tilt
			(value(prefix + 'track_mode') == 1 && value(prefix + 'backtrack') == 0)) //one-axis tracking w/o backtracking
			en2 = true;
		//has self-shading been selected?
		en3 = false;
		if (value(prefix + 'shade_mode') == 1 //self-shaded selected
			|| value(prefix + 'shade_mode') == 2) //linear shading selected
			en3 = true;
		
		//has snow model been activated?
		en4 = false;
		if( value("en_snow_model") == 1 ) en4 = true;
		
		//display message self shading is enabled and nrows is not an integer
		//or there is only one row
		if (en3 == true ) {
			nrows = value('ui_' + prefix + 'nrows');
			if ( nrows == 1 ) msg = msg + 'Subarray ' + i + ' has only one row.\n';
		    if ( nrows-to_int(nrows) != 0 ) msg = msg + 'The number of rows in subarray ' + i + ' is not an integer.\n';
		}

		//display message if snow model is enabled and nrows is not an integer
		if (en4 == true  && en3 == false) {
			nrows = value('ui_' + prefix + 'nrows');
		    if ( nrows-to_int(nrows) != 0 ) msg = msg + 'The number of rows in subarray ' + i + ' is not an integer.\n';
		}

		//now enable all the inputs
		enable(prefix + 'shading', en1);
		enable(prefix + 'shade_mode', (en1 && en2));
		if (en3) enable_module_area = true;
		enable(prefix + 'mod_orient', en1 && en2 && en3);
		enable('ui_' + prefix + 'length_side', en1 && en2 && en3);
		enable('ui_' + prefix + 'nrows', (en1 && en2 && en3) || (en1 && en4) );
		enable(prefix + 'ref_nmodules', (en1 && en2 && en3) || (en1 && en4) );
		enable(prefix + 'gcr_ref', (en1 && en2 && en3));
		enable('ui_' + prefix + 'row_spacing', (en1 && en2 && en3));
		enable(prefix + 'nmodx', (en1 && en2 && en3) || (en1 && en4) );
		enable(prefix + 'nmody', (en1 && en2 && en3) || (en1 && en4) );
	}
	enable('module_area', enable_module_area);
    if (msg!="") msg = msg + 'Adjust the number of modules to correct the problem.'; 
	property('ui_msg_selfshad','Caption',msg);

}

on_load{'PV Shading'} = define() { input_enabling(); };
on_change{'subarray1_shade_mode'} = define() { input_enabling(); };
on_change{'subarray2_shade_mode'} = define() { input_enabling(); };
on_change{'subarray3_shade_mode'} = define() { input_enabling(); };
on_change{'subarray4_shade_mode'} = define() { input_enabling(); };
on_change{'subarray1_nmody'} = define() { input_enabling(); };
on_change{'subarray2_nmody'} = define() { input_enabling(); };
on_change{'subarray3_nmody'} = define() { input_enabling(); };
on_change{'subarray4_nmody'} = define() { input_enabling(); };
on_change{'subarray1_nmodx'} = define() { input_enabling(); };
on_change{'subarray2_nmodx'} = define() { input_enabling(); };
on_change{'subarray3_nmodx'} = define() { input_enabling(); };
on_change{'subarray4_nmodx'} = define() { input_enabling(); };
on_change{'en_snow_model'} = define() { input_enabling(); };

on_change{'edit_3d_scene'} = define() {
	
	minute_step = 60;
	if (varinfo("wf_nrecords"))
	{
		nrec = value("wf_nrecords");
		if (!isnan(nrec) && (nrec > 0))
		{
			minute_step = 60 * 8760 / nrec;
		}
	}
	
	x = editscene3d( 'shading_3d_scene', 
		value('lat'), value('lon'), value('tz'), 
		value('city') + ', ' + value('state') , minute_step , true);
	
	if ( x.ierr == 0 )
	{
		n_subarrays = 1; // subarray 1 always enabled.
		if (value("subarray2_enable") == 1)
			n_subarrays++;
		if (value("subarray3_enable") == 1)
			n_subarrays++;
		if (value("subarray4_enable") == 1)
			n_subarrays++;
	
		if (( x.nsubarrays > 1 ) || ( n_subarrays > 1 ))
		{
		// check that nsubarrays = number enabled
			
			msg="";
			if (x.nsubarrays != n_subarrays)
				msg = "WARNING: You have " + n_subarrays + " subarrays enabled and " 
				+ x.nsubarrays + " subarrays in the 3D scene.\n";
				
			msg += "Update timeseries shading and diffuse losses for " 
				+ x.nsubarrays + " subarrays with calculated values from 3D scene?\n\n";
		
		
			if( yesno(msg))
			{
	
				for (i=0;i<4;i++)
				{
					pre = 'subarray' + to_string(i+1);
					
					timestep = x{ pre };
					if ( timestep == null || typeof(timestep) != 'array' ) continue;
					
					// check parallel strings = number of subarray strings
					if (value(pre + "_nstrings") != #timestep[0])
					{
						if (!yesno("WARNING: For " + pre + ", you specifed " 
						+ value(pre + "_nstrings") + " strings and have " + #timestep[0] 
						+ " strings in the 3D scene.\nDo you wish to continue with the 3D scene values?.\n\n"))
							continue;
					}
					
					shad = value( pre+'_shading');
					shad.en_timestep = true;
					shad.timestep = timestep;
					// bugfix 4/20/16
					shad.string_option=0; // default to shading database
					
					// diffuse
					shad.en_diff = true;
					shad.diff = x.diffuse[i];
					value( pre+'_shading', shad );	
				}
				
			}
			/* no longer an option to update first array for multiple
			else if (yesno( 'Update timeseries shading and diffuse losses for the array (in subarray 1)?') )
			{
				timestep = x{ 'subarray1' };
				if ( timestep == null || typeof(timestep) != 'array') // || #mxh != 12 )
				{
					msgbox('Shading loss table was not specified correctly.\n\n'
					 + to_string(timestep) );
					return;
				}
				
				shad = value( 'subarray1_shading');
				shad.en_timestep = true;
				shad.timestep = timestep;
			
					// diffuse
				shad.en_diff = true;
				shad.diff = x.diffuse[0];

				value( 'subarray1_shading', shad );	
			}
			*/
			return;
		}
		
		else if( x.nsubarrays <= 1 
			&& yesno( 'Update timeseries shading and diffuse losses for the array (in subarray 1)?') )
		{
			pre = 'subarray1';
			timestep = x{ pre };
			if ( timestep == null || typeof(timestep) != 'array')// || #mxh != 12 )
			{
				msgbox('Shading loss table was not specified correctly.\n\n'
				 + to_string(timestep) );
				return;
			}
	
			// check parallel strings = number of subarray strings
			if (value(pre + "_nstrings") != #timestep[0])
			{
				if (!yesno("WARNING: For subarray1, you specifed " 
				+ value(pre + "_nstrings") + " strings and have " + #timestep[0] 
				+ " strings in the 3D scene.\nDo you wish to continue with the 3D scene values?.\n\n"))
					return;
			}
			
			shad = value( 'subarray1_shading');
			shad.en_timestep = true;
			shad.timestep = timestep;
			// bugfix 4/20/16
			shad.string_option=0; // default to shading database
		
				// diffuse
			shad.en_diff = true;
			shad.diff = x.diffuse[0];

			value( 'subarray1_shading', shad );	
			return;
		}
	}
	else
	{
		msgbox('Internal error: ' + x.message);
	}
};