Battery Model Simple with REopt
589
390
13
GroupBox

1
8
Name
5
12
Battery Bank
X
3
9
Y
3
0
Width
3
572
Height
3
387
Tool Tip
5
0
Caption
5
13
Battery Bank 
Bold
2
1
DataArray

1
10
Name
5
20
batt_custom_dispatch
X
3
246
Y
3
138
Width
3
90
Height
3
30
Tool Tip
5
0
Mode
3
1
Label
5
21
Battery Dispatch (kW)
Description
5
123
For each simulation time step enter a rate in kW, less than zero to charge the battery, and greater than zero to discharge.
TabOrder
3
5
Label

1
13
Name
5
19
batt_dispatch_label
X
3
42
Y
3
111
Width
3
510
Height
3
24
Tool Tip
5
0
Caption
5
75
Input a custom battery power dispatch (<0 for charging, >0 for discharging)
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Choice

1
9
Name
5
21
batt_simple_chemistry
X
3
375
Y
3
24
Width
3
200
Height
3
24
Tool Tip
5
0
Items
6
2
Lead Acid
Lithium Ion
Selection
3
4294967295
TabOrder
3
3
Choice

1
9
Name
5
20
batt_simple_dispatch
X
3
375
Y
3
51
Width
3
200
Height
3
24
Tool Tip
5
0
Items
6
3
Peak Shaving (look ahead)
Peak Shaving (look behind)
Custom Dispatch
Selection
3
4294967295
TabOrder
3
4
Numeric

1
17
Name
5
14
batt_simple_kw
X
3
132
Y
3
51
Width
3
90
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
2
Numeric

1
17
Name
5
15
batt_simple_kwh
X
3
132
Y
3
24
Width
3
90
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
1
Label

1
13
Name
5
15
batt_size_label
X
3
30
Y
3
210
Width
3
525
Height
3
53
Tool Tip
5
0
Caption
5
227
This option sends information about the system design, costs, electricity rates, and load to the online Reopt Lite API, which calculates an optimal battery capacity and custom dispatch to minimize the project net present value.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Button

1
8
Name
5
10
call_reopt
X
3
132
Y
3
309
Width
3
306
Height
3
30
Tool Tip
5
0
Caption
5
40
Get battery size and dispatch from REopt
TabOrder
3
7
Hyperlink

1
9
Name
5
9
object 14
X
3
30
Y
3
348
Width
3
366
Height
3
24
Tool Tip
5
0
Caption
5
24
Go to REopt Lite website
URL
5
27
https://reopt.nrel.gov/tool
TabOrder
3
4294967295
Divider

1
10
Name
5
9
object 21
X
3
24
Y
3
93
Width
3
543
Height
3
16
Tool Tip
5
0
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
15
Custom Dispatch
Bold
2
1
GroupBox

1
8
Name
5
8
object 4
X
3
12
Y
3
192
Width
3
564
Height
3
189
Tool Tip
5
0
Caption
5
38
Optimal Sizing and Dispatch from REopt
Bold
2
1
Label

1
13
Name
5
8
object 7
X
3
30
Y
3
267
Width
3
525
Height
3
39
Tool Tip
5
0
Caption
5
140
REopt uses the latitude and longitude from SAM to access its own weather file, which may be different from the one SAM uses for simulations.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1

6
batt_custom_dispatch
3
2
Battery dispatch
kW
Simple Battery with REopt
23
Battery Dispatch (kW)|1
0
1
2
1
1
0
DataArray
batt_simple_chemistry
3
1
Battery chemistry
 
Simple Battery with REopt
0
2
1
1
1
1
0
Choice
batt_simple_dispatch
3
1
Battery dispatch
 
Simple Battery with REopt
0
2
1
1
1
1
0
Choice
batt_simple_kw
3
1
Battery power
kW
Simple Battery with REopt
0
2
1
1
1
1
3
Numeric
batt_simple_kwh
3
1
Battery capacity
kWh
Simple Battery with REopt
0
2
1
1
1
1
10
Numeric
batt_simple_meter_position
3
1
Battery meter position
 
Simple Battery with REopt
0
8
1
1
1
1
0
Default

249
equations{'batt_simple_meter_position'} = define()
{
	// behind the meter default
	batt_meter_position = 0;
	financial_model = financing();
	
	if (!strcmp(financial_model, 'Single Owner'))
		batt_meter_position = 1;

	return batt_meter_position;
};

3890
on_load{'Battery Model Simple with REopt'} = define(){
	enable("batt_custom_dispatch", (value("batt_simple_dispatch") == 2));
};

on_change{"batt_simple_dispatch"} = define(){
	enable("batt_custom_dispatch", (value("batt_simple_dispatch") == 2));
};

on_change{'call_reopt'} = define(){
	dispatch_original_mode = value("batt_simple_dispatch"); //save original dispatch mode
	batt_kw_original = value("batt_simple_kw");
	batt_kwh_original = value("batt_simple_kwh");

	wf_len = 60 / ${ui_step_minutes} * 8760;
	load_len = #(${load});
	if (wf_len != load_len) {
		msgbox("Weather file and load number of records must be the same.");
		exit;
	}
	if (load_len != 8760 * 4 && load_len != 8760 * 2 && load_len != 8760) {
		msgbox("Simulation timestep must be 15, 30 or 60 minutes.");
		exit;
	}
	
	// reset size to 0 to remove battery costs from total_installed_cost
	value("batt_simple_kw", 0);
	value("batt_simple_kwh", 0); 
	value("batt_simple_dispatch",0); //set dispatch mode to 0 to run ReOPT
	
	reopt = reopt_size_battery();
	y = reopt.response;
	if (reopt.error){
		if (strlen(reopt.error) > 0){
			msgbox(reopt.error);
		}
		else{
			msgbox("ReOpt Lite API timed out. Please try again later.");
		}
		value("batt_simple_dispatch",dispatch_original_mode); //restore original dispatch mode for early exit from ReOPT
		value("batt_simple_kw", batt_kw_original);
		value("batt_simple_kwh", batt_kwh_original); 
		exit;
	}

	if (y.outputs == null || y.outputs.Scenario == null){
		msgbox("Error in ReOpt response. Try again later or try another system design.");
		value("batt_simple_dispatch",dispatch_original_mode); //restore original dispatch mode for early exit from ReOPT
		value("batt_simple_kw", batt_kw_original);
		value("batt_simple_kwh", batt_kwh_original); 
		exit;
	}
	
	pv = y.outputs.Scenario.Site.PV;
	batt = y.outputs.Scenario.Site.Storage;
	elec = y.outputs.Scenario.Site.ElectricTariff;

	if (batt.size_kw == null && batt.size_kwh == null){
		apply_str = "Apply results?\nOptimal capacity (kWh): " + to_string(0) + 
			"\nOptimal power (kW): " + to_string(0) + "\n\nReplace " + 
			"'Battery capacity' and 'Battery power' with results from REopt?";
		apply = yesno(apply_str);
		if (apply){
			value('batt_simple_kw', 0.0);
			value('batt_simple_kwh', 0.0);
		}
		value("batt_simple_dispatch",dispatch_original_mode); //restore original dispatch mode for early exit from ReOPT
		value("batt_simple_kw", batt_kw_original);
		value("batt_simple_kwh", batt_kwh_original); 
		exit;
	}

	apply_str = "Apply results?\nOptimal capacity (kWh): " + to_string(batt.size_kwh) + 
		"\nOptimal power (kW): " + to_string(batt.size_kw) + "\n\nReplace " +
		"'Battery capacity', 'Battery power', and 'Bustom dispatch' with results from REopt?";
	apply = yesno(apply_str);
	if (!apply) {
		value("batt_simple_dispatch",dispatch_original_mode); //restore original dispatch mode for early exit from ReOPT
		value("batt_simple_kw", batt_kw_original);
		value("batt_simple_kwh", batt_kwh_original); 
		exit;
	}
	
	value('batt_simple_kw', batt.size_kw);
	value('batt_simple_kwh', batt.size_kwh);
	
	if (batt.size_kw == 0 && batt.size_kwh == 0) {
		value("batt_simple_dispatch",dispatch_original_mode); //restore original dispatch mode for early exit from ReOPT
		exit;
	}
	
	batt_to_grid = null;
	if (batt.year_one_to_grid_series_kw)
		batt_to_grid = batt.year_one_to_grid_series_kw;
	batt_to_load = batt.year_one_to_load_series_kw;
	pv_charge = pv.year_one_to_battery_series_kw;
	grid_charge = elec.year_one_to_battery_series_kw;


	value('batt_simple_dispatch', 2);

	load = ${load};
	
	dispatch = alloc(#load);
	for (i=0; i<#grid_charge; i++){
		if (batt_to_grid){
			discharge = batt_to_grid[i] + batt_to_load[i];
		} else{
			discharge = batt_to_load[i];
		}
		charge = -pv_charge[i] - grid_charge[i];
		
		dispatch[i] = discharge + charge;
	}

	value('batt_custom_dispatch', dispatch);
};