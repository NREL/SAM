Marine Tidal Resource
996
1235
14
Button

1
8
Name
5
22
btn_add_remove_folders
X
3
636
Y
3
357
Width
3
252
Height
3
30
Tool Tip
5
0
Caption
5
34
Add/remove weather file folders...
TabOrder
3
2
Button

1
8
Name
5
19
btn_refresh_library
X
3
636
Y
3
387
Width
3
252
Height
3
30
Tool Tip
5
0
Caption
5
15
Refresh library
TabOrder
3
3
Button

1
8
Name
5
19
btn_view_tidal_data
X
3
888
Y
3
321
Width
3
94
Height
3
28
Tool Tip
5
0
Caption
5
9
View Data
TabOrder
3
4294967295
Label

1
13
Name
5
15
caption_library
X
3
18
Y
3
54
Width
3
855
Height
3
36
Tool Tip
5
0
Caption
5
239
SAM's default library comes with only a few weather files to help you get started. Use the download tools below to build a library of locations you frequently model. Once you build your library, it is available for all of your work in SAM.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
GroupBox

1
8
Name
5
13
group_library
X
3
12
Y
3
3
Width
3
974
Height
3
418
Tool Tip
5
0
Caption
5
28
Wave Energy Resource Library
Bold
2
1
Label

1
13
Name
5
13
label_library
X
3
18
Y
3
30
Width
3
860
Height
3
21
Tool Tip
5
0
Caption
5
128
Click a name in the list to choose a file from the library. Type a few letters of the name in the search box to filter the list.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
MultilineText

1
11
Name
5
19
library_folder_list
X
3
33
Y
3
357
Width
3
588
Height
3
60
Tool Tip
5
0
Text
5
37
List of Wave Resource library folders
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Library

1
8
Name
5
14
location_tidal
X
3
21
Y
3
93
Width
3
965
Height
3
216
Tool Tip
5
0
Library
5
17
TidalResourceData
Fields
5
93
Location ID,Distance to shore,Water depth,Latitude,Longitude,Year,Time Zone,Data Source,Notes
GroupBox

1
8
Name
5
8
object 4
X
3
12
Y
3
414
Width
3
974
Height
3
806
Tool Tip
5
0
Caption
5
14
Tidal Resource
Bold
2
1
Label

1
13
Name
5
8
object 7
X
3
432
Y
3
954
Width
3
537
Height
3
63
Tool Tip
5
0
Caption
5
99
Sum of values in the Probability Distribution column must be equal to ~1 (between 0.995 and 1.005).
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Numeric

1
17
Name
5
15
probability_sum
X
3
789
Y
3
906
Width
3
90
Height
3
24
Tool Tip
5
0
Value
1
0
Mode
3
1
Format
3
0
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
DataMatrix

1
27
Name
5
14
tidal_resource
X
3
18
Y
3
435
Width
3
400
Height
3
775
Tool Tip
5
0
PasteAppendRows
2
0
PasteAppendCols
2
0
ShowButtons
2
1
ShowRows
2
1
ShowRowLabels
2
0
RowLabels
5
0
ShadeR0C0
2
0
VerticalLabel
5
0
HorizontalLabel
5
0
ShadeC0
2
0
ShowCols
2
0
ShowColLabels
2
1
ColLabels
5
39
Velocity (m/s),Probability Distribution
NumRowsLabel
5
5
Rows:
NumColsLabel
5
5
Cols:
Layout
3
1
ChoiceColumn
3
4294967295
Choices
5
15
Choice1,Choice2
HideColumn
3
4294967295
ShowColumn
3
4294967295
ColorMap
2
0
Plot

1
6
Name
5
25
tidal_resource_curve_plot
X
3
423
Y
3
438
Width
3
540
Height
3
380
Tool Tip
5
0
TextEntry

1
11
Name
5
26
tidal_resource_filename_ts
X
3
198
Y
3
321
Width
3
684
Height
3
24
Tool Tip
5
0
Text
5
0
Editable
2
1
ForeColour
4
128
0
64
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295

5
library_folder_list
3
4
 
 
 
0
0
1
4
9
<invalid>
MultilineText
location_tidal
3
4
 
 
TidalResourceData
0
0
1
4
9
<invalid>
Library
probability_sum
3
1
Sum of Probability Distribution Values
 
ME Tidal Resource
0
8
1
1
1
1
0
Default
tidal_resource
3
3
Frequency distribution of resource as a function of stream speeds
 
ME Tidal Resource
0
3
1
3
34
2
0 0.009 
0.1 0.031 
0.2 0.042 
0.3 0.044 
0.4 0.048 
0.5 0.049 
0.6 0.053 
0.7 0.051 
0.8 0.052 
0.9 0.056 
1 0.05 
1.1 0.052 
1.2 0.05 
1.3 0.048 
1.4 0.047 
1.5 0.043 
1.6 0.042 
1.7 0.04 
1.8 0.034 
1.9 0.031 
2 0.026 
2.1 0.023 
2.2 0.02 
2.3 0.016 
2.4 0.013 
2.5 0.011 
2.6 0.007 
2.7 0.005 
2.8 0.004 
2.9 0.002 
3 0.001 
3.1 0 
3.2 0 
3.3 0 

DataMatrix
tidal_resource_filename_ts
3
4
 
 
 
0
0
1
4
9
<invalid>
TextEntry

184
equations {'probability_sum'} = define() {

	resourceMatrix = ${tidal_resource};
	psum = 0;
	for (i=0; i<#resourceMatrix; i++)
	{
		psum += resourceMatrix[i][1];
	}
	return psum;
};



7895
function plot_resource_curve()
{
	setplot('tidal_resource_curve_plot');
	clearplot('tidal_resource_curve_plot');
	plotopt( {'title'='Velocity Distribution','backcolor'=[255,255,255], 'popup'=true, 'legend'=false, 'legendpos'=[75,10]}  );
	
//	ws_all = ${tidal_resource_definition};
	pc_all = ${tidal_resource};
	ws=alloc(#pc_all);
	pc=alloc(#pc_all);
	for (i=0;i<#pc_all;i++)
	{
		ws[i] = pc_all[i][0];
		pc[i] = pc_all[i][1] *100;
	}
	plot( ws, pc, {'thick'=10, 'scale'=true,  'series'='Resource Probability', 'type'='bar', 'color'=[111,164,196]});
	
	high = max( ws );
	low = min( ws );
	pad = 0;
	axis( 'x1', {'label'='Velocity (m/s)', 'min'=low-pad, 'max'=high+pad });
	
	high = max( pc );
	low = min( pc );
	pad = 0;// (high - low) * 0.02;
	axis( 'y1', {'label'='Probability distribution (%)', 'min'=(low-pad), 'max'=(high+pad) });

}

on_change{'tidal_resource'}=define()
{
	plot_resource_curve();
};

on_load{'Marine Tidal Resource'}=define()
{
	plot_resource_curve();
	update_library_folders(''); // refresh list of library folders
	//show('wave_resource_matrix', false);
	refresh();
};

/*
function enable_disable_library() {
	
	enable('wave_resource_matrix',false);
	property('wave_resource_matrix','ColorMap',enable_library);
	enable('location_ts',enable_library);
	enable('btnScanLibrary_ts',enable_library);
	enable('average_power_flux_ts',enable_library);
	enable('bathymetry_ts',enable_library);
	enable('city_ts',enable_library);
	enable('country_ts',enable_library);
	enable('data_source_ts',enable_library);
	enable('wave_resource_filename_ts',enable_library);
	enable('frequency_sum',enable_library);
	enable('lat_ts',enable_library);
	enable('location_ts',enable_library);
	enable('lon_ts',enable_library);
	//enable('max_frequency',enable_library);
	//enable('max_frequency_Hs',enable_library);
	//enable('max_frequency_Te',enable_library);
	enable('name_ts',enable_library);
	enable('nearby_buoy_number_ts',enable_library);
	enable('notes_ts',enable_library);
	enable('sea_bed_ts',enable_library);
	enable('state_ts',enable_library);
	enable('tz_ts',enable_library);
	//enable('in_time_frame',enable_library);
	//enable('in_location',enable_library);
	//enable('wave_download',enable_library);
	refresh();
	
}*/

on_change{'btn_view_tidal_data'} = define() {
	if ( dview_wave(value('tidal_resource_filename_ts')) )
	{	msgbox('Failed to read file!\nThe data viewer was not able to open the weather file:\n' + value('wave_resource_filename_ts') ); }
};

on_change{'jpd_multiyear'} = define() {
	jpd_multiyear_gen();
};
/*
function jpd_multiyear_gen() {
	folder = choose_dir('', 'Choose folder containing single-year wave resource files');
	//file = choose_file();
	if (folder != '') {
		file = choose_file( '', 'Save multi-year JPD file as', 
			'JPD file (*.csv)|*.csv', true);
		if (file != '') {
			name = make_jpd_multiyear(folder, slash_back_to_forward(file));
			file_path = path_only(file);
			if (strpos(value('library_folder_list'), slash_back_to_forward(file_path)) == -1) {
				update_library_folders(path_only(file));
			}
			rescanlibrary('wave');
			value('wave_resource_filename', file);
			value( 'location', name );
			value('name', name);
			refresh('location');
			msgbox("Multi-year JPD file saved.\nTo use the file, switch from the Time Series option to Frequency of Occurrence, and choose " + to_string(value('name')) + " from the library.");
			
		}
	}
}*/

on_change{'btn_refresh_library'} = define() {
	rescanlibrary('tidal');
	//update_info('on_change btn_refresh_library');
};

on_change{'btn_add_remove_folders'} = define() {
	if ( showsettings( 'tidal' ) )
	{
		update_library_folders( '' );
		/*// if current library selection is no longer in library, change to first item listed in library CSV file
		L = strlen( value( 'library_folder_list' ) );
		if ( strlen( value( 'library_folder_list' ) ) < L )
		{
			if ( !solar_library(value('solar_resource_file'),false){'is_in_library'} )
			{
				first_item = solar_library(value('solar_resource')){'first_item_key'};
				first_item = replace( file_only(first_item), '.csv', '' );
				msgbox( 'Selected weather file not in solar resource library!\nThe file ' 
					     + value( file_only('solar_resource_file') )
					     + ' is not in the solar resource library. Changing library selection to ' 
					     +  first_item  + '.' );
				value( 'solar_resource' , first_item );
			}	
		}*/
	}
};


function tidal_library( item, is_key )
{
	T = {};
	lib_file = userlocaldatadir() + '/TidalResourceData.csv';
	lib_data = csvread( lib_file, { 'table' = true } );
	files = lib_data{'File name'}; files -@ 0; files -@ 0;
	for( i=0; i<#files; i++) { files[i] = lower(slash_back_to_forward(files[i])); }
	keys = lib_data{'Name'}; keys -@ 0; keys -@ 0;
	if ( is_key ) { ii = keys ?@ item; }
	else { ii = files ?@ lower(item); }
	T{'is_in_library'} = false; 
	T{'lib_key'} = null;
	if ( ii > -1 ) 
	{
		T{'is_in_library'} = true; 
		T{'lib_key'} = keys[ii];
		T{'file_name'} = files[ii];
	}
	T{'num_files_in_library'} = #files;
	str = slash_back_to_forward( appdir() );
	arr = split( str, '/' );
	arr -@ #arr-1;
	arr[#arr] = 'location_ts';
	default_path = '';
	for( i=0; i<#arr; i++ ) {default_path += arr[i] + '/'; }
	default_files = dir_list( default_path, '*', false );
	T{'num_default_files'} = #default_files;
	return T;
}


on_change{'location_tidal'} = define() {
	file = ${wave_resource_filename_ts};
	//value("location_id",value("location_ts"));
	refresh();
	if (!file_exists(file))
	{
		rescanlibrary( 'tidal' );
		refresh('location_tidal');
		return;
	}
	file = replace(file, '\\', '/');
	fn = open(file,'r');
	refresh('tidal_resource');
	close(fn);
	//update_info('on_change location_ts');
};



on_change{'btn_wave_download'} = define() {
	wave_download_all();
	//rescanlibrary( 'wave_ts' );
	update_library_folders( '' );
	//refresh('location_ts');
	//refresh('wave_resource_filename_ts');
};


// display window for advanced download
function wave_download_all() 
{
	hash = wavetoolkit();
	// meta data
	if ( hash{'file'} != '' )
	{ 
		fn = hash{'file'};
		dn = hash{'folder'};
		af = hash{'addfolder'};
		
		if (af == "no")
		{
			if ((fn != '') && (dn != ''))
			{
				//value( 'use_specific_ts_wf_wave', 1 );
				fn = replace(fn, '\\', '/');
				//value( 'user_specified_wave_resource_ts', fn );
			}
		}
		else
		{
			//rescanlibrary( 'wave_ts' );  //** is this necessary??
			if (fn != '')
			{
				rescanlibrary( 'tidal');
				value( 'location_tidal', file_to_key( fn ) );
			}
		}
		/*
		response = yesno('Would you like to build a JPD file from the time series file(s) that were downloaded?');
		if (response) {
			jpd_multiyear_gen();
		}*/
	}
	
}

function update_library_folders( new_path )
{
	//msgbox('Hello from update_library_folders()');
	x = get_settings('tidal_data_paths');
	// add new path if provided and it doesn't already exist in the library
	if ( new_path != '' && dir_exists( new_path ) && ( strpos( x, new_path ) < 0 ) )
	{
		if ( x != '' ) { x += ';'; }
		x += slash_back_to_forward( new_path );
	}
	// list of library folders files to display on separate lines
	paths = split( x, ';' );
	// put wave download folder at top of list
	clean_list = '';
	// remove folders in list that no longer exist
	for (i = 0; i<#paths; i++ )
	{
		if ( dir_exists( paths[i] ) )
		{
			clean_list += paths[i];
			if ( i < #paths-1 ) { clean_list += ';'; }
		}	
	}		
	// update solar_data_paths used by library.cpp and nsrdb.cpp to cleaned list		
	set_settings('tidal_data_paths', clean_list );
	// update list to display
	value( 'library_folder_list', get_settings('tidal_download_path') + '\n' 
	       + replace( clean_list , ';' , '\n' ) );
	rescanlibrary( 'tidal' );     
}

function slash_back_to_forward( str )
{
	return replace( str, '\\', '/' );
}

function file_to_key( file ) 
{
		key = file_only( file );
		key = replace( key, '.' + ext_only( file ), '');
		return key;
}
