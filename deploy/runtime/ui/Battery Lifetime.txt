Battery Lifetime
999
767
17
GroupBox

1
7
Name
5
19
Battery Bank Sizing
X
3
9
Y
3
6
Width
3
985
Height
3
759
Caption
5
16
Battery Lifetime
Bold
2
1
Numeric

1
16
Name
5
15
batt_calendar_a
X
3
66
Y
3
450
Width
3
90
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
15
batt_calendar_b
X
3
66
Y
3
477
Width
3
90
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
15
batt_calendar_c
X
3
66
Y
3
504
Width
3
90
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
RadioChoice

1
10
Name
5
20
batt_calendar_choice
X
3
36
Y
3
348
Width
3
447
Height
3
33
Selection
3
0
Items
6
3
None
Lithium-ion model
Enter custom
ShowCaptions
2
1
Horizontal
2
1
TabOrder
3
4294967295
Plot

1
5
Name
5
23
batt_calendar_life_plot
X
3
507
Y
3
345
Width
3
448
Height
3
297
Divider

1
9
Name
5
28
batt_calendar_lifetime_label
X
3
33
Y
3
324
Width
3
939
Height
3
22
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
20
Calendar degradation
Bold
2
1
Divider

1
9
Name
5
30
batt_calendar_lifetime_label_2
X
3
42
Y
3
543
Width
3
291
Height
3
16
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
18
Custom degradation
Bold
2
1
Divider

1
9
Name
5
30
batt_calendar_lifetime_label_3
X
3
33
Y
3
402
Width
3
261
Height
3
16
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
30
Lithium-ion model coefficients
Bold
2
1
DataMatrix

1
23
Name
5
29
batt_calendar_lifetime_matrix
X
3
39
Y
3
567
Width
3
445
Height
3
186
PasteAppendRows
2
1
PasteAppendCols
2
0
ShowRows
2
1
ShowRowLabels
2
0
RowLabels
5
0
ShadeR0C0
2
0
ShadeC0
2
0
ShowCols
2
0
ShowColLabels
2
1
ColLabels
5
31
Battery age (days),Capacity (%)
NumRowsLabel
5
5
Rows:
NumColsLabel
5
5
Cols:
Layout
3
1
ChoiceColumn
3
4294967295
Choices
5
15
Choice1,Choice2
HideColumn
3
4294967295
ShowColumn
3
4294967295
ColorMap
2
0
Label

1
12
Name
5
21
batt_calendar_model_1
X
3
192
Y
3
474
Width
3
117
Height
3
24
Caption
5
24
q = q0 - k_cal * sqrt(t)
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
0
AlignRight
2
1
AlignTop
2
0
Label

1
12
Name
5
21
batt_calendar_model_2
X
3
192
Y
3
498
Width
3
288
Height
3
30
Caption
5
55
k_cal = a * exp[b(1/T - 1/296)] * exp[c(SOC/T - 1/296)]
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
1
AlignTop
2
0
Numeric

1
16
Name
5
16
batt_calendar_q0
X
3
66
Y
3
423
Width
3
90
Height
3
24
Value
1
0
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Divider

1
9
Name
5
25
batt_cycle_lifetime_label
X
3
30
Y
3
48
Width
3
939
Height
3
22
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
17
Cycle degradation
Bold
2
1
DataMatrix

1
23
Name
5
20
batt_lifetime_matrix
X
3
27
Y
3
75
Width
3
442
Height
3
246
PasteAppendRows
2
1
PasteAppendCols
2
0
ShowRows
2
1
ShowRowLabels
2
0
RowLabels
5
0
ShadeR0C0
2
0
ShadeC0
2
0
ShowCols
2
0
ShowColLabels
2
1
ColLabels
5
51
Depth-of-discharge (%),Cycles Elapsed, Capacity (%)
NumRowsLabel
5
5
Rows:
NumColsLabel
5
5
Cols:
Layout
3
1
ChoiceColumn
3
4294967295
Choices
5
15
Choice1,Choice2
HideColumn
3
4294967295
ShowColumn
3
4294967295
ColorMap
2
0
Label

1
12
Name
5
21
batt_lifetime_warning
X
3
36
Y
3
24
Width
3
924
Height
3
24
Caption
5
131
On the "Lifetime" tab, please select "Simulation over analysis period" to consider multi-year battery degradations and replacements
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
0
AlignRight
2
0
AlignTop
2
0
Plot

1
5
Name
5
17
plot_cap_vs_cycle
X
3
507
Y
3
75
Width
3
439
Height
3
246

7
batt_calendar_a
3
1
a
1/sqrt(day)
Battery
0
2
1
1
1
1
0.00266
Numeric
batt_calendar_b
3
1
b
K
Battery
0
2
1
1
1
1
-7280
Numeric
batt_calendar_c
3
1
c
K
Battery
0
2
1
1
1
1
930
Numeric
batt_calendar_choice
3
1
 
 
Battery
0
2
1
1
1
1
0
RadioChoice
batt_calendar_lifetime_matrix
3
3
Calendar lifetime matrix
 
Battery
0
3
1
3
3
2
0 100 
3650 80 
7300 50 

DataMatrix
batt_calendar_q0
3
1
q0
fraction
Battery
0
0
1
1
1
1
1.02
Numeric
batt_lifetime_matrix
3
3
Lifetime matrix
 
Battery
0
3
1
3
9
3
30 0 100 
30 1100 90 
30 1200 50 
50 0 100 
50 400 90 
50 500 50 
100 0 100 
100 100 90 
100 150 50 

DataMatrix

0
5331
on_load{'Battery Lifetime'} = define() {
	on_change{'batt_lifetime_matrix'}(); 
	on_change{'batt_calendar_choice'}();
	on_change{'batt_calendar_lifetime_matrix'}();
	on_change{'batt_calendar_a'}();
	on_change{'batt_calendar_b'}();
	on_change{'batt_calendar_c'}();
	on_change{'batt_calendar_q0'}();

};
on_change{'batt_calendar_lifetime_matrix'} = define(){plot_calendar_life();};
on_change{'batt_calendar_a'} = define(){plot_calendar_life();};
on_change{'batt_calendar_b'} = define(){plot_calendar_life();};
on_change{'batt_calendar_c'} = define(){plot_calendar_life();};
on_change{'batt_calendar_q0'} = define(){plot_calendar_life();};

on_change{'batt_calendar_choice'} = define(){
	mode = value('batt_calendar_choice');
	
	is_model = false;
	is_table = false;
	if (mode == 1)
		is_model = true;
	else if (mode == 2)
		is_table = true;
		
	batt_chem = value('batt_chem');
	
	if (is_model && batt_chem !=1)
	{
		msgbox("Calendar degradation model is only for lithium-ion batteries, please select 'None' or 'Enter custom'");
		value('batt_calendar_choice', 0);
		return;
	}
	
	enable('batt_calendar_lifetime_matrix', is_table);
	enable('batt_calendar_a', is_model);
	enable('batt_calendar_b', is_model);
	enable('batt_calendar_c', is_model);
	enable('batt_calendar_q0', is_model);
	
	plot_calendar_life();
};

function plot_calendar_life()
{
	mode = value('batt_calendar_choice');
	is_model = false;
	is_table = false;
	if (mode == 1)
		is_model = true;
	else if (mode == 2)
		is_table = true;

	clearplot('batt_calendar_life_plot');
	setplot('batt_calendar_life_plot');
	
	// vectors to plot
	t = [];
	q = [];
	
	T_vec = [];
	SOC_vec = [];
	color_string = [];
	legend_string = [];
	use_legend = false;
	
	if (is_model)
	{
		a = value('batt_calendar_a');
		b = value('batt_calendar_b');
		c = value('batt_calendar_c');
		q0 = value('batt_calendar_q0');
		
		dt_day = 10; // assume timestep of 10 days
		dq_old = 0;
		count = 0;
		years = 10;
		
		T_vec = [293, 303, 313, 323]; 
		SOC_vec = [0.5, 1.0, 0.5, 1.0];
		table = cell_voltage_vs_dod();
		V = table{'V'};
		DOD = table{'DOD'};
		
		V_vec = [];
		for (j = 0; j < #SOC_vec; j++){
			V_vec[j] = 0;
			for (i = 0; i < #DOD; i++){
				if (1 - DOD[i]*0.01 == SOC_vec[j]){
					V_vec[j] = V[i];
				}
			}
		}
			
		color_string = ['blue', 'green', 'red', 'yellow'];
		legend_string[0] = [ 'T = 20C, SOC=50%'];
		legend_string[1] = [ 'T = 30C, SOC=100%'];
		legend_string[2] = [ 'T = 40C, SOC=50%'];
		legend_string[3] = [ 'T = 50C, SOC=100%'];
		use_legend = true;
	
		t_max = 0;
		
		for (scenario=0; scenario != #T_vec; scenario++)
		{
		
			T = T_vec[scenario];
			SOC = SOC_vec[scenario]; 
			V = V_vec[scenario];
			k_cal = a * exp(b*(1/T - 1/296)) * exp(c*(SOC/T - SOC/296));
			q = [];
			t = [];
		
			for (day = 0; day != years * 360; day+=10)
			{
				dq_new = 0;
				if (day == 0)
					dq_new = k_cal*sqrt(dt_day);
				else
					dq_new = (0.5 * pow(k_cal, 2) / dq_old) * dt_day + dq_old;
				
				dq_old = dq_new;

				q_tmp = (q0 - dq_new)*100;
				
				if (q >=0)
				{
					q[count] = q_tmp;
					t[count] = day;
				}
				else
				{
					if (day > t_max)
						t_max = day;
					break;
				}
					
				count++;
			}
			plot(t, q, {'thick'=2, 'type'='line', 'color'=color_string[scenario], 'series'=legend_string[scenario]});	
		}
	}
	else if (is_table)
	{
		T_vec = [293];
		SOC_vec = [0.5];
		color_string = ['blue'];
		
		data = value('batt_calendar_lifetime_matrix');				
		if (#data < 2)
			break;
			
		for (i = 0; i != #data; i++)
		{
			t[i] = data[i][0];
			q[i] = data[i][1];
		}
		t_max = max(t);
		plot(t, q, {'thick'=2, 'type'='line', 'color'=color_string[0]});	
	}
	
	if (is_table || is_model)
	{
		if (use_legend)
			plotopt( {'title'='Capacity fade', 'legend'=use_legend, 'legendpos'=[15,55]});
		else
			plotopt( {'title'='Capacity fade', 'legend'=use_legend});

		axis( 'x1', {'label'='Age of battery (days)', 'min'=0, 'max'=max(t)+10});
		axis( 'y1', {'label'='Effective capacity (%)', 'min'=0, 'max'=100});
	}
}

on_change{ 'batt_lifetime_matrix' } = define() {

	setplot( 'plot_cap_vs_cycle' );
	
	blm = ${batt_lifetime_matrix};
	for( i=0;i<#blm;i++ ) {
		D[i] = blm[i][0];
		n[i] = blm[i][1];
		C[i] = blm[i][2];
		// logmsg('D: ' + D[i] + ' n: ' + n[i] + ' C: ' + C[i]);
	}
	D_unique[0] = D[0];
	legend_string[0] = 'DoD: ' + to_string(D[0]) +'%';
	index = 1;
	for ( i=0;i<#D;i++){
		contained = false;
		for ( j=0;j<#D_unique;j++){
			if ( D[i] == D_unique[j] )
			{
				contained = true;
				break;
			}
		}
		if (contained == false)
		{
			D_unique[index] = D[i];
			legend_string[index] = 'DoD: ' + to_string(D[i]) +'%';
			index++;
			//logmsg('D_unique: ' + D_unique);
		}
	}

	clearplot();
	color_string_array = ['blue', 'green', 'red', 'yellow', 'black'];
	
	index = 0;
	for (i = 0; i<#D_unique; i++){
		n_plot = [];
		C_plot = [];
		D_plot = [];
		for (j = 0; j<#D; j++){
			if (D[j] == D_unique[i])
			{
				n_plot[index] = n[j];
				C_plot[index] = C[j];
				D_plot[index] = D[j];
				index++;
			}
		}
		plot( n_plot, C_plot, {'thick'=2, 'type'='line', 'color'=color_string_array[i], 'series'=legend_string[i]});

	}
	plotopt( {'title'='Capacity fade', 'legend'=true, 'legendpos'=[65,60]});
	axis( 'x1', {'label'='Cycle number', 'min'=0, 'max'=max(n)+100});
	axis( 'y1', {'label'='Effective capacity (%)', 'min'=0, 'max'=100});
};
