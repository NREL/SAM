/*@

This macro displays a .srw wind data file as histograms for each wind turbine height's
direction and speed. <br><br>
File must follow .srw format.
See <a href = "https://www.nrel.gov/analysis/sam/help/html-php/weather_format.htm">
documentation</a> (browser-sensitive) for more info.
<br><br>

Options:<br><ul>
<li>Separate by height: Frequency % graphs displayed separately for each height.<br>
<li>Stack by height: Frequency count graphs displayed with heights stacked on each other.<br>
<li>Side by side: Frequency % graphs dispalyed with heights side by side.<br></ul>
<br>The data is printed below in columns: bin#, max value in bin, 
% frequency. <br><br>

<i> Click 'Run macro' above to display the currently selected wind data file as 
histograms. </i> <br><br>

@*/

// Macro user interface widgets
//@ name=dir_plot;type=combo;label=Direction plotting format:;value=Separate by height,Stack by height,Side by Side;sel=0
//@ name=spd_plot;type=combo;label=Speed plotting format:;value=Separate by height,Stack by height,Side by Side;sel=0
//@ name=data_disp;type=combo;label=Display data?;value=Yes,No;sel=0

//
// This script displays the wind direction data from a .srw file as a frequency
// histogram. 
//

// Choose Display Options for standalone runs
opt1 = 'Separate by height';
opt2 = 'Stack by height';
opt3 = 'Side by Side';

options = [opt1, opt1, 'Yes'];

function sidebysideplot(binw, yarr, legend, size){
	// assign x-labels
	width = 1;
	for (i=0; i<#yarr[0]; i++){
		width += #yarr;
		labels[i] = [width, binw*(i+1)];
		width += 1;
	}
	xi = 1;
	for (i=0; i<#yarr[0]; i++){
		for (j=0; j<#yarr; j++){
			color = [30+j*15*16/#yarr, 22-j*15*16/#yarr, 175+j*10*16/#yarr];
			if (i==0) plot([xi], [yarr[j][i]], {'type'='bar', 'size' = size, 'color' = color, 'series' = legend[j]});
			else plot([xi], [yarr[j][i]], {'type'='bar', 'size' = size, 'color' = color});
			xi++;
		}
		xi++;
	}
	axis('x1', {'min' = -0.1, 'max' = xi-1, 'type' = 'label', 'labels' = labels});
}

// if run as an independent script (outside a case), prompt user for file
// else take wind file from case


fin = 0;
if ( typeof(macro) == 'unknown' ) {
	input_file = choose_file( homedir(), 'Choose wind resource file', '*.srw', false, false);
	path = path_only(input_file);
	input_name = file_only(input_file);
	fin = open(input_file, 'r');
	if (fin == 0){
		outln('Could not open ' + input_name + ' for reading.\n Exiting script.');
		exit;
	}
	else outln('Data file is\n  ' + input_name + '\n');
	dplot = options[0];
	splot = options[1];
	disp = options[2];
}
else {
	input_file = get('wind_resource_filename');
	outln(input_file);
	fin = open(input_file, 'r');
	if (fin == 0){
		outln('Could not open file for reading.\n Exiting script.');
		exit;
	}
	else outln('Read data file for' + get('wind_resource.location') + '.\n');
	dplot = to_string(macro.dir_plot);
	splot = to_string(macro.spd_plot);
	disp = to_string(macro.data_disp);
}


// index: number of data entries; n: number of heights; r: columns of direction;
// s: columns of speed
line = 0;
index = 0;
n = 0;
r[0] = 0;	
s[0] = 0;
ok = true;
str_line = '';
while(read_line(fin, str_line) && ok == true){
	// get location and year if available from input file
	if (line == 1){
		arr = split(str_line, '(');
		location = arr[0];
	}
	// get row location of n number of wind direction data
	if (line == 2){
		arr = split(str_line, ',');
		ns = 0;
		for (i=0; i<#arr; i++){
			if (stricmp(arr[i], 'direction') == 0){
				r[n] = i;
				n++;
			}
			else if (stricmp(arr[i], 'speed') == 0){
				s[ns] = i;
				ns++;
			}
		}
		if (ns != n){
			outln('Error: Different number of direction and speed columns.');
			ok = false;
		}
	}
	// get n number of wind turbine heights
	if (line == 4){
		arr = split(str_line, ',');
		for (i=0; i<n; i++){
			height[i] = arr[r[i]];
		}
	}
	// get index number of wind direction & wind speed data for each height
	if (line > 4){
		arr = split(str_line, ',');
		if (arr[0] == '') ok == false;
		else{
			for (i=0; i<n; i++){
				h[i][index] = to_int(arr[r[i]]);
				speed[i][index] = to_real(arr[s[i]]);
			}
			index++;
		}
	}
	line++;
}

for (i=0; i<n; i++){
	stable_sort(h[i]);
	stable_sort(speed[i]);
}

// make bins for direction: hbinx contains bin median value; hbiny will contain frequencies
nbins = 16;
hbinw = 360/nbins;
for (i=0; i<n; i++){
	for (j=0; j<nbins; j++){
		hbinx[j] = j*hbinw + 0.5*hbinw;
		hbiny[i][j] = 0;
	}
}

// make bins for speed: sbinx contains bin median value; hbiny will contain frequencies
smax = 0;
sbinw = 2;
for (i=0; i<n; i++){
	smax = max(smax, speed[i][index-1]);
}
smax = to_int(smax+1);
if (mod(smax, 2) != 0) smax++;
sbins = smax/sbinw;

for (i=0; i<n; i++){
	for (j=0; j<sbins; j++){
		sbinx[j] = j*sbinw + 0.5*sbinw;
		sbiny[i][j] = 0;
	}
}

// Wind Direction:
// initialize bin placeholder and populate bins, convert freq to percentage
for (i=0; i<n; i++){
	ibin[i] = 0;
}

for (i=0; i<index; i++){
	for (j=0; j<n; j++){
		if (ibin[j] >= nbins) outln('error');
		binmax[j] = (ibin[j]+1)*hbinw;
		
		dir = h[j][i];
		if (dir > binmax[j]){
			ibin[j]++;
		}
		hbiny[j][ibin[j]]++;
	}
}

for (j=0; j<n; j++){
	for (i=0; i<#hbiny[j]; i++){
		hpbiny[j][i] = to_real(hbiny[j][i]/index)*100;
	}
}

// print frequency data & make bar chart
size = 5;
for (i=0; i<nbins+1; i++){
	labels[i] = [i*22.5, to_string(i*22.5)];
}
xi = 1;
for (i=0; i<n; i++){
	if (disp == 'Yes'){
		outln('Wind Direction Distribution for '+location + ' at ' + height[i] + ' m.');
		outln('Bin, Bin Max, % Frequency');
		for (j=0; j<#hbinx; j++){
			outln(j+ ', ' + (j+1)*hbinw + ', ' + hpbiny[i][j]);
		}
		outln('\n');
	}
	color = [30+i*15*16/n, 22-i*15*16/n, 175+i*10*16/n];
	if (dplot == 'Separate by height'){
		newplot();
		plot(hbinx, hpbiny[i], {'type'='bar', 'thick'=5});
		axis('x1', {'label'= 'Degrees', 'min' = 0, 'max' = 360, 'type' = 'label', 'labels' = labels});
		axis('y1', {'label'= '% Frequency'});
		plotopt({'title' = 'Wind Direction Distribution for '+location + ' at ' + height[i] + ' m.'});
	}
	
	else if (dplot == 'Stack by height'){
		if (i==0){
			newplot();
			plot(hbinx, hbiny[i], {'type'='bar', 'color' = color, 'thick'=5, 'series' = height[i]});
		}
		else plot(hbinx, hbiny[i], {'type'='bar', 'color' = color, 'thick'=5, 'series' = height[i], 'stackon'=height[i-1]});
		axis('x1', {'label'= 'Degrees', 'min' = 0, 'max' = 360, 'type' = 'label', 'labels' = labels});
		axis('y1', {'label'= 'Frequency'});
		plotopt({'title' = 'Wind Direction Distribution for '+location+' at Various Heights (m)'});
	}
}

if (dplot == 'Side by Side'){
	newplot();
	sidebysideplot(22.5, hpbiny, height, 5);
	axis('x1', {'label' = 'Degrees'});
	axis('y1', {'label' = '% Frequency'});
	plotopt({'title' = 'Wind Direction Distribution for '+location+' at Various Heights (m)'});
}

// Wind Speed:
// initialize bin placeholder and populate bins
for (i=0; i<n; i++){
	ibin[i] = 0;
}

for (i=0; i<index; i++){
	for (j=0; j<n; j++){
		if (ibin[j] >= sbins) outln('error');
		binmax[j] = (ibin[j]+1)*sbinw;
		
		dir = speed[j][i];
		if (dir > binmax[j]){
			ibin[j]++;
		}
		sbiny[j][ibin[j]]++;
	}
}

for (j=0; j<n; j++){
	for (i=0; i<#sbiny[j]; i++){
		spbiny[j][i] = to_real(sbiny[j][i]/index)*100;
	}
}

// print frequency data & make bar chart
for (i=0; i<sbins+1; i++){
	slabels[i] = [i*sbinw, to_string(i*sbinw)];
}

for (i=0; i<n; i++){
	if (disp == 'Yes'){
		outln('Wind Speed Distribution for '+location + ' at ' + height[i] + ' m.');
		outln('Bin, Bin Max, % Frequency');
		for (j=0; j<#sbinx; j++){
			outln(j+ ', ' + (j+1)*sbinw + ', ' + spbiny[i][j]);
		}
		outln('\n');
	}

	if (splot == 'Separate by height'){
		newplot();
		plot(sbinx, spbiny[i], {'type'='bar', 'thick'=5});
		axis('x1', {'label'= 'm/s', 'min' = 0, 'max' = smax, 'type' = 'label', 'labels' = slabels});
		axis('y1', {'label'= '% Frequency'});
		plotopt({'title' = 'Wind Speed Distribution for '+location + ' at ' + height[i] + ' m.'});
	}
	
	else if (splot == 'Stack by height'){
		color = [30+i*15*16/n, 22-i*15*16/n, 175+i*10*16/n];
		if (i==0){
			newplot();
			plot(sbinx, sbiny[i], {'type'='bar', 'color' = color, 'thick'=5, 'series' = height[i]});
		}
		else plot(sbinx, sbiny[i], {'type'='bar', 'color' = color, 'thick'=5, 'series' = height[i], 'stackon'=height[i-1]});
		axis('x1', {'label'= 'm/s', 'min' = 0, 'max' = smax, 'type' = 'label', 'labels' = slabels});
		axis('y1', {'label'= 'Frequency'});
		plotopt({'title' = 'Wind Speed Distribution for '+location+' at Various Heights (m)'});
	}
}

if (splot == 'Side by Side'){
	newplot();
	sidebysideplot(2, spbiny, height, 5);
	axis('x1', {'label' = 'm/s'});
	axis('y1', {'label' = '% Frequency'});
	plotopt({'title' = 'Wind Speed Distribution for '+location+' at Various Heights (m)'});
}