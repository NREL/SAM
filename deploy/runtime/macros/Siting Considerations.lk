/*@

This macro allows you to download siting considerations from the National Renewable Energy Laboratory's
Wind Prospector for your potential project site. Some of the information provided by this website is intended for wind installations, 
but much of the information it provides (such as federal land ownership) is relevant for all project types. 
The information downloaded is for user reference only; SAM does not use this information in any simulations or calculations.<br><br>

You may visit the Wind Prospector site directly at: <a href="http://maps.nrel.gov/wind_prospector">http://maps.nrel.gov/wind_prospector</a><br><br>

<b>Please note that this information is available for U.S. locations only.</b><br> 
The macro will still run for locations outside of the U.S., but it will not return any information.<br><br>

<h5>Instructions:</h5>
<ol>
<li> Using the interface at the right, select a location to look up. You may:
<ul>
<li> Use the location from the weather file, if applicable.
<li> Enter a latitude and longitude using the inputs at the right.
<li> Enter an address or city (a pop-up window will appear after you click "Run macro"). <br>
</ul>
<li> Enter the radius around the specified location for which you would like to see siting considerations. <br>
<li> Click 'Run macro' to access the Wind Prospector web service and view a table of possible considerations for your project site.
</ol>
@*/

// Macro user interface widgets
//@ name=location_choice;type=combo;value=Use location from weather file,Enter latitude and longitude,Enter address or city;label=Location to look up
//@ name=radius;type=number;label=Radius (miles);value=10
//@ name=input_lat;type=number;label=Latitude input;value=40
//@ name=input_lon;type=number;label=Longitude input;value=-105

if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
}

//set up variables needed to call API*********************************************************************************************
radius = to_string(macro.radius);
lat = '';
lon = '';

//set latitude and longitude******************************************************************************************************
if(macro.location_choice == '')
{
	msgbox('Please select which type of location to look up.');
	exit;
}
if(macro.location_choice == 'Use location from weather file')//use location from weather file
{
	//get the current configuration
	config = configuration(); 
	
	//check that there is a weather file location
	if (config[0] == 'Generic System')
	{
		msgbox('You must specify a latitude and longitude or an address to run this macro for a Generic System.');
		exit;
	} 
	if (config[0] == 'Wind Power')
	{
		if(get('use_specific_wf_wind') == 1 || get('wind_resource_model_choice') == 1) 
		{
			msgbox('You must specify a latitude and longitude or an address to run this macro when using the Weibull resource option or a specific weather file on disk.');
			exit;
		}
	}
	if((config[0] != 'Wind Power' && config[0] != 'Generic System' && get('use_specific_weather_file') == 1))
	{
		msgbox('You must specify a latitude and longitude or an address to run this macro when using a specific weather file on disk.');
		exit;
	}
	
	//assign the weather file location
	if(config[0] == 'Wind Power') //Wind Resource input page
	{
		lat = to_string(get('wind_resource.lat'));
		lon = to_string(get('wind_resource.lon'));
		//check for anonymized locations (NREL AWS files)
		if(lat == '0' && lon == '0')
		{
			msgbox('You must specify a latitude and longitude or an address when running a typical file, as this information is not contained in the file.');
			exit;
		}
	}
	else //Solar Resource input page
	{
		lat = to_string(get('lat'));
		lon = to_string(get('lon'));
	}
}
else if (macro.location_choice == 'Enter address or city')
{
	address = in('Please enter an address or city','','Enter Location');
	geo = geocode(address);
	lat = to_string(geo.lat);
	lon = to_string(geo.lon);
	if (abs(lat) <1 || abs(lon) < 1)
	{
		msgbox('Could not translate address to latitude and longitude. Please enter a different address or use the latitude and longitude input.');
		exit;
	}
}
else //user input location
{
	lat = to_string(macro.input_lat);
	lon = to_string(macro.input_lon);
}

//create the URL and call the wind prospector service**********************************************************************************************************
url = 'http://developer.nrel.gov/api/wind/wind_prospector?api_key=<SAMAPIKEY>&category=all_land_ownership,all_restricted,all_species&lat='
+ lat +'&long=' + lon +'&radius=' + radius +'&alo_details=1';
json = curl(url);

//error checking on the returned JSON**************************************************************************************************************************
if (json == '')
{
	msgbox('Failed to download data from the NREL Wind Prospector.');
	exit;
}
results = json_read(json);
if (results == null)
{
	msgbox('Failed to parse data returned from the NREL Wind Prospector.');
	exit;
}
errors = results.errors;
if (#errors != 0)
{
	msgbox(errors);
	exit;
}

//read the results********************************************************************************************************************************************
total_area = results.metadata.input_area;
count = 0;

//read restricted areas
restricted = results.all_restricted;
for(i=0; i<#restricted; i++)
{
	if(restricted[i].intersected_area > 0)
	{
		list[count].name = restricted[i].management;
		list[count].detail = restricted[i].type;
		list[count].overlap = restricted[i].intersected_area / total_area * 100;
		count++;
	}
}

//read land ownership areas
land = results.all_land_ownership;
for(i=0; i<#land; i++)
{
	if(land[i].intersected_area > 0)
	{
		list[count].name = land[i].sma_code;
		list[count].detail = '';
		if (land[i].sma_name != null)
			list[count].detail += land[i].sma_name;
		if(land[i].label1 != null)
			list[count].detail += ': ' + land[i].label1;
		if(land[i].label2 != null)
			list[count].detail += ': ' + land[i].label2;
		if(list[count].detail == '')
			list[count].detail = null;
		list[count].overlap = land[i].intersected_area / total_area * 100;
		count++;
	}
}

//read species existence
species = ['species_bald_eagle', 'species_golden_eagle', 'species_greater_prairie_chicken', 'species_indiana_bat', 'species_sage_grouse', 'species_whooping_crane'];
for(i=0; i<#species; i++)
{
	if(results{species[i]}.intersected == true)
	{
		list[count].name = species[i];
		list[count].detail = 'N/A';
		list[count].overlap = null;
		count++;
	}
}

//format the results********************************************************************************************************************************************
if (count > 0)
{
	for (i=0; i < #list; i++)
	{	
		list[i].name = replace(list[i].name, 'BIA', 'Bureau of Indian Affairs');
		list[i].name = replace(list[i].name, 'BLM MON', 'Bureau of Land Management: National Monument');
		list[i].name = replace(list[i].name, 'BLM NCA', 'Bureau of Land Management: National Conservation Area');
		list[i].name = replace(list[i].name, 'BLM WA', 'Bureau of Land Management: Wilderness Area');
		list[i].name = replace(list[i].name, 'BLM', 'Bureau of Land Management');
		list[i].name = replace(list[i].name, 'BOR', 'Bureau of Reclamation');
		list[i].name = replace(list[i].name, 'DOD', 'Department of Defense');
		list[i].name = replace(list[i].name, 'FWS RNA', 'Fish and Wildlife Service: Research Natural Area');
		list[i].name = replace(list[i].name, 'FWS WA', 'Fish and Wildlife Service: Wildnerness Area');
		list[i].name = replace(list[i].name, 'FWS', 'Fish and Wildlife Service');
		list[i].name = replace(list[i].name, 'LOCAL', 'Locally-Owned Land');
		list[i].name = replace(list[i].name, 'NFS', 'National Forest Service');
		list[i].name = replace(list[i].name, 'NPS', 'National Park Service');
		list[i].name = replace(list[i].name, 'STATE', 'State-Owned Land');
		list[i].name = replace(list[i].name, 'USFS WA', 'U.S. Forest Service: Wilderness Area');
		list[i].name = replace(list[i].name, 'USFS', 'U.S. Forest Service');
		list[i].name = replace(list[i].name, 'OTHER', 'Other');
		list[i].name = replace(list[i].name, 'species_', 'Species Present: ');
		list[i].name = replace(list[i].name, '_', ' ');
	}
}

//HTML window to display results*******************************************************************************************************************************
str = '<html><body><h4>Siting Considerations</h4>';

if ( count <= 0) //list is empty
	str += 'No siting considerations found for this site.';
else
{
	str += 'Information downloaded from the NREL Wind Prospector for latitude: ' + results.inputs.lat + ', longitude:' + results.inputs.long + '.<br>';
	str += 'Information shown here is for reference only. It will not be used in any simulations, nor is the accuracy of the information guaranteed. <br><br>';
	//format list as table
	str += '<table bgcolor=#f0f0f0>';
	str += '<tr><td bgcolor=#dddddd><b>Siting Consideration</b></td><td bgcolor=#dddddd><b>Details</b></td><td bgcolor=#dddddd><b>Percentage of Input Area Affected</b></td></tr>';
	for(i=0; i<#list; i++)
	{
		if(list[i].detail == null)
			list[i].detail = 'Not available';
		str += '<tr><td>' + list[i].name + '</td><td>' + list[i].detail + '</td><td>';
		if(list[i].overlap == null)
			str += 'N/A';
		else
			str+= sprintf('%.2f', list[i].overlap) + '%';
		str+= '</td></tr>';
	}
	str += '</table><br><br>';
}
str += '</body></html>';
html_dialog(str, 'Siting Considerations', [925, 750]);
