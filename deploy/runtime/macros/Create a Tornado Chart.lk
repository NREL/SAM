<<<<<<< HEAD
/*@
Tornado charts can be a helpful way to visualize sensitivities of a model to various inputs.  Creating a
tornado chart involves running several simulations in which a set of input variables are decreased
and increased independently to see how much a particular output metric changes.<br><br>
This macro creates a tornado chart like this one based on input ranges you specify:<br><br>
<img src="$MACROPATH/tornado.jpg"><br><br>

<b>Instructions:</b>

<ol>
<li> Using the interface at the right, select one or more input variables to consider.
<li> Select an output metric to plot on the tornado chart.
<li> Specify the percentage change (decrease and increase) to apply to each input variable.  <br><br>
If you wish to specify different adjustments to each input variable, double click the variable or press Edit.  
In the popup dialog, you may enter:
<ul>
<li> A custom percentage decrease and increase, such as "10%" or "23%"
<li> A custom absolute change, such as "5".  If the base case input has a value of 30, values of 25 and 35 will be used.
<li> A custom absolute changes in both directions, such as "4, 7".  If the base case input has a value of 30, values used will be 26 and 37.
</ul>
<li> Press 'Run macro' to perform the simulations and create the tornado chart.
<li> You can right click on the plot window that pops up to export the data or figure.
</ol>
@*/
// Macro user interface widgets
//@ name=inputs;type=inputs;label=Input variables\nto consider:;meta=true;prompt=Specify custom variation for input (percentage, absolute, or independent up/down values ).\n\nExamples: 4.5%    0.05   1.2,1.7 
//@ name=output;type=svoutput;label=Output metric:
//@ name=percent;type=number;label=% adjustment:;value=10
//@ show_save_load_buttons=true


if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
}

outvar = macro.output;
percent = macro.percent;
vars = macro.inputs;
if ( #vars == 0 )
{
	msgbox('No input variables selected.');
	exit;
}

if ( outvar == '' ) {
	msgbox('Please choose an output variable to plot.');
	exit;
}

vi = varinfo(outvar);
outlabel = vi.label;
if ( strlen(vi.units) > 0 ) outlabel = outlabel + ' (' + vi.units + ')';

// run base case simulation
outln('Running base case simulation...');
simulate();
baseoutput = get(outvar);
for( i=0;i<#vars;i++ )
{
	var = vars[i][0];
	
	
	vi = varinfo( var );

	L = vi.label;
	
	updown = vars[i][1];
	
	baseval = get( var );
	
	type = typeof(baseval);
	arrconv = false;
	if(type == 'array'
		&& #baseval == 1) {
		arrconv = true;
		baseval = to_real( baseval[0] );
	}
	elseif( type == 'number') {
		baseval = to_real(baseval);
	}
	else
		{
			msgbox('Error with input variable: ' + L + '\n\nMust be a number.');
		}
	
	
	if ( strlen(vi.units) > 0 ) L = L + ' (' + vi.units + ')';
	
	L = L+'\n' + baseval;
	
	if ( strlen(updown) == 0 )
	{
		val_dn = (1-percent/100)*baseval;
		val_up = (1+percent/100)*baseval;
		L = L + ' (+/-' + percent +'%)';
	}
	else
	{
		if ( strpos(updown, '%') >= 0 )
		{
			adj = to_real( updown );
			val_dn = (1-adj/100)*baseval;
			val_up = (1+adj/100)*baseval;
			L = L + ' (+/-' + adj + '%)';
		}
		elseif( strpos(updown, ',') >= 0 )
		{
			p = strpos(updown, ',');
			val_dn = to_real(mid( updown, 0, p ));
			val_up = to_real(mid( updown, p+1 ));
			L = L + ' (-' + val_dn + ', +' + val_up + ' ' + vi.units + ')';
			val_dn = baseval-val_dn;
			val_up = baseval+val_up;
		}
		else
		{
			adj = to_real(updown);
			val_dn = baseval-adj;
			val_up = baseval+adj;
			L = L + ' (+/-' + adj + ' ' + vi.units + ')';
		}
	}
	
	yvals_dn[i] = 0.75;
	yvals_up[i] = 1.25;
	labels[i][0] = 1;
	labels[i][1] = L;
	
	outln('Considering variable: ' + vi.label + '...');
	
	set( var, arrconv ? [val_dn] : val_dn );
	simulate();
	output_dn[i] = get(outvar);

	outln( '\t' + vi.label + '=' + val_dn  + ", " + outlabel + "=" + output_dn[i] );
	
	set( var,  arrconv ? [val_up] : val_up );
	simulate();
	output_up[i] = get(outvar);
	outln( '\t' + vi.label + '=' + val_up  + ", " + outlabel + "=" + output_up[i] );
	
	set( var, arrconv ? [baseval] : baseval ); // return to base case input value	
	
	// calculate average absolute percent changes
	dnpc = (abs(output_dn[i]-baseoutput))/baseoutput;
	uppc = (abs(output_up[i]-baseoutput))/baseoutput;
	avgchange[i] = max(dnpc,uppc);
	
}

// calculate nice axis bounds
xmin = min( min(output_dn), min(output_up) );
xmax = max( max(output_dn), max(output_up) );
range = xmax-xmin;
xmin = xmin-0.05*range;
xmax = xmax+0.05*range;

// sort based on average change
count = #avgchange;
for (i=0;i<count;i++)
{
	smallest = i;
	for (j=i+1;j<count;j++)
		if (avgchange[j] < avgchange[smallest])
			smallest = j;
			
	// percentage changes
	temp = avgchange[i];
	avgchange[i] = avgchange[smallest];
	avgchange[smallest] = temp;

	// minus vals
	temp = output_dn[i];
	output_dn[i] = output_dn[smallest];
	output_dn[smallest] = temp;

	// plus vals
	temp = output_up[i];
	output_up[i] = output_up[smallest];
	output_up[smallest] = temp;
	
	// down ys
	temp = yvals_dn[i];
	yvals_dn[i] = yvals_dn[smallest];
	yvals_dn[smallest] = temp;
	
	// up ys
	temp = yvals_up[i];
	yvals_up[i] = yvals_up[smallest];
	yvals_up[smallest] = temp;

	// labels
	buf = labels[i];
	labels[i] = labels[smallest];
	labels[smallest] = buf;

}


// update y axis positions of bars
for( i=0;i<#vars;i++)
{
	yvals_dn[i] = yvals_dn[i] + (2*i);
	yvals_up[i] = yvals_up[i] + (2*i);
	labels[i][0] = labels[i][0] + (2*i);
}

// create the plot
newplot();
plot( output_dn, yvals_dn, {'type'='hbar', 'baseline'=baseoutput, 'color'=[140,140,140], 'series'='(--)', thick=20});
plot( output_up, yvals_up, {'type'='hbar', 'baseline'=baseoutput, 'color'=[240,100,100], 'series'='(++)', thick=20});

axis('x1', {'min'=xmin, 'max'=xmax, 'label'=outlabel});
axis('y1', { 'type'='label', 'labels'=labels, 'min'=0, 'max'=2*#vars} );
annotate( [baseoutput, 0], [baseoutput, 2*#vars], {type='line', color='black'});
plotopt({'legendpos'='bottom', 'coarse'=true, 'fine'=true, 'title'='Tornado Chart'});

=======
/*@
Tornado charts can be a helpful way to visualize sensitivities of a model to various inputs.  Creating a
tornado chart involves running several simulations in which a set of input variables are decreased
and increased independently to see how much a particular output metric changes.<br><br>
This macro creates a tornado chart like this one based on input ranges you specify:<br><br>
<img src="$MACROPATH/tornado.jpg"><br><br>

<b>Instructions:</b>

<ol>
<li> Using the interface at the right, select one or more input variables to consider.
<li> Select an output metric to plot on the tornado chart.
<li> Specify the percentage change (decrease and increase) to apply to each input variable.  <br><br>
If you wish to specify different adjustments to each input variable, double click the variable or press Edit.  
In the popup dialog, you may enter:
<ul>
<li> A custom percentage decrease and increase, such as "10%" or "23%"
<li> A custom absolute change, such as "5".  If the base case input has a value of 30, values of 25 and 35 will be used.
<li> A custom absolute changes in both directions, such as "4, 7".  If the base case input has a value of 30, values used will be 26 and 37.
</ul>
<li> Press 'Run macro' to perform the simulations and create the tornado chart.
<li> You can right click on the plot window that pops up to export the data or figure.
</ol>
@*/
// Macro user interface widgets
//@ name=inputs;type=inputs;label=Input variables\nto consider:;meta=true;prompt=Specify custom variation for input (percentage, absolute, or independent up/down values ).\n\nExamples: 4.5%    0.05   1.2,1.7 
//@ name=output;type=svoutput;label=Output metric:
//@ name=percent;type=number;label=% adjustment:;value=10
//@ show_save_load_buttons=true


if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
}

outvar = macro.output;
percent = macro.percent;
vars = macro.inputs;
if ( #vars == 0 )
{
	msgbox('No input variables selected.');
	exit;
}

if ( outvar == '' ) {
	msgbox('Please choose an output variable to plot.');
	exit;
}

vi = varinfo(outvar);
outlabel = vi.label;
if ( strlen(vi.units) > 0 ) outlabel = outlabel + ' (' + vi.units + ')';

// run base case simulation
outln('Running base case simulation...');
simulate();
baseoutput = get(outvar);
for( i=0;i<#vars;i++ )
{
	var = vars[i][0];
	
	
	vi = varinfo( var );

	L = vi.label;
	
	updown = vars[i][1];
	
	baseval = get( var );
	
	type = typeof(baseval);
	arrconv = false;
	if(type == 'array'
		&& #baseval == 1) {
		arrconv = true;
		baseval = to_real( baseval[0] );
	}
	elseif( type == 'number') {
		baseval = to_real(baseval);
	}
	else
		{
			msgbox('Error with input variable: ' + L + '\n\nMust be a number.');
		}
	
	
	if ( strlen(vi.units) > 0 ) L = L + ' (' + vi.units + ')';
	
	L = L+'\n' + baseval;
	
	if ( strlen(updown) == 0 )
	{
		val_dn = (1-percent/100)*baseval;
		val_up = (1+percent/100)*baseval;
		L = L + ' (+/-' + percent +'%)';
	}
	else
	{
		if ( strpos(updown, '%') >= 0 )
		{
			adj = to_real( updown );
			val_dn = (1-adj/100)*baseval;
			val_up = (1+adj/100)*baseval;
			L = L + ' (+/-' + adj + '%)';
		}
		elseif( strpos(updown, ',') >= 0 )
		{
			p = strpos(updown, ',');
			val_dn = to_real(mid( updown, 0, p ));
			val_up = to_real(mid( updown, p+1 ));
			L = L + ' (-' + val_dn + ', +' + val_up + ' ' + vi.units + ')';
			val_dn = baseval-val_dn;
			val_up = baseval+val_up;
		}
		else
		{
			adj = to_real(updown);
			val_dn = baseval-adj;
			val_up = baseval+adj;
			L = L + ' (+/-' + adj + ' ' + vi.units + ')';
		}
	}
	
	yvals_dn[i] = 0.75;
	yvals_up[i] = 1.25;
	labels[i][0] = 1;
	labels[i][1] = L;
	
	outln('Considering variable: ' + vi.label + '...');
	
	set( var, arrconv ? [val_dn] : val_dn );
	simulate();
	output_dn[i] = get(outvar);

	outln( '\t' + vi.label + '=' + val_dn  + ", " + outlabel + "=" + output_dn[i] );
	
	set( var,  arrconv ? [val_up] : val_up );
	simulate();
	output_up[i] = get(outvar);
	outln( '\t' + vi.label + '=' + val_up  + ", " + outlabel + "=" + output_up[i] );
	
	set( var, arrconv ? [baseval] : baseval ); // return to base case input value	
	
	// calculate average absolute percent changes
	dnpc = (abs(output_dn[i]-baseoutput))/baseoutput;
	uppc = (abs(output_up[i]-baseoutput))/baseoutput;
	avgchange[i] = max(dnpc,uppc);
	
}

// calculate nice axis bounds
xmin = min( min(output_dn), min(output_up) );
xmax = max( max(output_dn), max(output_up) );
range = xmax-xmin;
xmin = xmin-0.05*range;
xmax = xmax+0.05*range;

// sort based on average change
count = #avgchange;
for (i=0;i<count;i++)
{
	smallest = i;
	for (j=i+1;j<count;j++)
		if (avgchange[j] < avgchange[smallest])
			smallest = j;
			
	// percentage changes
	temp = avgchange[i];
	avgchange[i] = avgchange[smallest];
	avgchange[smallest] = temp;

	// minus vals
	temp = output_dn[i];
	output_dn[i] = output_dn[smallest];
	output_dn[smallest] = temp;

	// plus vals
	temp = output_up[i];
	output_up[i] = output_up[smallest];
	output_up[smallest] = temp;
	
	// down ys
	temp = yvals_dn[i];
	yvals_dn[i] = yvals_dn[smallest];
	yvals_dn[smallest] = temp;
	
	// up ys
	temp = yvals_up[i];
	yvals_up[i] = yvals_up[smallest];
	yvals_up[smallest] = temp;

	// labels
	buf = labels[i];
	labels[i] = labels[smallest];
	labels[smallest] = buf;

}


// update y axis positions of bars
for( i=0;i<#vars;i++)
{
	yvals_dn[i] = yvals_dn[i] + (2*i);
	yvals_up[i] = yvals_up[i] + (2*i);
	labels[i][0] = labels[i][0] + (2*i);
}

// create the plot
newplot();
plot( output_dn, yvals_dn, {'type'='hbar', 'baseline'=baseoutput, 'color'=[140,140,140], 'series'='(--)', thick=20});
plot( output_up, yvals_up, {'type'='hbar', 'baseline'=baseoutput, 'color'=[240,100,100], 'series'='(++)', thick=20});

axis('x1', {'min'=xmin, 'max'=xmax, 'label'=outlabel});
axis('y1', { 'type'='label', 'labels'=labels, 'min'=0, 'max'=2*#vars} );
annotate( [baseoutput, 0], [baseoutput, 2*#vars], {type='line', color='black'});
plotopt({'legendpos'='bottom', 'coarse'=true, 'fine'=true, 'title'='Tornado Chart'});

>>>>>>> 2c85b0ce6a18646fb532eb72a604d646517b67ae
outln('Tornado chart macro finished successfully.');