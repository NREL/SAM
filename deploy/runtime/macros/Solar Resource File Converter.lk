/*@

<p>This macro converts a solar resource text file from the following formats to 
the SAM CSV format.</p>
<br><br>
<ul>
<li><b>TMY2</b> is a non-delimited format developed by NREL for the National 
    Solar Radiation Database (NSRDB) 1961-1990 update. This legacy data is 
    available from the 
    <a href="https://nsrdb.nrel.gov/data-sets/archives.html">NSRDB Archives</a>.<br></li>
<li><b>TMY3</b> is a comma-delimited format developed by NREL for the 
    NSRDB 1991-2010 update. This legacy data is available from the 
    <a href="https://nsrdb.nrel.gov/data-sets/archives.html">NSRDB Archives</a>.<br></li>
<li><b>EPW</b> is a comma-delimited format developed for the U.S. Department
    of Energy's EnergyPlus building simulation software, and available on the
    <a href="https://energyplus.net/weather">EnergyPlus Weather Data page</>.<br></li>
<li><b>PVsyst CSV</b> is the <a href="http://files.pvsyst.com/help/meteo_pvsyst_standard_format.htm">
    PVsyst standard format for hourly meteo data</a> used by the PVsyst software.<br></li>
<li><b>PVGIS 5 CSV</b> is a comma-delimited format used for TMY weather files downloaded
    from the <a href="http://re.jrc.ec.europa.eu/pvg_tools/en/tools.html#TMY">Interactive
    tools website</a>. Note that the EPW format files from the website should
    work in SAM without conversion.<br></li>
<li><b>SolarAnywhere</b> is a comma-delimited format used by 
    <a href="https://www.solaranywhere.com/">Clean Power Research's weather data 
    service</a>.<br></li>
</ul>

<p>Although SAM can read files in the TMY2, TMY3 and EPW format, those files
contain extra information about uncertainties and other values that SAM does not
use. They are also difficult to work with in spreadsheet software. You can use
this macro to convert those files to a "stripped" down version with only the 
data that SAM uses in a file that you can edit or view in a spreadsheet program.</p>

<p>For more information about weather data for SAM, see the
<a href="https://sam.nrel.gov/weather-data"</a>Weather Data page</a> on the SAM
website.</p>

<p><b>To convert a file:</b></p>
<ol>
<li>Choose a format from the list at right.</li>
<li>Click <b>Run macro</b> above and choose the weather file to convert.</li>
</ol>

<p>The macro will attempt to convert the file you open and save the converted
data in a SAM CSV file in the same folder as the original file with <i>_samcsv</i>
appended to the original name. It will also run SAM's weather file checker on
the file and report any errors it finds.</p>

@*/

// Macro user interface widgets
//@ name=type;type=combo;value=TMY2,TMY3,EPW,PVsyst CSV,PVGIS 5 CSV,SolarAnywhere;label=Weather file format;

if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
}

format = macro.type;
if ( format == '' ) 
{
  msgbox('Please choose a weather file format!\nChoose TMY2, TMY3, EPW, PVsyst CSV or SolarAnywhere from the list at right, and then run the macro again.');
  exit;
}  

function main()
{
	if ( format == 'TMY2' ) { ext = 'tm2'; }
	elseif ( format == 'EPW' ) { ext = 'epw'; }
	else { ext = 'csv'; }

	input_file = choose_file( '', 'Choose weather file to convert', 'Weather Files (*.' + ext + ')|*.' + ext );
	if ( input_file == '' ) return;

	outln( 'File to convert is:\n' + input_file + '\n');

	use_wfcsvconv =  ( format == 'TMY2' || format == 'TMY3' || format == 'EPW' );

	if ( use_wfcsvconv ) { ssc_wfcsvconv( input_file ); }
	elseif ( format == 'SolarAnywhere' ) { solaranywhere_to_sam_csv( input_file ); }
	elseif ( format == 'PVsyst CSV' ) { pvsyst_csv_to_sam_csv( input_file ); }
	elseif ( format == 'PVGIS 5 CSV' ) { pvgis_5_csv_to_sam_csv( input_file ); }
	else { outln( 'No format specified.' ); }
	
	outln( 'Done.');
}

function is_leap_year( y )
{
	if ( mod(y,4) > 0 ) { return false; }
	elseif ( mod(y,100) > 0 ) { return true; }
	elseif ( mod(y,400) > 0 ) { return false; }
	else { return true; }
}

function number_from_string( str )
{
	n = 0;
	for ( i = 0; i<strlen(str); i++ )
	{
		x = mid( str, i, 1 );
		if ( isdigit(x) )
		{
			arr[n] = x;
			n++;
		}	
	}
	
	return join( arr , '' );
}

function arr_to_str ( arr )
{
	if ( typeof( arr ) != 'array' )
	{
		str = null;
	}
	else
	{
		str = to_string( arr );
		str = replace( str, '[ ', '' );
		str = replace( str, ' ]', '' );
		str = replace( str, ' ', '' );
	}
	return str;
}

function wf_check( wf )
{
	obj = ssc_create();
	ssc_var( obj, 'input_file', wf );
	result = ssc_exec( obj, 'wfcheck', {'show_dialog'=true, 'dialog_title'='Processing'} );
	if ( result == 0 )
	{
		n = ssc_var( obj, 'nwarnings');
		if ( n == 0 )
		{
			outln('File passed weather file check.');
			return true;
		}	
		else
		{
			outln( 'File failed weather file check:' );
			for( i=0;i<n;i++ )
			{
				outln( '\t* ' + ssc_var( obj, 'warning' + to_string(i) ) );
			}
			return false;
		}
	}
	else
	{
		outln( 'Failed to run weather file check:\n\n' + result );
		return false;
	}
	ssc_free( obj );
}

// convert TMY2, TMY3, or EPW file formats to SAM CSV using the SSC wfcsvconv compute module
function ssc_wfcsvconv( wf )
{
	obj = ssc_create();
	ssc_var( obj, 'input_file', wf );
	result = ssc_exec( obj, 'wfcsvconv', true );
	if ( result == 0 )
	{
		output = ssc_var( obj, 'output_file');
		if ( file_exists(output) )
		{
			// wfcsvconv names file based on header info appropriate for legacy
			// versions of SAM to display library but not needed now so renaming
			// to less confusing name based on input file name:
			// input_file.csv is converted to input_file_samcsv.csv
			arr = split( wf , '.' );
			arr[ #arr-1 ] = '_samcsv.csv';
			new_name = arr[0];
			for( i=1; i<#arr; i++ ) { new_name += '.' + arr[i]; }
			new_name = replace( new_name, '._', '_');
			/*ext = ext_only( wf );
			if ( ext == 'tm2' ) { new_name = replace( wf, '.' + ext, '.csv' );	}
			elseif ( ext == 'epw' ) { new_name = replace( wf, '.' + ext, '.csv' );	}
			else { new_name = wf; }
			new_name = replace( new_name, '.csv', '_samcsv.csv' );*/
			
			ok = rename_file( output, new_name );
			if ( !ok ) { outln( 'Failed to rename file.' );}
			outln('Weather file successfully converted to:\n\t' + new_name );
			browse( path_only(new_name) ); // show output file folder
			dview_solar( new_name ); // display output file in DView
		}
		else
		{
			outln('An error occurred and the file could not be converted.');
		}
	}
	else
		outln( 'Error: ' + result );
	ssc_free( obj );
}

// given first row of solaranywhere file, return meta data
function solaranywhere_meta_data( hdr )
{
	// test for solaranywhere file
	T.is_sa = strpos(hdr, 'Clean Power Research') > 0;
	
	// data version 3.4, 3.5 etc.
	x = strpos(hdr, "Data Version:");
    y = mid(hdr,x+13,5); // returns letters for v3.0 and earlier
	y = replace(y, ' ', '' );
	T.version = to_real(y); // zero for v3.0 and earlier
	
	// time step in minutes as integer
	x = strpos(hdr, "Time Resolution:");
    y = mid(hdr,x+17,3);
	y = replace(y, ' ', '' );
	y = to_int(y);
	T.time_resolution = y;

	return T;
}

function solaranywhere_time_shift( TS )
{
	/* Convert time stamp. For example, an SA file for 2000 
	   starts with 1/1/2000 1:00 and ends with 1/1/2001 0:00:
	    * 1/1/2000 has 23 hours
	    * all other days have 24 hours
	    * 1/1/2001 has one hour
	   Version 3.5 files may start and end on an arbitrary date and time
	   and be 15, 30, 60 minute data.
	   For example start 2/20/2013 0:30 and end 1/1/2021 0:00
	   SAM CSV starts with 1/1/2000 0:00 and  ends with 12/31/2000 23:00.
	   To convert so that each day starts at 0:00:
		1. If data is subhourly, shift minute to previous time step.
	    1. Shift hour to previous hour
	    2. Shift 0:00 of each day to 23:00 of previous day.
	    3. Shift first 0:00 of each month to 23:00 of last day of previous month
	    4. Shift 1/1/2001 0:00 to 12/31/2000 23:00
	    5. For multi-year files, shift 1/1/2002 0:00 to 12/31/2001 23:00
	*/
	h = TS.hour;
	d = TS.day;
	m = TS.month;
	y = TS.year;
	minute = TS.minute;
	ts = TS.time_step;
	if ( ts < 60 ) // ts can be 15 or 30 as of v3.5
	{ 
		minute = minute - ts;
		if ( minute < 0 ) 
		{
			minute = 60 - ts; 
		}
		if ( minute == 60 - ts ) 
		{
			h = h - 1;
		}
	}
	else
	{
		h = h - 1;
	}	
	if ( h == -1 ) 
	{
		h = 23;
		d = d - 1;
		if ( d == 0 && m == 1 ) // for multi-year files
		{
			y = y - 1;
			m = 12;
			d = 31;
		}
		if ( d == 0 && m == 2 )
		{
			m = 1;
			d = 31;
		}
		if ( d == 0 && m == 3 )
		{
			m = 2;
			if ( is_leap_year( y ) && TS.is_leap ) { d = 29; } // this is a leap year and file contains data for 2/29
			else { d=28; }
		}
		if ( d == 0 && m == 4 )
		{
			m = 3;
			d = 31;
		}
		if ( d == 0 && m == 5 )
		{
			m = 4;
			d = 30;
		}
		if ( d == 0 && m == 6 )
		{
			m = 5;
			d = 31;
		}
		if ( d == 0 && m == 7 )
		{
			m = 6;
			d = 30;
		}
		if ( d == 0 && m == 8 )
		{
			m = 7;
			d = 31;
		}
		if ( d == 0 && m == 9 )
		{
			m = 8;
			d = 31;
		}
		if ( d == 0 && m == 10 )
		{
			m = 9;
			d = 30;
		}
		if ( d == 0 && m == 11 )
		{
			m = 10;
			d = 31;
		}
		if ( d == 0 && m == 12 )
		{
			m = 11;
			d = 30;
		}
	}
	return { 'minute' = minute, 'h'=h, 'd'=d, 'm'=m, 'y'=y };
}

// convert single year or multiple year files from SolarAnywhere to SAM CSV
function solaranywhere_to_sam_csv( wf )
{
	// get input file and open it
	path = path_only( wf );
	fin = 0;
	fout = 0;
	fin = open( wf , 'r' );
	if ( fin == 0 ) 
	{
		outln('Could not open ' + file_only( wf ) + ' for reading.\nExiting script.');
		exit;
	}

	line = 0; // input file line to read
	ok = true;
	str_line = '';
	// check that file appears to be solaranywhere file and get header information
	while ( read_line( fin, str_line ) && ok == true ) 
	{
		// test to see if file is solaranywhere file and get data version and time resolution from first header row
		if ( line == 0 ) 
		{
			X = solaranywhere_meta_data( str_line );
			if ( !X.is_sa ) // Version 3.0 and earlier starts at 12:00 instead of 1:00. Could test for this and skip time shifting step if support for old versions is required.
			{
				msgbox('Input file does not appear to be in a SolarAnywhere format.\n First row does not contain \"Clean Power Research\"). Exiting script.\n');
				exit;
			}
			if ( X.version <= 3.0 )
			{
				msgbox('Input file must be greater than SolarAnywhere Data Version 3.0.\nExiting script.\n');
				exit;
			}
			version = X.version;
			time_resolution = X.time_resolution;
		}
		ok = false; 
		line++;
	}
	
	seek(fin,0,0); // move position in input file back to beginning

	// open output file for writing using location from input file in name
	out_name = replace( file_only(wf), '.csv', '_samcsv.csv' );
	output_file = path + '/' + out_name;
	fout = open( output_file , 'w' );
	if ( fout == 0 ) 
	{
		msgbox('Could not open ' + output_file + ' for writing. Exiting script.');
		exit;
	}
	else
	{
		outln( 'Converting to:\n' + output_file + '\n');
	}

	missing = -999;
	str_line = '';
	line = 0; // input file line to read
	ok = true;
	feb29 = false;
	fcount = 0;
	is_part_first_year = false;
	is_next_file = false;
	outln('Converting file, please wait...');
	// read input file line by line and write to output file as we go
	while ( read_line( fin, str_line ) ) 
	{
		// read first row header data from input file
		// SA and SA TMY3 format use same first row header format
		// write first and second header rows to output file
		if ( line == 0 ) // first header row
		{
			// headers = 'Source,Location ID,Latitude,Longitude,Time Zone,Elevation'; // SAM CSV header (minimum is Latitude,Longitude,Time Zone,Elevation)
			// TO DO could add units DHI Units, DNI Units as in NSRDB files
			headers = 'Source,Latitude,Longitude,Time Zone,Elevation'; // SAM CSV header (minimum is Latitude,Longitude,Time Zone,Elevation)
			ok = write_line( fout , to_string(headers) );
			if ( ok == false ) 
			{
				outln('Failed to write column headers to file. Exiting script.\n');
				exit;
			}
			h1[0] = 'SolarAnywhere ' + to_string(version); // source
			arr = split(str_line, ',');
			h1[1] = arr[4]; // latitude
			h1[2] = arr[5]; // longitude
			h1[3] = arr[3]; // time zone
			h1[4] = arr[6]; // elevation
			ok = write_line( fout , join(h1,',') );
			if ( ok == false ) 
			{
				outln('Failed to write first header row to file. Exiting script.\n');
				exit;
			}
		}
		// write third header row to output file
		if ( line == 1 ) // column header row
		{
			// try to determine input file format
			arr = split( str_line, ',' );
			if ( strpos( lower(arr[0]), 'observation' ) > -1 ) { sa_tmy3 = false; }
			else {sa_tmy3 = true; }
			//get relevant SA column headers and convert to SAM CSV headers
			i_ghi = -1;
			i_dni = -1;
			i_dhi = -1;
			i_tdry = -1;
			i_wspd = -1;
			i_rh = -1;
			i_snow = -1;
			i_albedo = -1;
			i_pm10 = -1;
			i_pm25 = -1;
			for ( i=0; i<#arr; i++ )
			{
				if ( sa_tmy3 ) 
				{
					if ( strpos(lower(to_string(arr[i])),'ghi (w/m^2)') > -1 ) { i_ghi = i; } 
					if ( strpos(lower(to_string(arr[i])),'dni (w/m^2)') > -1 ) { i_dni = i; } 
					if ( strpos(lower(to_string(arr[i])),'dhi (w/m^2)') > -1 ) { i_dhi = i; } 
					if ( strpos(lower(to_string(arr[i])),'dry-bulb (c)') > -1 ) { i_tdry = i; } 
					if ( strpos(lower(to_string(arr[i])),'wspd (m/s)') > -1 ) { i_wspd = i; } 
					if ( strpos(lower(to_string(arr[i])),'rhum (%)') > -1 ) { i_rh = i; } 
					//if ( strpos(lower(to_string(arr[i])),'') > 0 ) { i_snow = i; } 
				}
				else
				{
					if ( strpos(lower(to_string(arr[i])),'global') > -1 ) { i_ghi = i; } 
					if ( strpos(lower(to_string(arr[i])),'direct') > -1 ) { i_dni = i; } 
					if ( strpos(lower(to_string(arr[i])),'diffuse') > -1 ) { i_dhi = i; } 
					if ( strpos(lower(to_string(arr[i])),'deg c') > -1 ) { i_tdry = i; } // avoid 'ambient' because AmbientTemperatureObservationType
					if ( strpos(lower(to_string(arr[i])),'m/s') > -1 ) { i_wspd = i; } // avoid 'wind' because WindSpeedObservationType
					if ( strpos(lower(to_string(arr[i])),'humid') > -1 ) { i_rh = i; } 
					if ( strpos(lower(to_string(arr[i])),'snow') > -1 ) { i_snow = i; } // snow depth in meters
					if ( strpos(lower(to_string(arr[i])),'albedo') > -1 ) { i_albedo = i; }
					if ( strpos(lower(to_string(arr[i])),'10') > -1 ) { i_pm10 = i; } // Particulate Matter 10 (g/m3), PM not used by SAM but requested by CPR https://github.com/NREL/SAM/issues/554
					if ( strpos(lower(to_string(arr[i])),'2.5') > -1 ) { i_pm25 = i; } // Particulate Matter 2.5 (g/m3)
				}
			}
			// SAM CSV headers can be in any order: Year,Month,Day,Hour,Minute,GHI,DNI,DHI,Tdry,Tdew,RH,Pres,Wspd,Wdir,Albedo,Snow
			column_headers = 'Year,Month,Day,Hour,Minute'; // SAM CSV headers
			if ( i_ghi > -1 ) { column_headers += ',GHI'; }
			if ( i_dni > -1 ) { column_headers += ',DNI'; }
			if ( i_dhi > -1 ) { column_headers += ',DHI'; }
			if ( i_tdry > -1 ) { column_headers += ',Tdry'; }
			if ( i_wspd > -1 ) { column_headers += ',Wspd'; }
			if ( i_rh > -1 ) { column_headers += ',RH'; }
			if ( i_snow > -1 ) { column_headers += ',Snow'; }
			if ( i_albedo > -1 ) { column_headers += ',Albedo'; }
			if ( i_pm10 > -1 ) { column_headers += ',PMcoarse'; }
			if ( i_pm25 > -1 ) { column_headers += ',PMfine'; } // period in table key causes trouble so use PMfine instead of PM 2.5
			arr_column_headers = split( column_headers, ','); // for indexing
			ok = write_line( fout , column_headers );
			if ( ok == false ) 
			{
				outln('Failed to write column headers to file. Exiting script.\n');
				exit;
			}
		}
		// convert data row from input file
		// write converted data row to output file
		if ( line > 1 ) // data row
		{
			// replace empty data with -999 missing data flag
			data_str = '';
			is_missing = false;
			for ( i=0; i<strlen(str_line); i++ ) 
			{
				ch_i = mid(str_line, i, 1);
				if ( ch_i == ',' && mid(str_line, i+1, 1) == ','  ) // two consecutive commas indicates missing data in column i
				{
					data_str = data_str + ch_i + to_string(missing);
					is_missing = true;
				}	
				elseif ( right(str_line, 1) == ',' && i == strlen(str_line)-1 ) // comma at end of line indicates missing data in last column
				{
					data_str = data_str + ',' + to_string(missing);
					is_missing = true;
				}
				else
				{
					data_str = data_str + ch_i;
				}	
			}
			// convert comma-separated row to an array
			arr = split( data_str, ',');
			if ( !sa_tmy3 ) 
			{
				format = 'SolarAnywhere';
				datetime = split( arr[0] , ' ');
				date = split( datetime[0] , '/');
				hour = split( datetime[1] , ':');
				// older time series SA format uses yyyy/mm/dd
				// newer format uses mm/dd/yyyy
				if ( line == 2 ) 
				{
					i_yr = 0;
					for ( i=0; i<#date; i++ ) 
					{ 
						if ( strlen(date[i]) > 2 ) { i_yr = i; } 
					}
				}
				if ( i_yr == 0 ) // yyyy/mm/dd
				{ 
					yr = to_int(date[0]);
					mn = to_int(date[1]);
					dy = to_int(date[2]);
				}
				else // mm/dd/yyyy
				{ 
					yr = to_int(date[2]);
					mn = to_int(date[0]);
					dy = to_int(date[1]);
				}
				hr = to_int(hour[0]);
				minute = to_int(hour[1]);
			}
			else 
			{
				format = 'SolarAnywhere TMY3';
				date = split( arr[0] , '/');
				hour = split( arr[1] , ':');
				yr = to_int(date[2]);
				mn = to_int(date[0]);
				dy = to_int(date[1]);
				hr = to_int(hour[0]);
				minute = to_int(hour[1]);
			}
			// check to see if first file starts on day other than January 1
			// if so treat it as a part-year first file
			if ( line == 2 ) // first data row 
			{
				if ( !( mn == 1 && dy == 1 && hr == 1 ) ) // before time stamp converted to SAM CSV convention, so hr = 1
				{
					is_part_first_year = true;
				}
			}
			// test to see if file contains data for 2/29 so we know how to adjust first time step in March.
			if ( !feb29 ) { feb29 = ( mn == 2 && dy == 29 ); } // feb29 is true for leap years if file contains data for 2/29
			T = solaranywhere_time_shift( { 'minute' = minute,'hour'=hr, 'month'=mn, 'day'=dy, 'year'=yr, 'time_step' = time_resolution, 'is_leap' = feb29 } );
			if ( (arr_column_headers ?@ 'Year') > -1 ) { data[arr_column_headers ?@ 'Year'] = T.y; }
			if ( (arr_column_headers ?@ 'Month') > -1 ) { data[arr_column_headers ?@ 'Month'] = T.m; }
			if ( (arr_column_headers ?@ 'Day') > -1 ) { data[arr_column_headers ?@ 'Day'] = T.d; }
			if ( (arr_column_headers ?@ 'Hour') > -1 ) { data[arr_column_headers ?@ 'Hour'] = T.h; }
			if ( (arr_column_headers ?@ 'Minute') > -1 ) { data[arr_column_headers ?@ 'Minute'] = T.minute; }
			if ( (arr_column_headers ?@ 'GHI') > -1 ) { data[arr_column_headers ?@ 'GHI'] = arr[i_ghi]; }
			if ( (arr_column_headers ?@ 'DNI') > -1 ) { data[arr_column_headers ?@ 'DNI'] = arr[i_dni]; }
			if ( (arr_column_headers ?@ 'DHI') > -1 ) { data[arr_column_headers ?@ 'DHI'] = arr[i_dhi]; }
			if ( (arr_column_headers ?@ 'Tdry') > -1 ) { data[arr_column_headers ?@ 'Tdry'] = arr[i_tdry]; }
			if ( (arr_column_headers ?@ 'Wspd') > -1 ) { data[arr_column_headers ?@ 'Wspd'] = arr[i_wspd]; }
			if ( (arr_column_headers ?@ 'RH') > -1 ) { data[arr_column_headers ?@ 'RH'] = arr[i_rh]; }
			if ( (arr_column_headers ?@ 'Snow') > -1 ) // convert m to cm if not -999 flag
			{
				snow = to_real(arr[i_snow]); 
				if ( snow >= 0  ) { snow = snow * 100; } 
				data[arr_column_headers ?@ 'Snow'] = snow;
			}
			if ( (arr_column_headers ?@ 'Albedo') > -1 ) { data[arr_column_headers ?@ 'Albedo'] = arr[i_albedo]; }
			if ( (arr_column_headers ?@ 'PMcoarse') > -1 ) { data[arr_column_headers ?@ 'PMcoarse'] = arr[i_pm10]; }
			if ( (arr_column_headers ?@ 'PMfine') > -1 ) { data[arr_column_headers ?@ 'PMfine'] = arr[i_pm25]; }
			
			// for multi-year input file, write headers if this is beginning
			// of file for new year
			if ( is_next_file ) 
			{
				close(fout);
				output_file = replace( wf, '.csv', '_samcsv_' + to_string(T.y) + '.csv');
				outln('Data for year ' + to_string(T.y) + ' in:\n  ' + file_only(output_file) );
				fout = open( output_file , 'w' );
				if ( fout == 0 ) 
				{
					msgbox('Could not open ' + output_file + ' for writing. Exiting script.');
					exit;
				}
				write_line( fout , headers );
				write_line( fout , join(h1,',') );
				write_line( fout , column_headers );
				is_next_file = false;
			}
			// write converted data row to output file, skipping February 29 for leap years
			// TO DO this if statement can be removed to include leap days if needed (SAM should handle files with leap days, but may cause problems)
			if ( !( T.m ==2 && T.d == 29 ) ) 
			{
				ok = write_line( fout , join(data,',') );
			}  
			if ( ok == false ) 
			{
				outln('Failed to write data row ' + line + ' to file.\n');
				exit;
			}
			last_minute = 60 - time_resolution;
			fyear = T.y;
			// check to see if this is the final time step of the year
			// if it is close it
			if ( T.m == 12 && T.d == 31 && T.h == 23 && T.minute == last_minute )
			{
				close(fout);
				// if input file has more data, then it is a multi-year file
				// rename output file to include year
				if ( fcount == 0 && !eof(fin) ) 
				{ 
					outln('\nMulti-year input file detected. Converting to separate files.\n');
					new_name = replace( output_file, '_samcsv', '_samcsv_' + fyear);
					// if first year file has partial data, rename it
					if ( is_part_first_year ) { new_name = replace( new_name, '_samcsv_' + fyear, '_samcsv_' + fyear + 'part'); }
					ok = rename_file( output_file , new_name );
					if (ok == true )
					{
						outln('Year 1 (' + fyear + ') file renamed to:\n  ' + file_only(new_name));
						fyear++;
					}	
					else
					{
						outln('  Failed to rename Year 1 output file');
					}
				}
				if ( is_missing ) { outln( '  -999 values in converted file indicate the original file is missing data. Open the file after the conversion finishes to see what data is missing.'); }
				// set flag to open next file it at start of while loop
				is_next_file = true; // use flag to avoid creating file with headers but no data
				fcount++;
			}
		}  
		if ( feb29 == false ) { line++; }
	}

	// close input and output files
	close(fout);
	close(fin);

	// check to see if input file was for a complete year
	// if not, rename the output file with a partial year
	if ( mod(line-2,8760)!=0 ) // line should be the total number of lines in the input file
	{  
		outln('\n'+file_only(output_file) + ' does not contain a complete year of data.');
		if ( fcount > 0 ) // last year from multi-year file with partial cata
		{ 
			new_name = replace( output_file, '_samcsv_' + to_string(T.y), '_samcsv_' + to_string(T.y) + 'part' ); 
		}	
		else // single-year file with partial data
		{ 
			new_name = replace( output_file, '_samcsv', '_samcsv_part' ); 
		} 
		ok = rename_file( output_file , new_name );
		if (ok==true) 
		{
			outln('File renamed to\n ' + file_only(new_name) ); 
			output_file = new_name;
		}
		else
		{
			outln('Unable to rename ' + file_only(output_file) ); 
		}
	}
	browse( path_only(output_file) );
} 

// convert PVsyst CSV weather format to SAM CSV
function pvsyst_csv_to_sam_csv( wf )
{
	// get input file and open it
	fin = 0;
	fin = open( wf , 'r' );
	if ( fin == 0 ) 
	{
		outln('Could not open ' + file_only( wf ) + ' for reading.\nExiting script.');
		exit;
	}
	
	outln('Converting file, please wait...');
	str_line = '';
	ts = 0;
	line = 0;
	while ( read_line( fin, str_line ) ) 
	{
		if ( line == 0 && strpos( str_line, '#') < 0 )
		{
				outln('Input file does not appear to be in PVsyst CSV format: First row does not contain a hashtag (#). Exiting script.\n');
				exit;
		}
		if ( strpos( str_line, '#') > - 1 )
		{
			arr = split( str_line , ',' );
			if ( #arr > 1 )
			{
				if ( strpos( lower(arr[0]) , 'lat' ) > -1 ) { Header{'Latitude'} = arr[1]; }
				if ( strpos( lower(arr[0]) , 'lon' ) > -1 ) { Header{'Longitude'} = arr[1]; }
				if ( strpos( lower(arr[0]) , 'alt' ) > -1 ) { Header{'Elevation'} = arr[1]; }
				if ( strpos( lower(arr[0]) , 'zone' ) > -1 ) { Header{'Time Zone'} = arr[1]; }
			}
		}
		if ( strpos( lower(str_line), 'year' ) > -1 )
		{
			if ( strpos( str_line , 'WindVel' ) > -1 ) { replace( str_line, 'WindVel', 'Wspd' ); }
			keys = split( str_line, ',' );
		}
		if ( strpos( lower(str_line), 'w/m2' ) == -1 && strpos( str_line, '#' ) == - 1 )
		{
			arr = split( str_line, ',' );
			for ( i=0; i<#arr; i++ )
			{
				Data{keys[i]}[ts] = arr[i];
			}
			ts++;
		}
		line++;
	}
	close( fin );

	output_file = replace( wf, '.csv' , '_samcsv.csv' );
	
	fout = open( output_file, 'w' );

	keys = @Header;
	str = '';
	for ( i=0; i<#keys; i++ )
	{
		str += keys[i];
		if ( i<#keys-1 ) { str += ','; }
		//else { str += '\n'; }
		else { write_line( fout, str ); }
	}
	str = '';
	for ( i=0; i<#keys; i++ )
	{
		str += Header{keys[i]};
		if ( i<#keys-1 ) { str += ','; }
		//else { str += '\n'; }
		else { write_line( fout, str ); }
	}

	keys = @Data;
	for ( i=0; i<#Data{keys[0]}; i++ )
	{
		str = '';
		for ( j=0; j<#keys; j++ )
		{
			str += Data{keys[j]}[i];
			if ( j<#keys-1 ) { str += ','; }
			//else { str += '\n'; }
		}
		write_line( fout, str );
	}

	close( fout );

	outln('Weather file converted to:\n\t' + output_file );
	
	if ( wf_check( output_file ) ) 
	{ 
		dview_solar( output_file );
		browse( path_only( output_file ) );
	}

}

// convert CSV weather file from PVGIS 5 website to SAM CSV
function pvgis_5_csv_to_sam_csv( wf )
{
	// get input file and open it
	fin = open( wf, 'r' );
	if ( fin == 0 )
	{
		outln( 'Failed to open file!\n' + wf + '\nExiting script.' );
		exit;
	}
	
	str = '';
	line = 0;
	data = [];
	meta = 0;
	line_one_ok = false;
	while ( read_line( fin, str ) )
	{
	
		// convert line to lower case
		str = lower( str );
		
		// determine whether line is header data or weather data
		// if header data, the read lat, lon, elevation
		// otherwise read the weather data
		if ( strpos( str, 'latitude' ) > -1 )
		{
			arr = split( str, ':' );
			lat = replace( arr[1], ' ', '' );
			line_one_ok = true;
			meta++;
			continue;
		}
		elseif ( strpos( str, 'longitude' ) > -1 )
		{
			arr = split( str, ':' );
			lon = replace( arr[1], ' ', '' );
			meta++;
			continue;
		}
		elseif ( strpos( str, 'elevation' ) > -1 )
		{
			arr = split( str, ':' );
			elv = replace( arr[1], ' ', '' );
			meta++;
			continue;
		}
		elseif ( line_one_ok ) // line is weather data
		{
			arr = split( str, ',' );
			if ( #arr == 2 ) { continue; } // skip list of tmy years
		}
		else
		{
			outln( 'File does not appear to be PVGIS 5 TMY CSV format. Exiting script.' );
			exit;
		}

		
		// once lat, lon is known, use Google API to get elevation
		if ( meta == 3 )
		{
			// time zone is missing from file, so get from Google Time Zone API
			// via geocode function
			tz = null;
			geo = geocode( to_string(lat) + ',' + to_string(lon) );
			if ( geo.ok == true ) { tz = geo.tz; }
			else { outln('Failed to get time zone from Google Time Zone API.'); }
			meta++;
		}
			
		// header rows for SAM CSV
		// Latitude,Longitude,Time Zone,Elevation
		// -34.820000,-58.530000,-3.0,20
		// Year,Month,Day,Hour,tdry,rhum,ghi,dni,dhi,infrared,wspd,wdir 
		// note that PVGIS provides infrared, but SAM does not use it
		if ( line == 0 )
		{
			data[line] = 'Latitude,Longitude,Time Zone,Elevation,Source';
			line++;
		}	
		if ( line == 1 )
		{
			data[line] = lat+','+lon+','+tz+','+elv+',PVGIS V5';
			line++;
		}	
	
		if ( strpos( arr[0], 'date' ) > -1 ) // this is the data header row
		{
			pvgis_h = arr; // store column headings to identify rows in second pass
			// Date&Time (UTC),Dry bulb temperature (deg. C),Relative Humidity (%), Global horizontal irradiance (W/m2) ,
			//Direct (beam) normal Irradiance (W/m2),Diffuse horizontal irradiance (W/m2), Infrared radiation downwards (W/m2),
			//  Windspeed (m/s), Wind direction (deg.),  Air pressure (Pa)
			for ( i=0; i<#pvgis_h; i++ )
			{
				if( strpos( pvgis_h[i], 'date' ) > -1 ) { h[i] = 'Year,Month,Day,Hour,Minute';} // deg C
				if( strpos( pvgis_h[i], 'dry bulb' ) > -1 ) { h[i] = 'tdry';} // deg C
				if( strpos( pvgis_h[i], 'humidity' ) > -1 ) { h[i] = 'rhum';} // %
				if( strpos( pvgis_h[i], 'global' ) > -1 ) { h[i] = 'ghi';} // w/m2
				if( strpos( pvgis_h[i], 'direct' ) > -1 ) { h[i] = 'dni';} // w/m2
				if( strpos( pvgis_h[i], 'diffuse' ) > -1 ) { h[i] = 'dhi';} // w/m2
				if( strpos( pvgis_h[i], 'infrared' ) > -1 ) { h[i] = 'infrared';}
				if( strpos( pvgis_h[i], 'speed' ) > -1 ) { h[i] = 'wspd';} // m/s
				if( strpos( pvgis_h[i], 'direction' ) > -1 ) { h[i] = 'wdir';} // deg
				if( strpos( pvgis_h[i], 'pressure' ) > -1 ) 
				{
					h[i] = 'pres'; // pas
					i_pres = i; // store index for conversion below
				}
			}
			if ( line == 2 )
			{
				data[line] = '';
				for ( i=0; i<#h; i++ )
				{
					if ( i == 0 ) { pre = ''; }
					else { pre = ','; }
					data[line]+=pre+h[i];
				}
				line++;
			}
		}
		else 
		{
			// convert time stamp data 01/01/2013 00:00:00
			tstamp_arr = split( arr[0], ' ' );
			date = split( tstamp_arr[0], '/' );
			day = to_int(date[0]);
			month = to_int(date[1]);
			year = to_int(date[2]);
			time = split( tstamp_arr[1], ':' );
			hour = to_int(time[0]);
			minute = to_int(time[1]);
			second = to_int(time[2]);
			data[line] = year +','+month+','+day+','+hour+','+minute;
			// read weather data
			for ( i=1; i<#arr; i++ )
			{
				value = to_real( arr[i] );
				if ( i == i_pres ) { value = value / 100; } // convert pas to millibar
				data[line]+= ','+to_string(value);
			}
			line++;
		}
	
	}
	
	// close input file
	close ( fin );
	
	// name output file and open it
	fout_name = replace( wf, '.csv', '_samcsv.csv' );
	fout = open( fout_name , 'w' );
	
	// write data to output file
	for ( i=0; i<#data; i++ )
	{
		ok = write_line( fout, data[i] );
		if ( !ok ) 
		{
			'Failed to write Line ' + i + 'to file.\n\t' + data[i]; 
			exit;
		}
		
	}
	
	// close output file
	close( fout );

	outln('Weather file converted to:\n\t' + fout_name );

	if ( wf_check( output_file ) ) 
	{ 
		dview_solar( output_file );
		browse( path_only( output_file ) );
	}
	
}

// Main ////////////////////////////////////////////////////////////////////////

main();

