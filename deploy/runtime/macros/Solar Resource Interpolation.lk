/*@

<p>SAM CSV formatted solar resource file is linearly interpolated from hourly,
30 minute, or 5 minute data to sub-hourly data.
<br><br>
If the file is TMY2, TMY3, EPW, or SolarAnywhere format, it can be converted 
using the Solar Resource File Converter macro.
<br><br>
Options:<br><ul>
<li>Interval Length: "Same as Load" depends on timestep in Electric Load page. 30, 15, 10, or 5 minutes.
<li>File selected from: Interpolates the solar resource file that is selected in the Location 
and Resource page. Or, solar resource file is requested from user. </ul>
<br><br>
Input:<br><ul>
<li>SAM CSV format with 4 required columns: Year, Month, Day and Hour.
<li>Optional column: Minute for 30 or 5 minute data
<li>Irradiance Measurement: Averaged hourly data or instantaneous data measured at hour or
half-hour intervals.
<li>For previously interpolated files, macro will look for original in SAM's downloaded weather
files and solar_resource folders.<br></ul>

Output:<br><ul>
<li>Automatically selected in the "Use a specific weather file on disk" section
<li>Saved in "SAM Downloaded Weather Files" folder
<li>For averaged data, measured irradiance values are shifted to middle of interval,
but meteorological data, which were "observed at or near the designated time", were not shifted.
<a href = "http://www.nrel.gov/docs/fy07osti/41364.pdf"> NSRDB 1991-2005 Update: User's Manual</a>
<li>Wind direction interpolated periodically
<li>Irradiance is not interpolated across sunrise and sunset boundaries</ul>



<br><br>
<i> Click "Run macro" above to interpolate and load weather file. </i>

@*/

//@ name=timesteps;type=combo;label=Interval Length:;value=Same as Load,30 min,15 min,10 min,5 min,1 min;sel=0;
//@ name=file_loc;type=combo;label=File selected from:;value=Location and Resource page,User input;sel=0;

// interpolates between two values measured at t0 and t1;
// timesteps is number of points to interpolate between t0 and t1
// options: 'noslope', slope = 0; 
//			'wind', period = 360;
//			'minute', period = 60;
//			else, slope = v1 - v0;
function linear_interpolate(values, timesteps, option){
	dt = 1/(timesteps+1);
	v0 = values[0];
	v1 = values[1];
	if (option == 'noslope'){
		for (i=0; i<timesteps; i++){
			result[i] = v0;
		}
	}
	else if (option == 'wind'){
		period = 360;
		slope = v1 - v0;
		if (v0 == 999){
			for (i=0; i<timesteps; i++) result[i] = 999;
		}
		else if (v1 == 999){
			for (i=0; i<timesteps; i++) result[i] = values[0];
		}
		else{
			if (abs(slope) > period/2){
				if (v1 > v0){
					slope = slope-period;
				}
				else{
					v0 = v0-period;
					slope = slope+period;
				}
			}
			for (i=0; i<timesteps; i++){
				result[i] = v0 + slope*(i+1)*dt;
				if (result[i] > period){
					result[i] -= period;
				}
				if (result[i] < 0){
					result[i] +=period;
				}
			}
		}
	}
	else if (option == 'minute'){
		if (v1 == 0) {
			v1 = 60;
		}
		ts = abs(v1 - v0);
		if (ts==0) ts = 60/(timesteps+1);
		else ts = ts/(timesteps+1);
		for (i=0; i<timesteps; i++){
			result[i] = v0 + (i+1)*ts;
			if (result[i] >= 60) result[i] -= 60;
		}
	}
	else {
		slope = v1 - v0;
		for (i=0; i<timesteps; i++){
			result[i] = v0 + slope*(i+1)*dt;
		}
	}
	return result;
}

// extrapolates values for t2 using values from t0 and t1
function extrapolate(values, option){
	slope = values[1] - values[0];
	result = values[1] + slope;
	if (option == 'wind'){
		if (result != 999){
			if (result > 360) result -= 360;
			if (result < 0) result += 360;
		}
	}
	return result;
}

// inserts value into array at index, returns new array
function insert(value, arr, index){
	if (index >= #arr) return 0;
	for (i=0;i<index; i++){
		result[i] = arr[i];
	}
	result[index] = value;
	for (i=index; i<#arr; i++){
		result[i+1] = arr[i];
	}
	return result;
}

// converts each element in array into numeric
function to_numeric(arr){
	if (typeof(arr) != 'array'){
		return 0;
	}
	else{
		for (i=0; i<#arr; i++){
			if (!isalpha(arr[i])) result[i] = to_real(arr[i]);
			else{
				return 0;
			}
		}
	}
	return result;
}

// returns the column position of properties that need 
// to be interpolated with specific considerations; -1 if not found
// [Year, Month, Day, Hour, Min, Wdir, other1, other2...]
function parse_header(arr){
	cols = [-1, -1, -1, -1, -1, -1];
	inc = 0;
	for (i=0; i<#arr; i++){
		val = arr[i];
		if (stricmp(arr[i], "Year") == 0 || stricmp(arr[i], "Yr") == 0) cols[0] = i;
		else if (stricmp(arr[i], "Month") == 0 || stricmp(arr[i], "Mo") == 0) cols[1] = i;
		else if (stricmp(arr[i], "Day") == 0) cols[2] = i;
		else if (stricmp(arr[i], "Hour") == 0 || stricmp(arr[i], "Hr") == 0) cols[3] = i;
		else if (stricmp(arr[i], 'Minute') == 0 || stricmp(arr[i], "Min") == 0) cols[4] = i;
		else if (stricmp(arr[i], "Wdir") == 0 || stricmp(arr[i], "wind direction") == 0) cols[5] = i;
		else{
			if (strlen(arr[i]) > 0) {
				cols[6+inc] = i;
				inc++;
			}
		}
	}
	if (cols[0] == -1 || cols[1] == -1 || cols[2] == -1 || cols[3] == -1){
		msgbox("File missing Year, Month, Day or Hour columns.");
		exit;
	}
	return cols;
}

// finds a search term as a single name or a list of names in an array
function find_col(arr, value){
	// single search term
	if (isalnum(value)){
		for (i=0; i<#arr; i++){
			if ((stricmp(arr[i],value)==0)) return i;
		}
		return -1;
	}
	// array of search terms
	else{
		if (!#arr) return -1;
		for (i=0; i<#arr; i++){
			for (j=0; j<#value; j++){
				if ((stricmp(arr[i],value[j])==0)) return i;
			}
		}
		return -1;
	}
}

// var1, what kind of data: 0 if instantaneous, 1 if averaged data
// var2, when data is recorded: 0 if top of hour, 1 if bottom of hour, 2 if every 30 min, 3 if every 5 min
function identify_case(input_data, lat, long, tz){
	case = [-1, -1];
	ok = false;
	tmp = '';
	line = 0;
	minstamps = '';
	while(line < #input_data && ok == false){
		if (line==0){
			arr = input_data[line];
			long = find_col(arr, ["longitude", "long", "lon", "lng"]);
			lat = find_col(arr, ["latitude", "lat"]);
			tz = find_col(arr, ["time zone", "tz", "timezone"]);
			if (long == -1){
				outln("Error reading longitude.");
				exit;
			}
			if (lat == -1){
				outln("Error reading latitude.");
				exit;
			}
			if (tz == -1){
				outln("Error reading timezone.");
				exit;
			}
		}
		else if (line==1){
			arr = input_data[line];
			long = to_real(arr[long]);
			lat = to_real(arr[lat]);
			tz = to_real(arr[tz]);
			//outln("Location: "+ lat+" latitude and "+long+" longitude, at "+tz+" timezone.");
		}
		else if (line == 2){
			cols = parse_header(input_data[line]);
			if (cols[4] == -1){
				case[0] = 1;
				case[1] = 1;
			}
			else{
				case[0] = 0;
			}
		}
		if (case[0] == 0){
			if (line == 3){
				minstamps[0] = to_real(input_data[line][cols[4]]);
			}
			else if (line == 4){
				minstamps[1] = to_real(input_data[line][cols[4]]);
				if (minstamps[1] - minstamps[0] == 5) {
					case[1] = 3;
				}
				else if (minstamps[1] - minstamps[0] == 30){
					case[1] = 2;
				}
				else if (minstamps[1] == 30 && minstamps[0] == 30){
					case[1] = 1;
				}
				else if (minstamps[1] == 0 && minstamps[1] == 0){
					case[1] = 0;
				}
				else {
					outln('Supported input timesteps are 60, 30, and 5 minutes. Other timestep found, exiting');
					exit;
				}
			}
		}
		if (case[0] != -1 && case[1] != -1){
			ok = true;
		}
		line++;
	}
	return case;
}

function iterpolate_time(prev, curr, hour, timesteps, case) {
	for (i=0; i<timesteps; i++) {
		if (hour == 0) {
			if (case[1] != 1) {
				result[i] = prev;
			}
			elseif (case[1] == 1 && i < (timesteps / 2) - 1) {
				result[i] = prev;
			}
			else {
				result[i] = curr;
			}
		}
		else {
			result[i] = curr;
		}
	}
	return result;
}

// ts: # of timesteps to add between existing points
function intrp_data(input_data, ts, case){
	cols = [];
	lat = 0;
	long = 0;
	tz = 0;
	line = 0;
	inc = 0;
	prev = [0];
	pprev = [];
	output = alloc(8760*(ts+1));
	avg_flag = false;
	while(line < #input_data){
		arr = input_data[line];
		if (line==0 || line==1){
			output[line] = arr;
		}
		else if (line==2){
			cols = parse_header(arr);
			if (cols[4] == -1){
				avg_flag = true;
				arr = insert('Minute', arr, cols[3]+1);
				cols = parse_header(arr);
			}
			output[line] = arr;
		}
		else{
			arr = to_numeric(arr);
			if (avg_flag){
				arr = insert(0, arr, cols[4]);
			}
			output[line+inc] = arr;
			if (line == #input_data - 2) pprev = arr;
			if (prev==[0]) prev = arr;
			else{
				for (i=0; i<#cols; i++){
						if (i<1) result = linear_interpolate([prev[cols[i]],arr[cols[i]]], ts, 'noslope'); // year
						else if (i==1) result = iterpolate_time(prev[cols[i]], arr[cols[i]], arr[cols[i+2]], ts, case); // month
						else if (i==2) result = iterpolate_time(prev[cols[i]], arr[cols[i]], arr[cols[i+1]], ts, case); // day
						else if (i==3) result = linear_interpolate([prev[cols[i]],arr[cols[i]]], ts, 'noslope'); // hour
						else if (i==4) result = linear_interpolate([prev[cols[i]],arr[cols[i]]], ts, 'minute');
						else if (i==5){
							if (cols[i] != -1) result = linear_interpolate([prev[cols[i]],arr[cols[i]]], ts, 'wind');
							else continue;
						}
						else result = linear_interpolate([prev[cols[i]],arr[cols[i]]], ts, '');
						for (j=0; j<#result; j++){
							output[line+inc+j][cols[i]] = result[j];
						}
				}
				inc = inc + (ts);
				prev = arr;
				output[line+inc] = arr;
			}
		}
		line++;
	}
	

	// last 3 interpolated points depend on extrapolating next 0th hour data from 
	// given 22 and 23 hour, end-of-year, data
	timestep = prev[cols[4]] - pprev[cols[4]];
	if (timestep==0) dt = 60/(ts+1);
	else dt = timestep/(ts+1);
	for (i=0; i<#cols; i++){
		if (i<4){
			for (j=0; j<ts; j++) int[j] = prev[cols[i]];
		}
		else if (i==4){
			for (j=0; j<ts; j++){
				int[j] = prev[cols[i]] + (j+1)*dt;
				if (int[j] >= 60) int[j] -=60;
				else if (int[j] < 0) int[j] += 60;
			}
		}
		else if (i==5){
			if (cols[5] != -1){
				ext[cols[i]] = extrapolate([pprev[cols[i]], prev[cols[i]]],'wind');
				int = linear_interpolate([prev[cols[i]],ext[cols[i]]], ts, 'wind');
			}
			else{
				continue;
			}
		}
		else{
			ext[cols[i]] = extrapolate([pprev[cols[i]], prev[cols[i]]],'');
			int = linear_interpolate([prev[cols[i]],ext[cols[i]]], ts, '');
		}
		for (j=0; j<#int; j++){
			output[line+inc+j][cols[i]] = int[j];
		}
	}
	
	return output;
}

// ts: # of timestamps to shift forward by
// shift_time: if false, timestamps & values shifted together;
// if true, values shifted but timestamps are not
function shift_forward(input, ts, case){
	for (i=0; i<3; i++){
		output[i] = input[i];
	}
	cols = parse_header(input[2]);
	
	t0 = input[3];
	t1 = input[4];
	dt = t1[cols[4]] - t0[cols[4]];
	// extrapolate backwards for ts timesteps, shifting timestamps if necessary
	for (i=0; i<ts; i++){
		if (case == [1,1]){
			for (j=0; j<5; j++){
				output[3+i][cols[j]] = input[3+i][cols[j]];
			}
		}
		else{
			for (j=0; j<4; j++){
				output[3+(ts-1-i)][cols[j]] = input[3+i][cols[j]];
			}
			minute = t0[cols[4]] - dt;
			if (minute < 0) minute+=60;
			if (minute >= 60) minute-=60;
			output[3+(ts-1-i)][cols[4]] = minute;
		}
		if (cols[5] != -1) output[3+(ts-1-i)][cols[5]] = extrapolate([t1[cols[5]], t0[cols[5]]], 'wind');
		for (j=6; j<#cols; j++){
			output[3+(ts-1-i)][cols[j]] = extrapolate([t1[cols[j]], t0[cols[j]]], '');
		}
		t1 = t0;
		t0 = output[3+(ts-1-i)];
	}
	// copy rest of data, shifting timestamps if necessary
	if (case == [1,1]){
		for (i=3+ts; i<#input; i++){
			for (j=0; j<5; j++){
				output[i][cols[j]] = input[i][cols[j]];
			}
			if (cols[5] != -1) output[i][cols[5]] = input[i-ts][cols[5]];
			for (j=6; j<#cols; j++){
				output[i][cols[j]] = input[i-ts][cols[j]];
			}
		}
	}
	else{
		for (i=3+ts; i<#input; i++){
			for (j=0; j<#cols; j++){
				if (cols[j] != -1) output[i][cols[j]] = input[i-ts][cols[j]];
			}
		}
	}
	if (case == [0,1]){
		for (i=3; i<#output-ts; i++){
			output[i][cols[3]] = output[i+ts][cols[3]];
		}
		final_hour = output[#output-ts][cols[3]];
		for (i=#output-ts; i<#output; i++){
			output[i][cols[3]] = final_hour;
		}
	}
	
	return output;
}

// calculates Julian day of the year
function julian(yr, month, day){
	nday = [31,28,31,30,31,30,31,31,30,31,30,31];
	i = 1;
	jday = 0;

	if( mod(yr, 4) == 0 )                      /* For leap years */
		k = 1;
	else
		k = 0;

	while( i < month ) {
		jday = jday + nday[i-1];
		i++;
	}
	if( month > 2 )
		jday = jday + k + day;
	else
		jday = jday + day;
	return(jday);
}

function fmod(x, y){
	rem = x;
	if (rem>0){
		while (rem-y > 0){
			rem -= y;
		}
	}
	else if (rem<0){
		while (rem+y < 0){
			rem += y;
		}
	}
	return rem;
}

function sun_over_horizon(year, month, day, lat, long, tz, sunrise, sunset){
	DTOR = 0.0174532925;
	M_PI = 3.14159265358979323;
	jday = julian(year, month, day);
	
	delta = year - 1949;
	leap = delta/4;
	jd = 32916.5 + delta*365 + leap + jday;
	time = jd - 51545.0;
	
	mnlong = 280.46 + 0.9856474*time;
	mnlong = fmod(mnlong,360.0);      /* Mean longitude between 0-360 deg */
	if( mnlong < 0.0 )
		mnlong = mnlong + 360.0;

	mnanom = 357.528 + 0.9856003*time;
	mnanom = fmod(mnanom,360.0);
	if( mnanom < 0.0 )
		mnanom = mnanom + 360.0;
	mnanom = mnanom*DTOR;             /* Mean anomaly between 0-2pi radians */

	eclong = mnlong + 1.915*sin(mnanom) + 0.020*sin(2.0*mnanom);
	eclong = fmod(eclong,360.0);
	if( eclong < 0.0 )
		eclong = eclong + 360.0;
	eclong = eclong*DTOR;

	oblqec = ( 23.439 - 0.0000004*time )*DTOR;   /* Obliquity of ecliptic in radians */
	num = cos(oblqec)*sin(eclong);
	den = cos(eclong);
	ra  = atan(num/den);                         /* Right ascension in radians */
	if( den < 0.0 )
		ra = ra + M_PI;
	else if( num < 0.0 )
		ra = ra + 2.0*M_PI;

	dec = asin( sin(oblqec)*sin(eclong) );       /* Declination in radians */
	
	lat_r = lat*DTOR;
	arg = -tan(lat_r)*tan(dec);
	if( arg >= 1.0 ) ws = 0.0;                         	/* No sunrise, continuous nights */
	else if( arg <= -1.0 ) ws = M_PI;                          /* No sunset, continuous days */
	else ws = acos(arg);  					/* Sunrise hour angle in radians */
	
	
	E = ( mnlong - ra/DTOR )/15.0;       	/* Equation of time in hours */
	if( E < - 0.33 )   						/* Adjust for error occurring if mnlong and ra are in quadrants I and IV */
		E = E + 24.0;
	else if( E > 0.33 )
		E = E - 24.0;
	
	sunrise = 12.0 - (ws/DTOR)/15.0 - (long/15.0 - tz) - E;
	sunset  = 12.0 + (ws/DTOR)/15.0 - (long/15.0 - tz) - E;
}

// check that interpolated irradiances do not cross sunrise and sunset times
function check_sunup(output, lat, long, tz){
	cols = parse_header(output[2]);
	year = to_real(output[3][cols[0]]);
	month = 1;
	day = 1;
	lat = to_real(lat);
	long = to_real(long);
	tz = to_real(tz);
	sunrise = -1;
	sunset = -1;
	sun_over_horizon(year, month, day, lat, long, tz, sunrise, sunset);
	
	ghi_s = ["ghi", "gh", "global", "global horizontal", "global horizontal irradiance"];
	dni_s = ["dni", "dn", "beam", "direct normal", "direct normal irradiance"];
	dhi_s = ["dhi", "df", "diffuse", "diffuse horizontal", "diffuse horizontal irradiance"];
	ghi_c = find_col(output[2], ghi_s);
	dni_c = find_col(output[2], dni_s);
	dhi_c = find_col(output[2], dhi_s);

	
	ts = 60/(output[4][cols[4]] - output[3][cols[4]]);
	n_days = (#output-3)/(24*ts);
	if (n_days < 1) n_days = 3+1;

	for (i=0; i<n_days; i++){
		r = 3+i*24*ts;
		inc = 0;
		sunrise = -1;
		sunset = -1;
		year = to_real(output[r][cols[0]]);
		month = to_real(output[r][cols[1]]);
		day = to_real(output[r][cols[2]]);
		sun_over_horizon(year, month, day, lat, long, tz, sunrise, sunset);
		time =  to_real(output[r+inc][cols[3]]) + to_real(output[r+inc][cols[4]])/60;

		// before sunrise
		while (time < sunrise - 1/ts){
			if (ghi_c > 0) output[r+inc][ghi_c] = 0;
			if (dni_c > 0) output[r+inc][dni_c] = 0;
			if (dhi_c > 0) output[r+inc][dhi_c] = 0;
			inc++;
			time =  to_real(output[r+inc][cols[3]]) + to_real(output[r+inc][cols[4]])/60;
		}
		// output[i+inc] is just after sunrise and takes on interpolated value between 0 and irradiance of next timestep
		if (ghi_c > 0){
			output[r+inc][ghi_c] = linear_interpolate([0, output[r+inc+1][ghi_c]], 1, '')[0];
		}
		if (dni_c > 0){
			output[r+inc][dni_c] = linear_interpolate([0, output[r+inc+1][dni_c]], 1, '')[0];
		}
		if (dhi_c > 0){
			output[r+inc][dhi_c] = linear_interpolate([0, output[r+inc+1][dhi_c]], 1, '')[0];
		}
		inc++;
		time =  to_real(output[r+inc][cols[3]]) + to_real(output[r+inc][cols[4]])/60;
		
		while (time < sunset - 1/ts){
			inc++;
			time =  to_real(output[r+inc][cols[3]]) + to_real(output[r+inc][cols[4]])/60;
		}
		// output[i+inc] is just after sunset and takes on interpolated value between previous timestep and 0
		if (ghi_c > 0){
			output[r+inc][ghi_c] = linear_interpolate([output[r+inc-1][ghi_c], 0], 1, '')[0];
		}
		if (dni_c > 0){
			output[r+inc][dni_c] = linear_interpolate([output[r+inc-1][dni_c], 0], 1, '')[0];
		}
		if (dhi_c > 0){
			output[r+inc][dhi_c] = linear_interpolate([output[r+inc-1][dhi_c], 0], 1, '')[0];
		}
		inc++;
		time =  to_real(output[r+inc][cols[3]]) + to_real(output[r+inc][cols[4]])/60;
		
		while (time > sunset && inc<=24*ts){
			if (ghi_c > 0) output[r+inc][ghi_c] = 0;
			if (dni_c > 0) output[r+inc][dni_c] = 0;
			if (dhi_c > 0) output[r+inc][dhi_c] = 0;
			inc++;
			if (r+inc < #output) time =  to_real(output[r+inc][cols[3]]) + to_real(output[r+inc][cols[4]])/60;
			else{
				// not all hours of day given
				i = n_days;
				break;
			}
		}
	}
	return output;
}

// interpolates the weather data as a specific case
function solar_resource_interpolate(input_data, intervals_per_hour, case){
	ts_to_add = 0;
	shift_by_ts = intervals_per_hour/2;
	if (case[1] == -1){
		outln('Data measurement regime not identified, exiting.');
		exit;
	}
	// original data is hourly
	if (case[1] == 0 || case[1] == 1){
		ts_to_add = intervals_per_hour - 1;
	}
	// original data is half-hourly
	elseif (case[1] == 2) {
		ts_to_add = intervals_per_hour/2 - 1;
	}
	// original data is 5 min
	else {
		ts_to_add = intervals_per_hour/12 - 1;
	}
	
	output = intrp_data(input_data, ts_to_add, case);
	// instantaneous data, measured at bottom of hour needs to be shifted forward
	// since data currently starts with the 30 min point 
	if (case == [0, 1]){
		output = shift_forward(output, shift_by_ts, case);
	}
	// average data, measured hourly, shifted forward in assuming the average value
	// occurs in the middle of the hour, at the 30 min point
	else if (case == [1, 1]){
		output = shift_forward(output, shift_by_ts, case);
	}
	return output;
}

// checks file for valid input and prints interpolated weather file
function interpolate_file(input_file, intervals_per_hour){
	input_path = path_only(input_file);
	// does not handle lat lon named file
//	input_name = split(file_only(input_file),'.')[0];
	input_name = file_only(input_file);
	ext = ext_only(input_file);
	input_name = left(input_name, strlen(input_name)-strlen(ext)-1);
	
	//make sure it's not already interpolated
	phrase = "mInterpolated";
	intd = true;
	for (i=1; i<14; i++){
		if (ch(phrase,strlen(phrase)-i) != ch(input_name, strlen(input_name)-i)) intd = false;
	}
	if (intd == true){
		org_name = left(input_name, strlen(input_name)-16) + ".csv";
		org_found = file_exists(input_path + "/" + org_name);
		if (org_found == 1) org_file = input_path + "/" + org_name;
		// try to find in solar resource file in downloaded folder or in solar_resource folder
		dir = cwd();
		dir = left(dir, strlen(dir)-3);
		if (org_found == 0){
			org_file = dir + "solar_resource/" + org_name;
			org_found = file_exists(org_file);
		}
		if (org_found == 0){
			org_file = input_path + "/" + left(input_name, strlen(input_name)-15) + ".csv";
			org_found = file_exists(org_file);
		}
		if (org_found == 0){
			org_file = dir + "solar_resource/" + org_name;
			org_found = file_exists(org_file);
		}
		// found original file
		if (org_found == 1){
			use = yesno( input_name + " is already interpolated. Found " + org_file +". Use as original? Click no to find original.");
			if (use) input_file = org_file;
			else{
				input_file = choose_file( homedir(), 'Choose solar resource file', '*.csv', false, false);
				if (strlen(input_file) < 1){
					outln("No file selected; exiting.");
					exit;
				}
			}
		}
		else{
			use = yesno( input_name + " is already interpolated. Click yes to find original, no to cancel.");
			if (use){
				input_file = choose_file( homedir(), 'Choose solar resource file', '*.csv', false, false);
				if (strlen(input_file) < 1){
					outln("No file selected; exiting.");
					exit;
				}
			}
			else exit;
		}
		input_name = split(file_only(input_file),'.')[0];
	}
	input_data = csvread(input_file);
	
	//check file type
	ask_convert = false;
	ext = ext_only(input_file);
	if (ext != "csv") ask_convert = true;
	if (#input_data[2] >= 68) ask_convert = true;
	if (ask_convert){
		msgbox('Weather file must be in SAM format. Please use Solar Resource File Converter Macro.');
		exit;
	}
	
	//interpolate, print and return path
	outln('Interpolating ' + input_name + ' ...');
	lat = -1;
	long = -1;
	tz = -1;
	case = identify_case(input_data, lat, long, tz);
	output = solar_resource_interpolate(input_data, intervals_per_hour, case);
	output_data = check_sunup(output, lat, long, tz);
	
	output_dir = wfdownloaddir();
	output_path = output_dir+'/'+input_name+ '_'+(60/intervals_per_hour)+'mInterpolated.csv';
	csvwrite(output_path, output_data);
	return output_path;
}

// controls user inputs and options, sets file as chosen weather file
function main(){
	// get input_file from pop-up window
	if (typeof(macro) == 'unknown' || to_string(macro.file_loc)=='User input'){
		input_file = choose_file( homedir(), 'Choose solar resource file', '*.csv', false, false);
		if (strlen(input_file) < 1){
			outln("No file selected; exiting.");
			exit;
		}
		// standalone script, interpolate now
		if (typeof(macro) == 'unknown') {
			ts = to_real(choose_from_list([30, 15, 10, 5, 1], "Choose Interval Length in Minutes", "", 1));
			intervals_per_hour = 60/ts;
			output_path = interpolate_file(input_file, intervals_per_hour);
			outln("Created " + output_path + ".");
			exit;
		}
	}
	else{
		input_file = get('solar_resource_file');
	}
	// input_file comes from location and resource page
	if (to_string(macro.timesteps) == 'Same as Load'){	
		load = get('load_user_data');
		if (load == null) //this would happen for the no financials model
		{
			msgbox("Case does not have an electric load. Please select a different interval length.");
			exit;
		}
		if (get('load_model') !=1) //only the input time series load data option has subhourly load data
		{
			msgbox("Only the Input Time Series Load Data option has subhourly load data. Please select a different electric load model or a different interval length.");
			exit;
		}
		intervals_per_hour = #load/8760;
		if (intervals_per_hour == 1 ){
			msgbox("Electric Load time interval must be subhourly");
			exit;
		}
	}
	else{
		ts = to_real(macro.timesteps);
		intervals_per_hour = 60/ts;
	}
		
	output_path = interpolate_file(input_file, intervals_per_hour);
	set('solar_resource_file', output_path);
	file = open(output_path,'r');
	set( 'use_specific_weather_file', 1);
	set( 'user_specified_weather_file', output_path);
	set('solar_data_source', output_path);
	msgbox("Successfully set " + output_path + " as solar resource file. Refresh library to show in solar resource library.");
}

// turn off macro execution for import into test
main();