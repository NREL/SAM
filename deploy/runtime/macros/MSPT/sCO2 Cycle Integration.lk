/*@
<p>This macro configures the Molten Salt Power Tower technology model
to run with supercritical carbon dioxide (sCO2) power cycle off-design performance
maps generated from our separate sCO2 modeling tool. In addition to the cycle 
off-design data, this macro also imports and sets system parameters that need
to be consistent with the cycle design point.</p>

<p>Compared to the default molten salt power tower configuration integrated with a steam Rankine cycle 
integration with a sCO2 cycle may result in a smaller temperature difference across the receiver.
In that case, the default number of receiver panels, 20, may result in a flow path that requires excessive
HTF mass flow rates to transfer the absorbed heat. Absent other design modifications, this can result
in significant pumping parasitics. Review the new receiver HTF cold and hot temperatures and
consider adjusting the number of panels as necessary. In our experience, 12 is often a reasonable
value for sCO2 cycle integrations.</p>

<p>Click <b>Run macro</b> above and follow the prompts.</p>

@*/


//cname = "mspt_udpc";

//active_case(cname);

// Choose JSON file with sco2 outputs
fname = choose_file( homedir(), 'Choose JSON file', 'JSON files (*.json)|*.json');

// load JSON
json_in = json_file(fname);

// Get some info from active case
W_dot_gross_ui = get("P_ref");		//[MWe]

eta_gross_ui = get("design_eff");	//[-]

q_dot_cycle_ui = W_dot_gross_ui / eta_gross_ui;		//[MWt]

// First, choose 'UDPC' cycle configuration
set("pc_config", 1);

// Get from imported json the sco2 design parameters required for MSPT model
//   then set MSPT UI variable
//   note: UI calculates T_amb_des from UDPC table data
T_htf_hot_des = json_in{"T_htf_hot_des"};		//[C]
var_txt = "HTF hot temperature = " + to_string(T_htf_hot_des) + " C\n";

T_htf_cold_des = json_in{"T_htf_cold_des"};		//[C]
var_txt = var_txt + "HTF cold temperature = " + to_string(T_htf_cold_des) + " C\n";

eta_thermal_des = json_in{"eta_thermal_calc"};	//[-]
var_txt = var_txt + "Cycle thermal efficiency = " + to_string(eta_thermal_des) + "\n";

fan_power_perc = json_in{"fan_power_frac"}*100;		//[%] convert from [-] in json
var_txt = var_txt + "Gross power consumed by cooling system = " + to_string(fan_power_perc) + " %\n";

m_dot_water_cooling = 0.0;		//[kg/s]
var_txt = var_txt + "Cooling system water usage = " + to_string(m_dot_water_cooling) + " kg/s";

udpc_table = json_in{"udpc_table"};			// matrix

update_var_txt = "\nDo you want to update the following variables in the user interface?\n" + var_txt;

update_ui_vars = yesno(update_var_txt);

if(update_ui_vars)
{
	// Set UI variables
	set("T_htf_hot_des", T_htf_hot_des);
	set("T_htf_cold_des", T_htf_cold_des);
	set("design_eff", eta_thermal_des);
	set("ud_f_W_dot_cool_des", fan_power_perc);
	set("ud_m_dot_water_cool_des", m_dot_water_cooling);
	set("ud_ind_od", udpc_table);
	
	outln("Inputs set by this macro:");
	outln(var_txt);
	outln("User Defined Power Cycle table");
	
	// ****** Input Check 1 ********
	// Check min/max cycle fractions
	// If UDPC code will have to extrapolate to cutoff or max fracs
	//   then give user opportunity to reset them
	n_rows_udpc = #udpc_table;
	m_dot_ND_min = 1.0;
	m_dot_ND_max = 0.0;
	for(i = 0; i < n_rows_udpc; i++)
	{
		m_dot_ND_min = min(udpc_table[i][1], m_dot_ND_min);
		m_dot_ND_max = max(udpc_table[i][1], m_dot_ND_max);
	}

	cycle_cutoff_frac = get("cycle_cutoff_frac");
	cycle_max_frac = get("cycle_max_frac");
	if(cycle_cutoff_frac < 0.999*m_dot_ND_min)
	{
		txt = "The cycle cutoff fraction input on the Power Cycle page is " + to_string(cycle_cutoff_frac) + 
		" which is less than the minimum mass flow rate, " + to_string(m_dot_ND_min) + ", in the UDPC table." +
		" The performance code will have to extrapolate UDPC data for mass flow rates between these values." +
		" Do you want to update the cycle cutoff fraction?";
		update_cycle_cutoff_frac = yesno(txt);
		
		if(update_cycle_cutoff_frac)
		{
			txt = "Enter a new cycle cutoff fraction: ";
			cycle_cutoff_frac_in_txt = in(txt);
			cycle_cutoff_frac_in = to_real(cycle_cutoff_frac_in_txt);
			if(cycle_cutoff_frac_in <= 0.0 || cycle_cutoff_frac_in >= 1.0)
			{
				msgbox("Input must be between 0.0 and 1.0. Input not updated on the Power Cycle page.");
			}
			else
			{
				set("cycle_cutoff_frac", cycle_cutoff_frac_in);
				outln("Minimum turbine operation =", cycle_cutoff_frac_in);
			}
		}
	}
	if(cycle_max_frac > 1.001*m_dot_ND_max)
	{
		txt = "The cycle max fraction input on the Power Cycle page is " + to_string(cycle_max_frac) + 
		" which is greater than the maximum mass flow rate, " + to_string(m_dot_ND_max) + ", in the UDPC table." +
		" The performance code will have to extrapolate UDPC data for mass flow rates between these values." +
		" Do you want to update the cycle max fraction?";
		update_cycle_max_frac = yesno(txt);
		
		if(update_cycle_max_frac)
		{
			txt = "Enter a new cycle max fraction: ";
			cycle_max_frac_in_txt = in(txt);
			cycle_max_frac_in = to_real(cycle_max_frac_in_txt);
			if(cycle_max_frac_in <= 1.0)
			{
				msgbox("Input must be greater than 1. Input not updated on the Power Cycle page.");
			}
			else
			{
				set("cycle_max_frac", cycle_max_frac_in);
				outln("Maximum turbine over design operation =", cycle_max_frac_in);
			}
		}
	}
	// ****** End Input Check 1 ********
	// *********************************

	// *********************************
	// ******* Input Check 2 ***********
	// Check the new cycle thermal power
	// If it is different than the previous UI value
	//   then notify the user that they may want to
	//   i) re-run the field and tower optimization
	//   or ii) adjust the cycle gross output 
	q_dot_cycle_new = W_dot_gross_ui / eta_thermal_des;		//[MWe]
	if(abs(q_dot_cycle_new - q_dot_cycle_ui)/q_dot_cycle_ui > 0.01)
	{
		// This has weird formatting unless there's a '\n' at the start of the string
		// It probably has something to do with the '\n's later in the string
		txt = "\nThe cycle efficiency from the UDPC data results in a cycle thermal input, " + to_string(q_dot_cycle_new) + 
				", that is different than the value on the System Design page, " + to_string(q_dot_cycle_ui) + "." +
				" As a result, the field layout and tower and receiver design may not correspond to the"
				" new receiver design power. You may want to\n" +
				"i) re-run the 'Optimize heliostat layout and tower dimensions' macro on the Heliostat Field page\n"
				"or\n" +
				"ii) adjust the cycle gross output power";
		msgbox(txt);
	}
	// ******* End Check 2 ***********
	// *********************************

	// *********************************
	// ******* Notice 1 ***********
	// comment out when script is used as SAM macro...
	// *********************************
	/*txt = "Compared to the default molten salt power tower configuration integrated with a steam Rankine cycle," +
			" integration with a sCO2 cycle may result in a smaller temperature difference across the receiver." +
			" In that case, the default number of receiver panels, 20, may result in a flow path that requires excessive" +
			" HTF mass flow rates to transfer the absorbed heat. Absent other design modifications, this can result" +
			" in significant pumping parasitics. Review the new receiver HTF cold and hot temperatures and" +
			" consider adjusting the number of panels as necessary. In our experience, 12 is often a reasonable" +
			" value for sCO2 cycle integrations.";
	msgbox(txt);*/
}

