/*@

<p>This macro works with data generated by the Supercritical Carbon Dioxide 
(sCO2) Power Cycle model  
<a href="https://github.com/NREL/SAM/blob/develop/samples/CSP/sco2_analysis_python_V2/">available on the SAM GitHub repository</a>.
The model generates sCO2 power cycle off-design performance maps with system
parameters consistent with the cycle design point.</p>

<p>The sSO2 Power Cycle model is written in Python, so you must have 
<a href="https://www.python.org/">Python</a> installed on your computer to use 
it.</p> 

<p>The macro:</p>

<ul>
<li>Reads data from a JSON file created by the Python model.</li>
<li>Changes the mode on the Power Cycle page to <b>User Defined Power Cycle</b>.</li>
<li>Populates the inputs on the Power Cycle page with data from the JSON file.</li>
</ul>

<h5>Instructions</h5>

<ol>
<li>Run the Python sCO2 Power Cycle model available from the GitHub link above.</li>
<li>
Click <b>Run macro</b> above and follow the prompts to:
<ul>
<li>Import data from the JSON file created by the script.</li>
<li>Modify power cycle design parameters with values from the file.</li>
</ul>
</li>
</ol>

<p>Compared to the default molten salt power tower configuration integrated with a steam Rankine cycle 
integration with a sCO2 cycle may result in a smaller temperature difference across the receiver.
In that case, the default number of receiver panels, 20, may result in a flow path that requires excessive
HTF mass flow rates to transfer the absorbed heat. Absent other design modifications, this can result
in significant pumping parasitics. After running this macro, review the new receiver HTF cold and hot temperatures and
consider adjusting the number of panels as necessary. In our experience, 12 is often a reasonable
value for sCO2 cycle integrations.</p>

@*/

//cname = "mspt_udpc";

//active_case(cname);

// Choose JSON file with sco2 outputs
fname = choose_file( homedir(), 'Choose JSON file', 'JSON files (*.json)|*.json');

// load JSON
json_in = json_file(fname);

// Get some info from active case
W_dot_gross_ui = get("P_ref");		//[MWe]

eta_gross_ui = get("design_eff");	//[-]

q_dot_cycle_ui = W_dot_gross_ui / eta_gross_ui;		//[MWt]

// First, choose 'UDPC' cycle configuration
set("pc_config", 1);

// get ui variables
old_T_htf_hot_des = get("T_htf_hot_des");
old_T_htf_cold_des = get("T_htf_cold_des");
old_eta_thermal_des = get("design_eff");
old_fan_power_perc = get("ud_f_W_dot_cool_des");
old_m_dot_water_cooling = get("ud_m_dot_water_cool_des");
old_udpc_table = get("ud_ind_od");

// Get from imported json the sco2 design parameters required for MSPT model
//   then set MSPT UI variable
//   note: UI calculates T_amb_des from UDPC table data
T_htf_hot_des = json_in{"T_htf_hot_des"};		//[C]
var_txt = "HTF hot temperature from " + to_string(old_T_htf_hot_des) + " to " + to_string(T_htf_hot_des) + " " + char(176) + "C\n";

T_htf_cold_des = json_in{"T_htf_cold_des"};		//[C]
var_txt = var_txt + "HTF cold temperature from " + to_string (old_T_htf_cold_des) + " to " + to_string(T_htf_cold_des) + " " + char(176) + "C\n";

eta_thermal_des = json_in{"eta_thermal_calc"};	//[-]
var_txt = var_txt + "Cycle thermal efficiency from " + to_string(old_eta_thermal_des) + " to " + to_string(eta_thermal_des) + "\n";

fan_power_perc = json_in{"fan_power_frac"}*100;		//[%] convert from [-] in json
var_txt = var_txt + "Gross power consumed by cooling system from " + to_string(old_fan_power_perc) + " to " + to_string(fan_power_perc) + " %\n";

m_dot_water_cooling = 0.0;		//[kg/s]
var_txt = var_txt + "Cooling system water usage from " + to_string(old_m_dot_water_cooling) + " to " + to_string(m_dot_water_cooling) + " kg/s";

udpc_table = json_in{"udpc_table"};			// matrix

update_var_txt = "Change variables in the user interface?\n" + var_txt;

update_ui_vars = yesno(update_var_txt);

if(update_ui_vars)
{
	// Set UI variables
	set("T_htf_hot_des", T_htf_hot_des);
	set("T_htf_cold_des", T_htf_cold_des);
	set("design_eff", eta_thermal_des);
	set("ud_f_W_dot_cool_des", fan_power_perc);
	set("ud_m_dot_water_cool_des", m_dot_water_cooling);
	set("ud_ind_od", udpc_table);
	
	outln("Inputs set by this macro:");
	outln(var_txt);
	outln("User Defined Power Cycle (UDPC) table");
	
	// ****** Input Check 1 ********
	// Check min/max cycle fractions
	// If UDPC code will have to extrapolate to cutoff or max fracs
	//   then give user opportunity to reset them
	n_rows_udpc = #udpc_table;
	m_dot_ND_min = 1.0;
	m_dot_ND_max = 0.0;
	for(i = 0; i < n_rows_udpc; i++)
	{
		m_dot_ND_min = min(udpc_table[i][1], m_dot_ND_min);
		m_dot_ND_max = max(udpc_table[i][1], m_dot_ND_max);
	}

	cycle_cutoff_frac = get("cycle_cutoff_frac");
	cycle_max_frac = get("cycle_max_frac");
	if(cycle_cutoff_frac < 0.999*m_dot_ND_min)
	{
		txt = "Cycle Cutoff Fraction\nThe cycle cutoff fraction input on the Power Cycle page is " + to_string(cycle_cutoff_frac) + 
		" which is less than the minimum mass flow rate, " + to_string(m_dot_ND_min) + ", in the user defined power cycle (UDPC) table." +
		" The performance code will have to extrapolate UDPC data for mass flow rates between these values." +
		" Do you want to enter a different value for the cycle cutoff fraction?";
		update_cycle_cutoff_frac = yesno(txt);
		
		if(update_cycle_cutoff_frac)
		{
			txt = "Enter a new cycle cutoff fraction: ";
			cycle_cutoff_frac_in_txt = in(txt);
			cycle_cutoff_frac_in = to_real(cycle_cutoff_frac_in_txt);
			if(cycle_cutoff_frac_in <= 0.0 || cycle_cutoff_frac_in >= 1.0)
			{
				msgbox("Input must be between 0.0 and 1.0. Input not updated on the Power Cycle page.");
			}
			else
			{
				set("cycle_cutoff_frac", cycle_cutoff_frac_in);
				outln("Minimum turbine operation =", cycle_cutoff_frac_in);
			}
		}
	}
	if(cycle_max_frac > 1.001*m_dot_ND_max)
	{
		txt = "The cycle max fraction input on the Power Cycle page is " + to_string(cycle_max_frac) + 
		" which is greater than the maximum mass flow rate, " + to_string(m_dot_ND_max) + ", in the UDPC table." +
		" The performance code will have to extrapolate UDPC data for mass flow rates between these values." +
		" Do you want to update the cycle max fraction?";
		update_cycle_max_frac = yesno(txt);
		
		if(update_cycle_max_frac)
		{
			txt = "Enter a new cycle max fraction: ";
			cycle_max_frac_in_txt = in(txt);
			cycle_max_frac_in = to_real(cycle_max_frac_in_txt);
			if(cycle_max_frac_in <= 1.0)
			{
				msgbox("Input must be greater than 1. Input not updated on the Power Cycle page.");
			}
			else
			{
				set("cycle_max_frac", cycle_max_frac_in);
				outln("Maximum turbine over design operation =", cycle_max_frac_in);
			}
		}
	}
	// ****** End Input Check 1 ********
	// *********************************

	// *********************************
	// ******* Input Check 2 ***********
	// Check the new cycle thermal power
	// If it is different than the previous UI value
	//   then notify the user that they may want to
	//   i) re-run the field and tower optimization
	//   or ii) adjust the cycle gross output 
	q_dot_cycle_new = W_dot_gross_ui / eta_thermal_des;		//[MWe]
	if(abs(q_dot_cycle_new - q_dot_cycle_ui)/q_dot_cycle_ui > 0.01)
	{
		// This has weird formatting unless there's a '\n' at the start of the string
		// It probably has something to do with the '\n's later in the string
		txt = "Update Heliostat Layout and Tower Dimensions.\nThe cycle efficiency from the UDPC data results in Cycle Thermal Power = " + to_string(q_dot_cycle_new) + 
				" MWt, which is different from the value of " + to_string(q_dot_cycle_ui) + " MWt on the Power Cycle page.\n\n" +
				"This may mean that the field layout and tower dimensions are not be appropriate for the "
				"new receiver design power. You may want to:\n\n" +
				"1. Click Calculate for 'Optimize heliostat layout and tower dimensions' on the Heliostat Field page, or\n"
				"2. Adjust the Design Turbine Gross Output Power value on the System Design page.";
		msgbox(txt);
	}
	// ******* End Check 2 ***********
	// *********************************

	// *********************************
	// ******* Notice 1 ***********
	// comment out when script is used as SAM macro...
	// *********************************
	/*txt = "Compared to the default molten salt power tower configuration integrated with a steam Rankine cycle," +
			" integration with a sCO2 cycle may result in a smaller temperature difference across the receiver." +
			" In that case, the default number of receiver panels, 20, may result in a flow path that requires excessive" +
			" HTF mass flow rates to transfer the absorbed heat. Absent other design modifications, this can result" +
			" in significant pumping parasitics. Review the new receiver HTF cold and hot temperatures and" +
			" consider adjusting the number of panels as necessary. In our experience, 12 is often a reasonable" +
			" value for sCO2 cycle integrations.";
	msgbox(txt);*/
}

