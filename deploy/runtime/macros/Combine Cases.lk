/*@
This macro allows you to add the energy output of two different cases together prior to running them through a single financial model.
This may be helpful for modeling a variety of scenarios, including:
<ul>
<li>Systems that include two different types of renewable technologies (wind and PV, etc.)
<li>Systems containing multiple equipment models (different inverters, different wind turbines, etc.)
<li>Systems that exceed the maximum number of subarrays allowed in PV systems
</ul>
<br><br>
<img src="$MACROPATH/combine_cases.jpg">
<br><br>
<b>Instructions:</b>
<ol>
<li>Create the cases that you wish to combine. These cases may be any technology option, paired with any financial model; however, the financial model will not be used in these cases.
<li>Complete the system design/specification and system costs pages for all the cases that you wish to combine. If you complete other financial pages, only the information on the system costs page will be used.
<li>Create a Generic System case with the financial model that you wish to use for the combined system. Note that this can be the "No financial model" option.
<li> Fill in all of the financial pages for the Generic system that you wish to use as the combined model, EXCEPT the system costs page. Costs will be combined and applied from the individual cases being combined, as applicable.
<li>Select the cases that you wish to combine (including the Generic System case that will be used for the combined model) using the inputs at the right.
<ul>
<li>You may choose all of the cases in the current project to be combined, OR
<li>You may choose which cases to combine by typing their names into the input box, separated by ONLY a comma (no space). Be sure to include the name of the Generic System that you wish to use as the combined model.
</ul>
<li>Click 'Run macro' at the top of the screen.
<li>When prompted, confirm the cases that will be combined.
<li>When the macro is complete, view combined system results in the Generic System case that you designated to be used as the combined model.
</ol>
<br><br>Notes:
<ul>
<li>This macro requires that all cases contain the same degradation rate, including the Generic System to be used as the combined model.
<li>If one of the systems that you wish to combine is a geothermal system, ONLY first-year energy is used in the combined system model; the first-year energy is repeated for the lifetime of the system.
<li>The energy predictions of the individual systems may not add up to exactly the energy prediction of the combined system due to differences in rounding at an hourly level.
<li>Running the subsystems independently and then adding financial results may not yield the same financial results as running the combined system, due to different financial inputs.
<li>Sub-hourly simulations and lifetime PV simulations are not currently enabled for this macro.
</ul>
@*/
//Macro user interface widgets
//@ name=mode;type=combo;label=Choose an option;value=1) Combine all cases,2) Combine only the cases listed below;sel=0
//@ name=cases;type=text;label=List cases for Option 2 (comma-separated);value= 

//Check that this macro was run from within a case
if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
}

//Determine available cases
cases = list_cases();
num_cases = #cases;

//if 'Select cases' is enabled, parse the input to get the list of cases that should be added
if (macro.mode == '2) Combine only the cases listed below')
{
	input_cases = split(macro.cases, ','); //delimited with commas
	for (i=0; i<#input_cases; i++) //check each input case
	{
		match = false; //a match has not yet been found
		for (j=0; j<num_cases; j++) //loop through all available cases
			if (input_cases[i] == cases[j]) //check if it matches
				match = true; //flag that this input case was found in the list of available cases
		if (!match) //a match was never found
		{
			msgbox('Input case ' + input_cases[i] + ' was not found among the cases in this project. Please check the name and try again.');
			exit;
		}
	}
	//all cases were found, overwrite the list of cases
	cases = input_cases;
	num_cases = #cases;
}

//Make sure there are sufficient cases
if (num_cases <= 0)
{
	msgbox('No cases detected. Please check your inputs and try again.');
	exit;
}

if (num_cases == 1 || num_cases == 2)
{
	msgbox('Only ' + num_cases + ' cases detected.\n\nThis macro requires at least 3 cases: 2 cases to be combined, plus 1 generic case to model the combined system. ' + 
		'Please check your inputs and try again.');
	exit;
}

outln('Cases: ' + cases);
outln('Number of cases: ' + num_cases);

//How many generic cases are there? //also check that third party is not run, it doesn't work
count = 0;
for (i=0; i<num_cases; i++)
{
	active_case(cases[i]);
	config = configuration();
	if (config[1] == 'Third Party')
	{
		msgbox('This macro cannot combine a Third Party Ownership model.');
		exit;
	}
	if (config[0] == 'Generic System')
	{
		generic[count] = cases[i];
		count++;
	}
}

//Which generic case to use for the financial model
if (count <=0) //no generic cases
{
	msgbox('This macro requires a generic system set up with the financial configuration that you wish to use to model the combined system. Please include a generic system and try again.');
	exit;
}
if (#generic > 1) //more than one generic case
	financial = choose_from_list(generic, 'Please choose which generic system to use as the financial configuration for the combined system.', 'Select financial case', 0);
else //exactly one generic case
	financial = generic[0];
outln('Case to use for financial configuration is: ' + financial);

//Verify the configuration before running it
msg = 'This macro will combine the performance and costs of cases:';
for (i=0; i<num_cases; i++)
{
	if (cases[i] == financial)
		continue;
	msg += '\n' + cases[i];
}
msg += '\nand run the combined performance results through the financial model specified in:\n' + financial + '\nDo you wish to continue?';
verify = yesno(msg);
if (!verify)
	exit;

//All degradation rates must be the same- different degradation of individual sub-systems is not yet possible for the out-years
constant = true;
degradation_last = null;
for(i=0; i<num_cases; i++)
{
	active_case(cases[i]);
	config = configuration();
	if (config[1] == 'None' || config[1] == 'LCOE Calculator')
		continue;
	degradation_this = get('degradation');
	if (degradation_last != null)
	{
		if (#degradation_this != #degradation_last) //make sure the lengths of the degradation arrays are the same
		{
			constant = false;
			break;
		}
		for (j=0; j<#degradation_this; j++) //make sure each element in the degradation arrays are the same
			if (degradation_this[j] != degradation_last[j])
			{
				constant = false;
				break;
			}
	}
	degradation_last = degradation_this; //save to compare to the one before
}
if (!constant)
{
	//offer to fix it for the user- suggest setting all degradation rates to 0 or 0.5
	msg = 'This macro requires that the degradation rates be the same for all systems, including the generic system used to model the combined system.';
	msg += '\nPlease enter the degradation rate you wish to use for all systems. Use commas to separate an array of degradation rates.';
	degrad = in(msg, '0', 'Select a degradation rate');
	degrad = split(degrad, ',');
	if (#degrad <= 0)
	{
		msgbox('There was an error with the degradation rate inputs. Please fix the degradation rates manually and try again.');
		exit;
	}
	for (i=0; i<#degrad; i++)
		degrad[i] = to_real(degrad[i]);
	for (i=0; i<num_cases; i++)
	{
		active_case(cases[i]);
		config = configuration();
		if (config[1] == 'None')
			continue;
		set('degradation', degrad);
	}
}	

//What is the analysis period and inflation rate of the financial model
analysis_period = 0;
inflation = 0;
active_case(financial);
config = configuration();
if (config[1] == 'LCOE Calculator')
{
	analysis_period = get('c_lifetime');
	inflation = get('c_inflation');
}
else if (config[1] != 'None' )
{
	analysis_period = get('analysis_period');
	inflation = get('inflation_rate');
}
outln('Analysis period: ' + analysis_period + ' years');

//Allocate and initialize variables to run through the combined model
nameplate = 0;
hourly_energy = alloc(8760);
for (i=0; i<8760; i++)
	hourly_energy[i] = 0;
annual_energy = 0;
total_installed_cost = 0;
if (config[1] != 'None')
{
	om_fixed = alloc(analysis_period);
	for (i=0; i<analysis_period; i++)
		om_fixed[i] = 0;
}

//Run each simulation
for (i=0; i < num_cases; i++)
{
	//Do not simulate the financial case
	if (cases[i] == financial)
		continue;
		
	//Simulate the current case
	active_case(cases[i]);
	config = configuration();
	outln('Simulating: ' + cases[i]);
	
	//cannot simulate lifetime pv
	if (config[0] == 'Flat Plate PV')
	{
		if (get('pv_lifetime_simulation') == 1)
		{
			msgbox('The combine cases macro cannot be used with lifetime PV simulations. Please change your selection to PV simulation over one year and try again.');
			exit;
		}
	}
	
	//Deal with inflation
	if (config[1] != 'None')
	{
		inflation_old = get('inflation_rate'); //save the old inflation rate so that the input can be reset, avoiding confusion
		set('inflation_rate', inflation); //use the inflation rate from the generic system where it should have been defined- it will affect the out-years O&M costs
	}
	
	messages = null;
	successful = simulate(messages, false); //don't update the UI results because it could cause user confusion RE: inflation rate in the cash flow.
	//check that the case ran
	if (!successful) 
	{
		msgbox(cases[i] + ' exited with errors. Please check your inputs.\n' + messages);
		exit;
	}
	//optionally display messages returned from the simulation
	if (messages != '') 
	{
		see_msg = yesno('There were messages about ' + cases[i] + '. Would you like to see them?');
		if (see_msg)
			msgbox(messages);
	}
	
	//Add the performance parameters of this case
	nameplate += get('system_capacity');
	hourly_energy_this = get('gen');
	//Check for sub-hourly
	if (#hourly_energy_this != 8760)
	{
		msgbox('This macro is not currently enabled to combine sub-hourly cases. Please change to an hourly case or modify the code to run sub-hourly.');
		exit;
	}
	
	for (j=0; j<8760; j++)
		hourly_energy[j] += hourly_energy_this[j];
	annual_energy_this = ? (config[0] == 'Geothermal Power') [get('annual_energy'), get('first_year_output')];
	annual_energy += annual_energy_this;
	
	//Add the financial parameters of this case, if applicable
	if (config[1] == 'LCOE Calculator') //o&m is different for this one
	{
		total_installed_cost += get('capital_cost');
		om_fixed_this = get('fixed_operating_cost');
		om_variable = get('variable_operating_cost') * get('annual_energy');
		for(j=0; j<analysis_period; j++)
			om_fixed[j] += om_fixed_this + om_variable;
	}
	else if(config[1] != 'None' && analysis_period != 0) //check both the current case and the financial case
	{
		total_installed_cost += get('total_installed_cost');
		
		// O&M costs are taken from the cash flows of each system. All types of O&M costs
		// are entered in as fixed O&M costs in the financial case. This accounts for several things:
		// (a) the escalation of O&M costs
		// (b) the O&M costs by capacity and by generation, appropriately weighted by the system size/generation,
		// (c) allows for inclusion of fuel costs that are found in some technologies but not others (fuel costs)
		om_fixed_this = get('cf_om_fixed_expense');
		om_capacity = get('cf_om_capacity_expense');
		om_production = get('cf_om_production_expense');
		cf_om_fuel = get('cf_om_fuel_expense');
		cf_opt_fuel_1 = get('cf_om_opt_fuel_1_expense');
		cf_opt_fuel_2 = get('cf_om_opt_fuel_2_expense');
		//in cash flows, the first entry in the array is "Year 0", so must call j+1 in loop		
		for (j=0; j<analysis_period; j++)
			om_fixed[j] += om_fixed_this[j+1] + om_capacity[j+1] + om_production[j+1] + cf_om_fuel[j+1] + cf_opt_fuel_1[j+1] + cf_opt_fuel_2[j+1];
	}
	
	//put inflation rate back to input in case user wants to run subsystem separately with his originally specified financial parameters
	if (config[1] != 'None')
		set('inflation_rate', inflation_old);
}

//Set up the financial case
active_case(financial);
config = configuration();
financial_type = config[1];

//For user benefit, change the fixed O&M schedule back to a single value if all entries are the same
if (financial_type != 'None')
{
	constant1 = true;
	for (j=1; j<analysis_period; j++) //don't start at zero because comparing j-1
		if (om_fixed[j] != om_fixed[j-1])
			constant1 = false;
	if(constant1)
		om_fixed = [om_fixed[0]];
}



//Set the generic system performance parameters
set('system_capacity', nameplate);
set('spec_mode', 1); //specify hourly profile
set('derate', 0); //no additional losses- losses were computed in the individual models
set('heat_rate', 0); //no fuel costs- accounted for in O&M fuel costs from subsystem cash flows
set('energy_output_array', hourly_energy);

//Set the generic system financial parameters, if applicable
if (financial_type == 'LCOE Calculator')
{
	if (!constant1)
	{
		msgbox('The LCOE calculator requires a single annualized fixed operating cost. Please check the O&M inputs of your other cases and try again.');
		exit;
	}
	else
		set('fixed_operating_cost', om_fixed);
}
if (financial_type != 'None')
{
	//set cost parameters
	set('genericsys.cost.plant', total_installed_cost);
	set('genericsys.cost.per_watt', 0);
	set('genericsys.cost.contingency_percent', 0);
	set('genericsys.cost.epc.percent', 0);
	set('genericsys.cost.epc.fixed', 0);
	set('genericsys.cost.plm.percent', 0);
	set('genericsys.cost.plm.fixed', 0);
	set('genericsys.cost.sales_tax.percent', 0);

	//set O&M parameters- all are zero except for fixed (see explanation above)
	set('om_fixed', om_fixed);
	set('om_capacity', [0]);
	set('om_production', [0]);
	set('om_fuel_cost', [0]);
	//O&M escalation rates are also zeroed because they are accounted for in the fixed O&M costs
	set('om_fixed_escal', 0);
	set('om_capacity_escal', 0);
	set('om_fuel_cost_escal', 0);
	set('om_production_escal', 0);
}

//Simulate the financial case
outln('Simulating combined case: ' + financial);
success = simulate('', true);
if (!success)
{
	msgbox('Combined case did not run successfully.');
	outln('Combined case did not run successfully.');
}
else
{
	message = 'Simulation complete.\nTotal annual energy = ' + get('annual_energy') + ' kWh.\nPlease see ' + financial + ' for complete results.';
	outln(message);
	show_page('Results');
	msgbox(message);
}