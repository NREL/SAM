/*@
<p>This macro adds the hourly power generation profiles of two or more cases and uses the resulting profile as input to a Generic System case that represents the combined project. You can use it to model a project's cash flow when the generation profile is from different sources.</p>
<p>To learn about cases, see the "Manage Cases" topic in Help under Reference in the table of contents.</p>
<p>Some examples of analysis scenarios this macro can model include:</p>
<ul>
<li>A project that combines two or more types of renewable energy systems (wind/PV, PV/CSP, PV/Wind/Biopower, etc.).</li>
<li>A system that uses different types or sizes of equipment, such as a PV system with different module or inverter types, or a wind farm with different sizes of turbines.</li>
<li>A PV system with more than four subarrays.</li>
</ul>
<p>The following diagram shows an example of how the macro works to combine two cases. It works the same way for more than two cases:</p>
<p><center><img src="$MACROPATH/combine_cases.jpg"></center></p>
<h5>Instructions:</h5>
<ol>
<li>Create a case for each system to combine.
<ul>
<li>If you want to specify costs for each system, include a financial model for each case.</li>
<li>The macro calculates a total project installation cost and operating cost by adding the costs of the individual cases and using those as the costs for the combined project case.</li>
<li>It uses the financial parameters, incentives, and other financial model inputs from the combined project case and ignores those inputs for the system cases.</li>
</ul>
</li>
<li>For each case, design the system and assign costs as appropriate. You may want to run a simulation for each case to make sure the results are as you expect.</li>
<li>Create a special Generic System case with the financial model for the combined project.</li>
<li>Specify inputs for the Generic System case's Financial Parameters, Incentives and other finanical model input pages.
<ul>
<li>The macro automatically populates inputs on the Generic System case's Power Plant and System Costs input pages, so you do can ignore the inputs on those pages.</li>
</ul>
<li>Use the "Choose an option" list to the right to choose the cases to include in the combined project.</li>
<ul>
<li><b>Combine all cases</b> to combine all of the cases except the Generic System case you created for the combined project.<li><b>Combine only the cases listed below</b> to choose the cases to combine by typing a comma-separated list of case names, including the Generic System for the combined project. (Separate each case name by a comma with no spaces.)
</ul>
<li>Click <b>Run macro</b> above and follow the prompts.</li>
</ol>
<p>When the macro finishes, it displays the case for the combined project. Review the information in the page notes for the Power Plant and System Costs page, and then click <b>Simulate</b> to generate results for the combined project.</p>
<p>If you make changes to the combined project financial model inputs, you can run a simulation to generate new results. You only need to rerun this macro if you change the system design for any of the system cases.</p>
<p>This macro only uses power generation data for Year 1. It prompts you for a degradation rate to apply to the combined system output.</p>
</ul>
@*/
//Macro user interface widgets
//@ name=mode;type=combo;label=Choose an option;value=1) Combine all cases,2) Combine only the cases listed below;sel=0
//@ name=cases;type=text;label=List cases for Option 2 (comma-separated);value= 

//Check that this macro was run from within a case
if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
	/*macro = {};
	macro.mode = '1) Combine all cases';
	macro.cases = '';*/
}

function num_to_str( x , d )
{
	// only format x if it is a number
	if ( typeof(x) == 'number' )
	{
		// The sprintf() function in this step converts a number (for d = 0) like 409.857 to 41 instead of 410.
		// This if-else condition is a workaround that bug.
		if( ( d == 0) && (mod( round(x) , 10) <= 0) )	
			{
				x = round(x);
				str = sprintf('%,',x);
			}
		else 
			{ str = sprintf('%.'+to_string(d)+',',x); }

		arr = split(str,'.');
		if ( #arr > 1 )
			{ num_decs = strlen(to_string(arr[1])); }
		else
			{ num_decs = 0; }
		// if number has one or more decimal places less than the desired number	
		if ( #arr > 1 && num_decs < d)
		{
			for (i=0; i<d-num_decs; i++)
				{ str += '0'; }
		}
		// if number has no decimal places
		elseif ( #arr == 1 && d > 0 )
		{
			str += '.';
			for (i=0; i<d; i++)
				{ str += '0'; }
		}
	}
	// if x is a string, return it
	elseif ( typeof(x) == 'string' )
		{ str = x; }
	// if x is not a number or string, convert it to a string with no formatting	
	else	
		{ str = to_string( x ); }
	return str;
}

//Determine available cases
cases = list_cases();
num_cases = #cases;

//if 'Select cases' is enabled, parse the input to get the list of cases that should be added
if (macro.mode == '2) Combine only the cases listed below')
{
	input_cases = split(macro.cases, ','); //delimited with commas
	for (i=0; i<#input_cases; i++) //check each input case
	{
		match = false; //a match has not yet been found
		for (j=0; j<num_cases; j++) //loop through all available cases
			if (input_cases[i] == cases[j]) //check if it matches
				match = true; //flag that this input case was found in the list of available cases
		if (!match) //a match was never found
		{
			msgbox('Case not found!\nInput case ' + input_cases[i] + ' was not found among the cases in this project. Check the name and try again.');
			exit;
		}
	}
	//all cases were found, overwrite the list of cases
	cases = input_cases;
	num_cases = #cases;
}

//Make sure there are sufficient cases
if (num_cases <= 0)
{
	msgbox('No cases detected!\nCheck your inputs and try again.');
	exit;
}

if (num_cases == 1 || num_cases == 2)
{
	msgbox('Only ' + num_cases + ' cases detected.\nThis macro requires at least 3 cases: 2 cases to be combined, plus 1 generic case to model the combined system. ' + 
		'Check your inputs and try again.');
	exit;
}

outln('Cases: ' + cases);
//outln('Number of cases: ' + num_cases);

//How many generic cases are there? //also check that third party is not run, it doesn't work
count = 0;
for (i=0; i<num_cases; i++)
{
	active_case(cases[i]);
	config = configuration();
	/*if (config[1] == 'Third Party')
	{
		msgbox('This macro cannot combine a Third Party Ownership model.');
		exit;
	}*/
	if (config[0] == 'Generic System')
	{
		generic[count] = cases[i];
		count++;
	}
}

//Which generic case to use for the financial model
if (count <=0) //no generic cases
{
	msgbox('No Generic System case!\nThis macro requires a generic system set up with the financial configuration that you wish to use to model the combined system. Include a generic system and try again.');
	exit;
}
if (#generic > 1) //more than one generic case
{
	financial = choose_from_list(generic, 'Choose which generic system to use as the financial configuration for the combined system.', 'Select financial case', 0);
}
else //exactly one generic case
{
	financial = generic[0];
}
outln('Case for combined project: ' + financial);

//Verify the configuration before running it
msg = 'Review Configuration\nThis macro will combine these cases:\n';
for (i=0; i<num_cases; i++)
{
	if (cases[i] == financial)
		continue;
	msg += '\n' + cases[i];
}
msg += '\n\nThe combined project is:\n\n' + financial;
msg += '\n\nSAM will switch to each case in the project and run a simulation.\nDepending on the configuration, SAM may appear to be unresponsive during the simulations.\nThe macro will display a message when it finishes.';
msg += '\n\nContinue?';
verify = yesno(msg);
if (!verify) { exit; }

//Due to complexity of AC and DC degradation and lifetime and single year simulations, require user to provide an AC degradation rate
//for the combined project and ignore degradation rate inputs of individual system cases.
constant = false;
/*
//All degradation rates must be the same- different degradation of individual sub-systems is not yet possible for the out-years
constant = true;
degradation_last = null;
for(i=0; i<num_cases; i++)
{
	active_case(cases[i]);
	config = configuration();
	if (config[1] == 'None' || config[1] == 'LCOE Calculator')
	{
		continue;
	}
	degradation_this = get('degradation');
	if (degradation_last != null)
	{
		if (#degradation_this != #degradation_last) //make sure the lengths of the degradation arrays are the same
		{
			constant = false;
			break;
		}
		for (j=0; j<#degradation_this; j++) //make sure each element in the degradation arrays are the same
			if (degradation_this[j] != degradation_last[j])
			{
				constant = false;
				break;
			}
	}
	degradation_last = degradation_this; //save to compare to the one before
}*/

if (!constant)
{
	//offer to fix it for the user- suggest setting all degradation rates to 0 or 0.5
	msg = 'This macro uses the Year 1 hourly generation profile for each system. Please';
	msg += '\nprovide an annual AC degradation rate to use for the combined project,';
	msg += '\nor enter a zero to ignore degradation.';
	msg += '\n\nEnter a single value (%/year) or \na comma-separated list of values for each year in the analysis period:';
	degrad = in(msg, '0', 'Enter annual AC degradation rate (%/yr)');
	degrad = split(degrad, ',');
	if (#degrad <= 0)
	{
		msgbox('Degradation Rate Error!\nThere was an error with the degradation rate inputs. Fix the degradation rates manually and try again.');
		exit;
	}
	for (i=0; i<#degrad; i++)
		degrad[i] = to_real(degrad[i]);
	for (i=0; i<num_cases; i++)
	{
		active_case(cases[i]);
		config = configuration();
		if (config[1] == 'None')
			continue;
		set('degradation', degrad);
	}
}	
//outln('Degradation rate for combined project: ' + degrad);

//Get analysis period and inflation rate from financial case
active_case(financial);
config = configuration();
analysis_period = 0;
inflation = 0;
if (config[1] == 'LCOE Calculator')
{
	analysis_period = get('c_lifetime');
	inflation = get('c_inflation');
}
elseif (config[1] != 'None' )
{
	analysis_period = get('analysis_period');
	inflation = get('inflation_rate');
}

//outln('Combined project analysis period (years) = ' + analysis_period );
//outln('Combined project inflation rate (%/year) = ' + inflation );

//Allocate and initialize variables to run through the cases to combine
nameplate = 0;
hourly_energy = alloc(8760);
for (i=0; i<8760; i++)
{
	hourly_energy[i] = 0;
}
annual_energy = 0;
total_installed_cost = 0;
if (config[1] != 'None')
{
	om_fixed = alloc(analysis_period);
	for (i=0; i<analysis_period; i++)
	{
		om_fixed[i] = 0;
	}	
}

note_fin = 'The Combine Cases macro calculated an hourly generation profile by running a simulation for each case listed below and adding the electrical output of the systems on an hour-by-hour basis. Click Edit Array to see the calculated hourly profile values.\n';
note_fin += '\nThe nameplate capacity is the sum of the system capacities of each case.\n'; 
note_fin += '\nThe macro also calculated the total installed cost and O&M cost. See the System Costs page for detalis.\n';
note_fin += '\nThe macro ignores inputs from the financial model input pages in each case except the System Costs page.\n';
note_fin += '\nThe degradation rate on the Lifetime and Degradation page is the value you entered from the macro.\n';
note_fin += '\nTo model the combined system, set up the inputs on the Financial Parameters, Incentives, and other financial model input pages and run a simulation.\n';

note_cost = 'The plant cost is the sum of the total installed costs for each case. The fixed annual O&M cost is the sum of all O&M, fuel, battery, and fuel cell replacement costs as applicable. Click Edit to see the O&M cost by year.\n';

//Run each simulation
for (i=0; i < num_cases; i++)
{
	//Do not simulate the financial case
	if (cases[i] == financial) { continue; }
	
	//Simulate the current case
	active_case(cases[i]);
	config = configuration();
	out('Simulating Case ' + to_string(i+1) + ' of ' + to_string(num_cases-1) + ': ' + cases[i] );
	
	//Deal with inflation
	if (config[1] != 'None')
	{
		if ( config[1] == 'LCOE Calculator' )
		{
			inflation_old = get('c_inflation');
			set( 'c_inflation', inflation );
		}
		else	
		{
			inflation_old = get('inflation_rate'); //save the old inflation rate so that the input can be reset, avoiding confusion
			set('inflation_rate', inflation); //use the inflation rate from the generic system where it should have been defined- it will affect the out-years O&M costs
		}
	}
	
	out( ' ' + config + '...');
	messages = null;
	successful = simulate(messages, false); //don't update the UI results because it could cause user confusion RE: inflation rate in the cash flow.
	//check that the case ran
	if (!successful) 
	{
		msgbox('Simulation errors!\n' + cases[i] + ' exited with errors. Check your inputs.\n' + messages);
		exit;
	}
	else { 	outln('done.'); }
	
	//optionally display messages returned from the simulation
	if (messages != '') 
	{
		see_msg = yesno('There were messages about ' + cases[i] + '. Would you like to see them?');
		if (see_msg) { msgbox( 'Simulation messages!\n' + messages ); }
	}

	//Add case to note for Financial Paraneters page
	note_fin += '\n\n'+ cases[i] + ' (' + config[0] + ')';
	note_fin += '\n-----------------------------------------------\n';
	
	note_cost += '\n\n'+ cases[i] + ' (' + config[0] +', ' + config[1] + ')';
	note_cost += '\n-----------------------------------------------\n';
		
	//Add the performance parameters of this case
	nameplate += get('system_capacity');
	hourly_energy_this = get('gen');
	//outln('System capacity (kW) = ' + get('system_capacity') );
	//outln('Cumulative combined system capacity (kW) = ' + nameplate );
	note_fin += '\nSystem Capacity = ' + num_to_str(get('system_capacity'),3) + ' kW';

	// need annual energy to calculate variable O&M cost for LCOE calculator
	// and to for constant generation profile for Marine Energy
	// Note that Wind with Weibull distribution as input reports gen calculated as annual_energy / 8760
	if ( config[0] == 'Geothermal Power' ) { annual_energy_this = get('first_year_output');	}
	else { annual_energy_this = get('annual_energy'); }
	annual_energy += annual_energy_this;
	//outln('Annual energy (kWh/year) = ' + annual_energy_this );
	//outln('Cumulative combined annual energy (kWh/year) = ' + annual_energy );
	note_fin += '\nAnnual Energy = ' + num_to_str(annual_energy_this,3) + ' kWh/yr';
	
	// for lifetime simulation, truncate results to first 8760 values
	// also check for subhourly simulation and quit 
	if (config[1] == 'LCOE Calculator')
	{
		analysis_period_this = get('c_lifetime');
	}
	elseif (config[1] != 'None' )
	{
		analysis_period_this = get('analysis_period');
	}
	
	// determine hourly generation profile of current case
	constant_generation = false;
	lifetime = false;
	if ( hourly_energy_this == null )
	{
		outln('The ' + config[0] + ' model does not generate hourly generation data. Calculating constant generation profile from annual energy.');
		constant_generation = true;
	}	
	elseif ( #hourly_energy_this == 8760 * analysis_period_this ) // check current case to see if it runs lifetime simulations
	{
		// truncate to first 8760 time steps
		outln('The ' + config[0] + ' model runs the simulation over the analysis period. Only Year 1 data will be combined with other cases.');
		lifetime = true;
	}	
	elseif (#hourly_energy_this > 8760 * analysis_period_this)
	{
		outln('The ' + config[0] + ' model runs sub-hourly simulations, which this script does not support. Exiting script.');
		msgbox('Subhourly simulations not supported!\nThis macro is not currently enabled to work with sub-hourly simulations. Change the ' + cases[i] + ' case to hourly simulations modify the macro code to run sub-hourly.');
		exit;
	}

	for (j=0; j<8760; j++)
	{
		if ( constant_generation )
		{
			hourly_energy[j] += annual_energy_this / 8760;
		}
		else
		{
			hourly_energy[j] += hourly_energy_this[j];
		}	
	}
	
	//Add the financial parameters of this case, if applicable
	if (config[1] == 'LCOE Calculator') //o&m is different for this one
	{
		total_installed_cost_this = get('capital_cost'); // to display on System Costs page note
		total_installed_cost += get('capital_cost');
		om_fixed_this = get('fixed_operating_cost');
		om_variable = get('variable_operating_cost') * annual_energy;
		for(j=0; j<analysis_period; j++)
		{
			om_total_this[j] = om_fixed_this + om_variable; // for display on System Costs page note
			om_fixed[j] += om_fixed_this + om_variable;
		}	
	}
	elseif (config[1] == 'None' || config[1] == 'Third Party' ) // no financial or third party host: set total installed cost to zero and skip setting O&M costs
	{
		total_installed_cost_this = 0;
		for (j=0; j<analysis_period; j++)
		{
			om_total_this[j] = 0; // set costs to display on System Costs page note to zero
		}
		outln('For ' + config[1] + ' financial model, set installed and O&M cost to zero.');	
	}
	elseif(config[1] != 'None' && analysis_period != 0) //check both the current case and the financial case
	{
		total_installed_cost_this = get('total_installed_cost'); // to display on System Costs page note
		total_installed_cost += get('total_installed_cost');
		// O&M costs are taken from the cash flows of each system. All types of O&M costs
		// are entered in as fixed O&M costs in the financial case. This accounts for several things:
		// (a) the escalation of O&M costs
		// (b) the O&M costs by capacity and by generation, appropriately weighted by the system size/generation,
		// (c) allows for inclusion of fuel costs that are found in some technologies but not others (fuel costs)
		om_fixed_this = get('cf_om_fixed_expense');
		om_capacity = get('cf_om_capacity_expense');
		om_production = get('cf_om_production_expense');
		cf_om_fuel = get('cf_om_fuel_expense');
		cf_opt_fuel_1 = get('cf_om_opt_fuel_1_expense');
		cf_opt_fuel_2 = get('cf_om_opt_fuel_2_expense');
		cf_batt_repl = get('cf_battery_replacement_cost');
		cf_fuelcell_repl = get('cf_fuelcell_replacement_cost');
		//in cash flows, the first entry in the array is "Year 0", so must call j+1 in loop		
		for (j=0; j<analysis_period; j++)
		{
			// for display in System Costs page note
			om_total_this[j] = om_fixed_this[j+1] + om_capacity[j+1] + om_production[j+1] 
						+ cf_om_fuel[j+1] + cf_opt_fuel_1[j+1] + cf_opt_fuel_2[j+1]
						+ cf_batt_repl[j+1] + cf_fuelcell_repl[j+1];

			om_fixed[j] += om_fixed_this[j+1] + om_capacity[j+1] + om_production[j+1] 
						+ cf_om_fuel[j+1] + cf_opt_fuel_1[j+1] + cf_opt_fuel_2[j+1]
						+ cf_batt_repl[j+1] + cf_fuelcell_repl[j+1];
		}	
	}
	
	//outln('Total installed cost ($) =' + total_installed_cost_this );
	//outln('Total O&M cost ($/year) = ' + om_total_this );
	note_cost += '\nTotal Installed Cost = $' + num_to_str(total_installed_cost_this,0);
	note_cost += '\nFixed O&M Cost in Year 1 = $' + num_to_str(om_total_this[0],0) + '/yr';
	note_cost += '\nFixed O&M Cost by year: ' + om_total_this + '\n';
	
	if ( constant_generation ) { note_fin += '\n*Annual energy converted to constant hourly generation: For each hour, hourly_energy (kW) = annual_energy (kWh/yr) / 8760 (h/yr).'; }
	if ( lifetime ) { note_fin += '\n**This configuration runs simulations over the analysis period. Only Year 1 output data was used to calculate the combined generation profile.'; }
	
	//put inflation rate back to input in case user wants to run subsystem separately with his originally specified financial parameters
	if (config[1] != 'None') { set('inflation_rate', inflation_old); }
}

//Set up the financial case
active_case(financial);
outln('Finished running system cases.');
outln('Setting up combined project case.');
config = configuration();
financial_type = config[1];

//For user benefit, change the fixed O&M schedule back to a single value if all entries are the same
if (financial_type != 'None')
{
	constant1 = true;
	for (j=1; j<analysis_period; j++) //don't start at zero because comparing j-1
	{
		if (om_fixed[j] != om_fixed[j-1])
		{
			constant1 = false;
		}	
	}		
	if(constant1)
	{
		om_fixed = [om_fixed[0]];
	}	
}

//Set the generic system performance parameters
set('system_capacity', nameplate);
set('spec_mode', 1); //specify hourly profile
set('derate', 0); //no additional losses- losses were computed in the individual models
set('heat_rate', 0); //no fuel costs- accounted for in O&M fuel costs from subsystem cash flows
set('energy_output_array', hourly_energy);

//Set the generic system financial parameters, if applicable
if (financial_type == 'LCOE Calculator')
{
	if (!constant1)
	{
		msgbox('LCOE Calculator error!\nThis macro requires that the LCOE calculator use a single annualized fixed operating cost. Check the O&M inputs of your other cases and try again.');
		exit;
	}
	else
	{
		set('fixed_operating_cost', om_fixed);
	}	
}
if (financial_type != 'None')
{
	//set cost parameters
	set('fixed_plant_input', total_installed_cost);
	set('genericsys.cost.per_watt', 0);
	set('genericsys.cost.contingency_percent', 0);
	set('genericsys.cost.epc.percent', 0);
	set('genericsys.cost.epc.fixed', 0);
	set('genericsys.cost.plm.percent', 0);
	set('genericsys.cost.plm.fixed', 0);
	set('genericsys.cost.sales_tax.percent', 0);

	//set O&M parameters- all are zero except for fixed (see explanation above)
	set('om_fixed', om_fixed);
	set('om_capacity', [0]);
	set('om_production', [0]);
	set('om_fuel_cost', [0]);
	set('om_replacement_cost1', [0]);
	//O&M escalation rates are also zeroed because they are accounted for in the fixed O&M costs
	set('om_fixed_escal', 0);
	set('om_capacity_escal', 0);
	set('om_fuel_cost_escal', 0);
	set('om_production_escal', 0);
	set('om_replacement_cost_escal',0);
}

//Simulate the financial case
out('Simulating combined project case: ' + financial + '...');
msg = '';
success = simulate(msg, false);

if (!success)
{
	msgbox( 'Simulation failed!\nCombined project case ' + financial + ' simulation failed.\nWe ran a test of the combined case, and it generated the following error message:\n\n' + msg );
	outln('Simulation failed: ' + msg);
}
else
{
	outln('done.');
	message = 'Macro finished!\nThe annual energy of the combined system is ' + sprintf('%,', get('annual_energy')) + ' kWh.\n\nSee the Power Plant and System Costs page on the ' + financial + ' case for complete results.';
	outln(message);
}

//show_page('System Costs');
pagenote('');
pagenote( note_cost );

pagenote('');
pagenote( note_fin );

show_page('Macros');
msgbox(message);
show_page('Power Plant');