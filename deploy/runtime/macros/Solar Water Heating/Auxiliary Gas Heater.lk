/*@

<p>SAM's solar water heating model assumes that the solar collector and an auxiliary
electric heater raise the mains water temperature to a user-defined
setpoint. This script shows one way to use SAM to approximate the savings
of a SWH system with an auxiliary gas heater.</p>

<p>The script calculates the annual gas energy that would be required 
without the solar collector, the annual gas energy saved by the solar
collector, and the annual solar fraction.</p>

<p>The gas energy values are reported in kWh, but can easily be converted 
to Btu or other energy units.</p>

<p>Instructions:</p>
<ol>
<li>Verify the tank losses and burning efficiency values at right. You can modify the values if you want.</li>
<li>Run the macro (button above).</li>
<li>Review the results in the console below.</li>
</ol>

<p>Revision history:</p>
<ul>
<li>Created on 11/11/2011 by Paul Gilman based on algorithm suggested by Jay Burch.</li>
<li>Updated on 8/9/2013 by Nick DiOrio to work with new SWH model.</li>
<li>Converted from SamUL to LK for new SAM version on 10/28/2014 by Paul Gilman.</li>
<ul>

@*/

//@ name=EF_gas_tank;type=number;label=Tank losses;value=0.6
//@ name=Eta_burn;type=number;label=Burning efficiency;value=0.82

//Run simulation using inputs from active case
out("Simulating...");
sim_msgs="";
ok = simulate(sim_msgs,false);
if ( !ok ) outln( "simulation failed.");
else outln("simulation complete.");
if( sim_msgs != "" ) 
{
  outln("Simulation messages:\n" + sim_msgs);
}

outln("");

EF_gas_tank = macro.EF_gas_tank;
Eta_burn = macro.Eta_burn;

//Store results
Q_saved = get('Q_deliv'); //Thermal energy delivered by solar collector
Q_aux_only = get('Q_auxonly'); //Thermal energy from auxiliary tank
P_pump = get('P_pump'); //Pump losses

time_steps = #Q_saved;

//Energy from gas calculations (converted from W to kW)
for ( i = 0; i < time_steps; i++ )
{
  Q_gas_saved[i] = Q_saved[i] / Eta_burn / 1000;
  Q_gas_no_solar[i] = Q_aux_only[i] / EF_gas_tank / 1000;
  Q_gas_with_solar[i] = ( Q_gas_no_solar[i] - Q_gas_saved[i] + P_pump[i] ) / 1000;
}

//Calculate hourly solar fraction
SF = alloc(8760,1);
count = 1;

for ( i = 0; i < 8760; i++ )
{	
  if (Q_gas_no_solar[i] > 0) //Hours that require gas
  {
    SF[i][1] = Q_gas_saved[i] / Q_gas_no_solar[i];
  }	
  else //Hours that require no gas (should be rare)
  {
    SF[i][1] = 1;
    count = count + 1;
  }	
}

//Calculate annual values
SF_annual = 0.0;
Gas_saved_annual = 0.0;
Gas_no_solar = 0.0;

for (i = 0; i < time_steps; i = i + 1)
{
  SF_annual = SF_annual + SF[i][1];
  Gas_saved_annual = Gas_saved_annual + Q_gas_saved[i];
  Gas_no_solar = Gas_no_solar + Q_gas_no_solar[i];
}
SF_annual = SF_annual/time_steps;

//Display results
outln(sprintf("Energy from gas saved with solar = %,",to_int(Gas_saved_annual)) +" kWh/year");
outln(sprintf("Energy from gas used with no solar = %,",to_int(Gas_no_solar)) + " kWh/year");
outln(sprintf("Annual solar fraction = %.2f", SF_annual));
outln("Number of hours with solar fraction of one = " + count);