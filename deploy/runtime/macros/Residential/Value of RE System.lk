/*@
<p>This macro creates cost and savings tables to help you determine the value of 
electricity generated by a renewable energy (RE) system with and without 
storage. The tables display data for two or three scenarios:</p>

<ul>
<li>No RE system</li>
<li>RE system with no storage</li>
<li>RE system with storage (optional)</li>
</ul>

<p>You may choose a different electricity rate structure for the "no RE system" 
scenario than the two "RE system" scenarios. For example, with no RE system, the
bill can be for a simple flat rate, while the RE system is for time-of-use rates.</p>

<p><strong>To use the macro:</strong></p>
<ol>
<li>If you have not already, set up a case for the RE system (with batteries if
you are considering storage). The assumptions on the Electricity Rates input page
should be for the RE system scenario.</li>
<li>Choose a rate option for the "no system" scenario from the list at right.  If you choose the flat rate option, enter the flat rate and optional fixed monthly charge.</li>
<li>Click <strong>Run macro</strong> above.</li>
</ol>

<p><strong>Tips for interpreting the tables:</strong></p>
<p>The <em>Total Electricity Bill in Year 1</em> table gives you an indication of
the annual savings you can expect from the RE system, and helps you identify the
components of the bill that most contribute to the savings. For example it might
show that demand reduction contributes more to bill savings than shifting energy usage to a different time.</p>
<p>The <em>Present Value of Annual Costs and Net Present Value</em> table shows
details of total lifecycle costs of the system over its life (analysis period) and the
value of the electricty bill savings over that time. The "NPV of project with bill savings"
indicates the total value of the system: A more positive NPV indicates a more
cost-effective scenario. A negative NPV indicates that the electricity bill savings
are less than the total system lifecycle cost.</p>
<p>For commercial projects, electricity bill savings effectively increase the system owner's
income tax by reducing the tax deduction for operating expenses for electricity services.
The table shows the value of this tax increase.</p>
@*/

//@ name=rate_option;type=combo;label=Rate option for "no system" scenario:;value=1. Same rates as RE,2. Flat rate,3. Different rate structure;sel=0
//@ name=flat;type=number;label=Flat rate ($/kWh) for Option 2:;value=0
//@ name=fixed;type=number;label=Fixed monthly charge ($/mo) for Option 2:;value=0

// This macro works for Residential, Commercial, and Third Party - Host / Developer.
// It does not work for Third Party - Host because it requires a cash flow.

//TO DO (maybe): use array or table structure to store variables to minimize
//repeated code and to make it easier to export to CSV

test = false; // set to true to override macro inputs for testing

if ( test ) // set inputs manually for testing
{
	options = [ '1. Same rates as RE','2. Flat rate','3. Different rate structure'];
	macro_rate_option = options[0];
	macro_flat = 0; // flat rate for testing
	macro_fixed = 0; // fixed charge for testing
}
else // get inputs from macro
{
	if ( typeof(macro) == 'unknown' ) 
	{
		msgbox('This macro must be run from within a case.');
		exit;
	}	
	macro_rate_option = macro.rate_option; 
	macro_flat = macro.flat; 
	macro_fixed = macro.fixed;
}

function f_num( num )
{
	return sprintf('$%,',round(num));
}

function add_cf ( a, b, op )
{
	if (#a==#b && op == '+') 
	{
		for(i=0;i<#a;i++)
			s[i]=a[i]+b[i];
		return s;
	}
	
	if (#a==#b && op == '-') 
	{
		for(i=0;i<#a;i++)
			s[i]=a[i]-b[i];
		return s;
	}
	else return null;
}

function npv( cf, d )
{
	total = cf[0];
	for (i=1;i<#cf;i++) 
	{
		total+=cf[i]/(1+d/100)^i;
	}	
	return total;
}

function set_rate_from_urdb()
{
	find_by_zipcode = yesno( 'Find utility by zip code?\nChoose Yes to find by zip code. Choose No to choose from a list of all available utilities.');
	if ( find_by_zipcode ) 
	{
		zip = in( 'Enter the zip code: ', '00000', 'Zip Code' );
		outln('Searching for rates by zip code.');
		utility_list = urdb_list_utilities_by_zip_code ( zip );
			if ( utility_list == null )
		{
			msgbox( 'No utilities found for zip code ' + zip + '.' );
			return false;
		}
	}
	else
	{ 
		outln('Searching for list of utilities.');
		utility_list = urdb_list_utilities();
	}
	
	utility_choice = choose_from_list( utility_list, 'Choose a utility:','Choose Utility',0);
	
	outln('Searching for list of rates for ' + utility_choice + '.');
	rate_list = urdb_list_rates( utility_choice );
	
	// separate rate names from rate guids
	i=0;
	n=0;
	g=0;
	while ( i<#rate_list )
	{
		if ( mod(i,2) == 0 ) 
		{
			rate_name_list[n] = rate_list[i];
			n++;
		}	
		else
		{
			rate_guid_list[g] = rate_list[i];
			g++;
		}		
		i++;
	}
	
	// get rate name
	if ( #rate_list > 0 )
	{
		rate_choice = choose_from_list( rate_name_list, 'Choose a rate:', 'Chooose Rate', 0);
	}
	else
	{
		msgbox( 'No rates available for ' + utility_choice + '.');
		return false;
	}
	
	for ( i=0; i<#rate_name_list; i++ )
	{
		if ( rate_name_list[i] == rate_choice ) rate_index = i;
	}
	
	outln('Populating inputs on Electricity Rates page with data from OpenEI URDB GUID ' + rate_guid_list[rate_index]);
	rate_table = urdb_get( rate_guid_list[rate_index] );	
	
	keys = @rate_table;
	for ( i=0; i<#keys; i++ )
	{
		set( 'ur_' + keys[i] , rate_table{keys[i]} );
	}

	return true;
}

function get_basecase_rate()
{
	is_file_valid = false;
	is_set_rate_from_urdb = yesno( 'Download rate from OpenEI URDB?\nClick No to load rate data from a CSV file saved from the Electricity Rates page instead.');
	if ( is_set_rate_from_urdb ) 
	{
		return set_rate_from_urdb();
	}
	else
	{
		while ( !is_file_valid )
		{ 	
			f_rate = '';
			f_rate = choose_file( cwd(), 'Choose Electricity Rate Data File', 'CSV Files (*.csv)|*.csv', false, false, '' );
			outln('Reading electricity rate data from ' + f_rate + '.');
			if ( f_rate != '' )
			{
				is_file_valid = urdb_read( f_rate );
			}
			if ( !is_file_valid )
			{
				if (!yesno('Failed to load rate data from file!\n' + f_rate + '\n\nClick Yes to try another file. Click No to exit the script.'))
				{
					outln('Failed to load rate data from file. Exiting script.');
					exit;
				}
			}	
		}
		outln('Electricity Rate page inputs populated with data from file.');
		return is_file_valid;
	}

}

function set_flat_rate( flat_rate, fixed_charge)
{

	if ( flat_rate == 0 )
	{
		ok = yesno('Flat rate is zero!\nIf you meant to use a flat buy rate of zero, click Yes to continue.\nOtherwise click No and set the value of \"Flat rate ($/kWh) for Option 2\" before running the script again.');
		if ( !ok ) { exit; }
	}
	
	set('ur_monthly_fixed_charge', fixed_charge);
	set('ur_annual_min_charge',0);
	set('ur_monthly_min_charge',0);
	set('ur_dc_enable',0);

	set('ur_ec_sched_weekday', 
		[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ] );

	set('ur_ec_sched_weekend',
		[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ] );

	set('ur_ec_tou_mat', 
		[ [ 1, 1, 1e+38, 0, flat_rate, flat_rate ] ] );

	return true;

}

function credits()
{
	months = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];
	month = months[ get('ur_nm_credit_month') ];
	metering = get('ur_metering_option');
	T={};
	// T.credit and T.trueup use array length to indicate if value applies to metering option:
	// if #T.credit > 1, then value is a monthly output array from SAM
	// otherwise it is set to [0] below
	if ( metering == 0 && get('ur_nm_credit_rollover') == 0 ) // net metering
	{
		T.credit = [0];
		T.trueup = get( 'year1_true_up_credits' );
		T.label = 'True up payment in ' + month + '';
	}
	elseif ( metering == 0 ) // net metering with excess compensation rollover
	{
		T.credit = get('year1_nm_dollars_applied');
		T.trueup = [0];
		T.label = 'Excess rollover credits start in ' + month + '';
	}
	elseif ( metering == 1 ) // net metering dollar credits
	{
		T.credit = get('year1_nm_dollars_applied');
		T.trueup = get( 'year1_true_up_credits' );
		T.label = 'True up payment in ' + month;
	}
	elseif ( metering == 2 ) // net billing
	{
		T.credit = get('year1_net_billing_credits');
		T.trueup = [0];
		T.label = '';
	}
	elseif ( metering == 3 ) // net billing with carryover
	{
		T.credit = get('year1_net_billing_credits');
		T.trueup = get( 'year1_true_up_credits' );
		T.label = 'True up payment in (' + month + ')';
	}
	else // buy all / sell all
	{
		T.credit = get('year1_two_meter_sales');
		T.trueup = [0];
		T.label = '';
	}
	return T;
}

function cost_w_bill( none_cf, re_cf, w_re_bill, is_comm )
{
	if ( is_comm ) // calculate tax on increase in income due to bill savings
	{
		tax_rate = get('effective_tax_rate')/100;
		for (i=0;i<#w_re_bill;i++)
		{
			savings[i] = none_cf[i] - w_re_bill[i];
			tax[i] = savings[i]*tax_rate;
			after_tax_bill[i] = w_re_bill[i] + tax[i];
		}
		T.pv_tax=npv(tax,discount_rate);
		T.cf_w_bill = add_cf(re_cf,after_tax_bill,'-');
	}
	else
	{
		T.pv_tax = -1;
		T.cf_w_bill = add_cf(re_cf,w_re_bill,'-');
	}	
	return T;
}

function get_case() {
	cases = list_cases();
	if ( #cases > 1 ) case = choose_from_list( cases, 'Choose a case:', 'Choose Case', 0 );
	else case = cases[0];
	active_case( case );
}

config = configuration();
is_commercial = ( config[1] == 'Commercial' );
is_tpo = ( config[1] == 'Host Developer' ); // Third Party Host does not have cash flow

// Macro requires ability to disable battery by setting en_batt to zero
// May need to change this in future to set battery capacity to zero for no storage cases
if ( get('en_batt') == 1 ) { batt = true; }
else { batt = false; }

// Financial parameters that apply to all scenarios
analysis_period = get('analysis_period');
discount_rate = get('nominal_discount_rate');
inflation_rate = get('inflation_rate');
escalation_rate = get('rate_escalation');

// Base case no PV or battery //////////////////////////////////////////////////

// Run simulation
temp_file = homedir() + '/current.txt';
restore_rate = false;
if ( macro_rate_option == '2. Flat rate' )
{
	// save current rate data to a temporary file
	outln('Saving data from Electricity Rates page to temporary file.');
	urdb_write( temp_file );

	out('Running simulation for base case with no RE system and flat rate...');
	ok = set_flat_rate( macro_flat , macro_fixed );
	if ( ok )
	{
		simulate('',true);
	}	
	else
	{
		msgbox ('Unable to set flat rate.\n Exiting script.' );
		exit;
	}
	outln('done.');
	restore_rate = true;
}
elseif ( macro_rate_option == '3. Different rate structure' ) 
{
	// save current rate data to a temporary file
	outln('Saving data from Electricity Rates page to temporary file.');
	urdb_write( temp_file );

	// get new base rate and run a simulation
	ok = get_basecase_rate();
	out('Running simulation for base case with no RE system with different rate...');
	if ( ok ) 
	{
		simulate('',true); 
	 }
	else 
	{
		msgbox( 'Unable to set rate data for case with no RE system.\n Please try again using Rate Option 1 or 2.\n\nExiting script.' );
		exit;
	}	
	outln('done.');
	restore_rate = true;
}
else
{
	out('Running simulation for base case with no RE system with same rate...');
	simulate('',true); // 1. Same rate structure
	outln('done.');
}

// Get monthly bill components
ec = get('year1_monthly_ec_charge_without_system');
fixed = get('year1_monthly_fixed_without_system');
dc_tou = get('year1_monthly_dc_tou_without_system');
dc_fixed = get('year1_monthly_dc_fixed_without_system');
mc = get('year1_monthly_minimum_without_system'); // annual and monthly minimum combined
total = get('year1_monthly_utility_bill_wo_sys');

// Year 1 bill is sum of monthly components
none_ec = sum(ec);
none_fixed = sum(fixed);
none_dc_fixed = sum(dc_fixed);
none_dc_tou = sum(dc_tou);
none_mc = sum(mc);
none_total_bill = sum(total);

// Annual cash flows for value calculations
none_annual_cashflow = get('elec_cost_without_system');
none_npc = npv(none_annual_cashflow,discount_rate);
none_npv = 0;

if ( restore_rate )
{
	outln('Cleaning up temporary files and restoring inputs on Electricity Rates page to original data.');
	if ( file_exists( temp_file ) && urdb_read( temp_file ) ) { remove_file( temp_file ); }
	else { msgbox( 'Unable to restore original rate data.\nCould not find temporary file:\n' + temp_file + '.'); }
}

// PV only /////////////////////////////////////////////////////////////////////

out('Running simulation for RE scenario...');

// Temporarily disable battery
if ( batt ) { set('en_batt',0); }

// Run simulation
simulate('',true);
outln('done.');

// Re-enable battery if it was disabled above
if ( batt ) { set('en_batt',1); }

// Get monthly bill components
ec_gross = get('year1_monthly_ec_charge_gross_with_system');
ec = get('year1_monthly_ec_charge_with_system');
fixed = get('year1_monthly_fixed_with_system');
dc_tou = get('year1_monthly_dc_tou_with_system');
dc_fixed = get('year1_monthly_dc_fixed_with_system');
mc = get('year1_monthly_minimum_with_system');
T = credits();
credit = T.credit;
re_label = T.label;
trueup = T.trueup;
total = get('year1_monthly_utility_bill_w_sys');

// Year 1 bill is sum of monthly components
re_ec_gross = sum( ec_gross );
if ( #T.credit > 1 ) { re_credit = -sum(credit); }
else { re_credit = null; }
re_ec = sum(ec);
re_fixed = sum(fixed);
re_dc_fixed = sum(dc_fixed);
re_dc_tou = sum(dc_tou);
re_mc = sum(mc);
if ( #T.trueup > 1 ) { re_trueup = -sum( trueup ); }
else { re_trueup = null; }
re_total_bill = sum(total);
re_bill_savings = none_total_bill - re_total_bill ;

// Annual cash flows for value calculations
re_annual_cost = get('cf_after_tax_net_equity_cost_flow');
re_npc = -npv(re_annual_cost,discount_rate);
re_annual_bill = get('elec_cost_with_system');
re_bill_npc = npv(re_annual_bill,discount_rate);
CF = cost_w_bill( none_annual_cashflow, re_annual_cost, re_annual_bill, is_commercial );
re_npc_w_bill = -npv(CF.cf_w_bill,discount_rate); //costs are negative
re_npv_tax = CF.pv_tax;
re_npv = get('npv');

// RE+Battery //////////////////////////////////////////////////////////////////
if ( batt )
{
	out('Running simulation for RE+battery scenario...');
	
	// This check should not be needed now that battery configurations enforce
	// lifetime simulation requirement. This was needed when battery was an option
	// for Detailed PV configuration that can be run without lifetime simulations.
	if (get('pv_lifetime_simulation') == false )
	{
		msgbox('Battery replacement costs require simulation over analysis period.\n' +
		       'On the Lifetime page, you chose the "PV simulation over one year" option. ' +
		       'This macro requires that the setting be "PV simulation over analysis period"' +
		       'and automatically changed the setting for you.');
		set('pv_lifetime_simulation',true);
	}

	simulate('',true);
	outln('done.');
	
	// Get monthly bill components
	ec_gross = get('year1_monthly_ec_charge_gross_with_system');
	ec = get('year1_monthly_ec_charge_with_system');
	fixed = get('year1_monthly_fixed_with_system');
	dc_tou = get('year1_monthly_dc_tou_with_system');
	dc_fixed = get('year1_monthly_dc_fixed_with_system');
	mc = get('year1_monthly_minimum_with_system');
	T = credits();
	credit = T.credit;
	batt_label = T.label;
	trueup = T.trueup;
	total = get('year1_monthly_utility_bill_w_sys');

	// Year 1 bill is sum of monthly components
	batt_ec_gross = sum(ec_gross);
	batt_credit = -sum(credit);
	batt_ec = sum(ec);
	batt_fixed = sum(fixed);
	batt_dc_fixed = sum(dc_fixed);
	batt_dc_tou = sum(dc_tou);
	batt_mc = sum(mc);
	batt_trueup = -sum(trueup);
	batt_total_bill = sum(total);
	batt_bill_savings = none_total_bill - batt_total_bill;
	
	// Annual cash flows for value calculations
	batt_annual_cost = get('cf_after_tax_net_equity_cost_flow');
	batt_annual_replacement_cost = get('cf_battery_replacement_cost');
	batt_npc_replacement = npv(batt_annual_replacement_cost,discount_rate);
	batt_npc = -npv(batt_annual_cost,discount_rate) - batt_npc_replacement;
	batt_annual_bill = get('elec_cost_with_system');
	batt_bill_npc = npv(batt_annual_bill,discount_rate);
	CF = cost_w_bill( none_annual_cashflow, batt_annual_cost, batt_annual_bill, is_commercial);
	batt_npc_w_bill = -npv(CF.cf_w_bill,discount_rate); //costs are negative
	batt_npv_tax = CF.pv_tax;
	batt_npv = get('npv');
}

outln('Finished simulations. Generating reports.');

// HTML output
case = case_name();
str_html_trueup = '';
str_html_credit = '';
if ( re_trueup != null )
{
	str_html_trueup = '<tr><td>'+ re_label + '</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(re_trueup) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_trueup) + '</td>' ] + '</tr>';
}
if ( re_credit != null)
{
	str_html_credit = '<tr bgcolor=#ffffff><td>Energy before credits</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(re_ec_gross) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_ec_gross) + '</td>' ] + '</tr>';
	str_html_credit += '<tr><td>Credits</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(re_credit) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_credit) + '</td>' ] + '</tr>';
}
str_html = '<html><body>' + 
           '<h3><font size = "4">Total Electricity Bill in Year 1</font></h3>' + 
           '<table bgcolor=#dddddd width=100%>' + 
           '<tr><th>Charge</th><th>No RE System</th>' + ? batt [ '<th>RE System</th>' , '<th>RE Only</th><th>RE+Battery</th>' ] + '</tr>' + 
			str_html_credit +
           '<tr bgcolor=#ffffff><td><b>Energy</b></td><td align="right"><b>' + f_num(none_ec) + '</b></td><td align="right"><b>' + f_num(re_ec) + '</b></td>' + ? batt [ '' , '<td align="right"><b>' + f_num(batt_ec) + '</b></td>' ] + '</tr>' +             
           '<tr><td>Fixed</td><td align="right">' + f_num(none_fixed) + '</td><td align="right">' + f_num(re_fixed) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_fixed) + '</td>' ] + '</tr>' +             
           '<tr bgcolor=#ffffff><td width="50%">Demand (fixed)</td><td align="right">' + f_num(none_dc_fixed) + '</td><td align="right">' + f_num(re_dc_fixed) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_dc_fixed) + '</td>' ] + '</tr>' +             
           '<tr><td>Demand (TOU)</td><td align="right">' + f_num(none_dc_tou) + '</td><td align="right">' + f_num(re_dc_tou) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_dc_tou) + '</td>' ] + '</tr>' +             
           '<tr bgcolor=#ffffff><td>Minimum charge</td><td align="right">' + f_num(none_mc) + '</td><td align="right">' + f_num(re_mc) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_mc) + '</td>' ] + '</tr>' +             
			str_html_trueup + 
           '<tr bgcolor=#bbbbbb><td><b>Total bill</b></td><td align="right"><b>' + f_num(none_total_bill) + '</b></td><td align="right"><b>' + f_num(re_total_bill) + '</b></td>' + ? batt [ '' , '<td align="right"><b>' + f_num(batt_total_bill) + '</b></td>' ] + '</tr>' +
           '<tr bgcolor=#bbbbbb><td><b>Savings compared to no system</b></td><td align="right"><b>' + f_num(0) + '</b></td><td align="right"><b>' + f_num(re_bill_savings) + '</b></td>' + ? batt [ '' , '<td align="right"><b>' + f_num(batt_bill_savings) + '</b></td>' ] + '</tr>' +
		   '</table>' +
		   '<br><br><br>' +
           '<h3><font size = "4">Present Value of Annual Costs and Net Present Value</font></h3>' + 
           '<table bgcolor=#dddddd width=100%>' + 
           '<tr><th>Present Value</th><th>No System</th>'+ ? batt [ '<th>RE System</th>' , '<th>RE Only</th><th>RE+Battery</th>' ] + '</tr>' + 
           '<tr bgcolor=#ffffff><td width="50%">Electricity bill</td><td align="right">' + f_num(none_npc) + '</td><td align="right">' + f_num(re_bill_npc) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_bill_npc) + '</td>' ] + '</tr>' +
           ? is_commercial [ '' , '<tr><td width="50%">Income tax increase due to bill savings</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(re_npv_tax) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npv_tax) + '</td>' ] + '</tr>' ] + 
           '<tr ' + ? is_commercial ['','bgcolor=#ffffff'] + '><td width="50%">System costs after tax</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(re_npc) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npc) + '</td>' ] + '</tr>' +
           '<tr ' + ? is_commercial ['bgcolor=#ffffff',''] + '><td width="50%">Battery replacement cost</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(0) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npc_replacement) + '</td>' ] + '</tr>' +
           '<tr bgcolor=#bbbbbb><td width="50%"><b>Total cost</b></td><td align="right"><b>' + f_num(none_npc) + '</b></td><td align="right"><b>' + f_num(re_npc_w_bill) + '</b></td>' + ? batt [ '' , '<td align="right"><b>' + f_num(batt_npc_w_bill) + '</b></td>' ] + '</tr>' +
		   '<tr bgcolor=#bbbbbb><td><b>' + ? is_tpo ['NPV of project','Host NPV'] + ' with bill savings</b></td><td align="right"><b>' + f_num(0) + '</b></td><td align="right"><b>' + f_num(re_npv) + '</b></td>' + ? batt [ '' , '<td align="right"><b>' + f_num(batt_npv) + '</b></td>' ] + '</tr>' +
		   '</table>' +
          '</body></html>';

// CSV output
str_csv_trueup = '';
str_csv_credit = '';
if ( re_trueup != null )
{
	str_csv_trueup = re_label + ',' + 0 + ',' + re_trueup + ',' + ? batt [ '' , batt_trueup ] + '\n';
}
if ( re_credit != null)
{
	str_csv_credit = 'Energy before credits,' + 0 + ',' + re_ec_gross + ',' + ? batt [ '' , batt_ec_gross ] + '\n';
	str_csv_credit += 'Credits,' + 0 + ',' + re_credit + ',' + ? batt [ '' , batt_credit ] + '\n';
}
str_csv =  'Total Electricity Bill in Year 1' + '\n' +
'Charge,No RE System,' + ? batt [ 'RE System' , 'RE System Only,RE+Battery' ] + '\n' +
str_csv_credit +
'Energy,' + none_ec + ',' + re_ec + ? batt [ '' , ',' + batt_ec ] + '\n' +
'Fixed,' + none_fixed + ',' + re_fixed + ? batt [ '' , ',' + batt_fixed ] + '\n' +      
'Demand (fixed),' + none_dc_fixed + ',' + re_dc_fixed + ? batt [ '' , ',' + batt_dc_fixed ] + '\n' +         
'Demand (TOU),' + none_dc_tou + ',' + re_dc_tou + ? batt [ '' , ',' + batt_dc_tou ] + '\n' +      
'Minimum,' + none_mc + ',' + re_mc + ? batt [ '' , ',' + batt_mc ] + '\n' +        
str_csv_trueup +
'Total bill,' + none_total_bill + ',' + re_total_bill + ? batt [ '' , ',' + batt_total_bill ] + '\n' +
'Savings compared to no system,' + 0 + ',' + re_bill_savings + ? batt [ '' , ',' + batt_bill_savings ] + '\n' +
'' + '\n' +
'Present Value of Annual Costs and Net Present Value' + '\n' +
'Present Value,No RE System,'+ ? batt [ 'RE System' , 'RE System Only,RE+Battery' ]  + '\n' +
'Electricity bill,' + none_npc + ',' + re_bill_npc + ? batt [ '' , ',' + batt_bill_npc ] + '\n' +
? is_commercial [ '' , 'Income tax increase due to bill savings,' + 0 + ',' + re_npv_tax + ? batt [ '' , ',' + batt_npv_tax ]  + '\n' ]  +
'System costs after tax,' + 0 + ',' + re_npc + ? batt [ '' , ',' + batt_npc ] + '\n' +
'Battery replacement cost,' + 0 + ',' + 0 + ? batt [ '' , ',' + batt_npc_replacement ] + '\n' +
'Total cost,' + none_npc + ',' + re_npc_w_bill + ? batt [ '' , ',' + batt_npc_w_bill ] + '\n' +
? is_tpo['NPV of project','Host NPV'] +' with bill savings,' + 0 + ',' + re_npv + ? batt [ '' , ',' + batt_npv ];

f_csv = homedir()+'/'+replace(case_name(),'/','-')+'_value_of_re_report.csv';
ok = write_text_file(f_csv,str_csv);
if ( ok ) 
{
	outln('Data written to ' + f_csv );
	browse( f_csv );
}
else
{
	outln('Failed to write data to ' + f_csv );
}	

html_dialog ( str_html , 'Value of RE' + ? batt [ '', ' and Battery' ] + ' for "' + case + '" Case' , [300,300,600,600]);

outln('Done.');