/*@
<p>This macro creates cost and savings tables to help you determine the value of 
electricity generated by a renewable energy (RE) system with and without 
storage. The tables display data for two or three scenarios:</p>

<ul>
<li>No RE system</li>
<li>RE system with no storage</li>
<li>RE system with storage (optional)</li>
</ul>

<p>You may choose a different electricity rate structure for the "no RE system" 
scenario than the two "RE system" scenarios. For example, with no RE system, the
bill can be for a simple flat rate, while the RE system is for time-of-use rates.</p>

<p><strong>To use the macro:</strong></p>
<ol>
<li>If you have not already, set up a case for the RE system (with batteries if
you are considering storage). The assumptions on the Electricity Rates input page
should be for the RE system scenario.</li>
<li>Choose a rate option for the "no system" scenario from the list at right.  If you choose the flat rate option, enter the flat rate and optional fixed monthly charge.</li>
<li>Click <strong>Run macro</strong> above.</li>
</ol>

<p><strong>Tips for interpreting the tables:</strong></p>
<p>The <em>Total Electricity Bill in Year 1</em> table gives you an indication of
the annual savings you can expect from the RE system, and helps you identify the
components of the bill that most contribute to the savings. For example it might
show that demand reduction contributes more to bill savings than shifting energy usage to a different time.</p>
<p>The <em>Present Value of Annual Costs and Net Present Value</em> table shows
details of total lifecycle costs of the system over its life (analysis period) and the
value of the electricty bill savings over that time. The "NPV of project with bill savings"
indicates the total value of the system: A more positive NPV indicates a more
cost-effective scenario. A negative NPV indicates that the electricity bill savings
are less than the total system lifecycle cost.</p>
@*/

//@ name=rate_option;type=combo;label=Rate option for "no system" scenario:;value=1. Same rates as PV,2. Flat rate,3. Different rate structure;sel=0
//@ name=flat;type=number;label=Flat rate ($/kWh) for Option 2:;value=0
//@ name=fixed;type=number;label=Fixed monthly charge ($/mo) for Option 2:;value=0

//TO DO: test with all metering options

//TO DO (maybe): use array or table structure to store variables to minimize
//repeated code and to make it easier to export to CSV

function f_num( num )
{
	return sprintf('$%,',round(num));
}

function add_cf ( a, b, op )
{
	if (#a==#b && op == '+') 
	{
		for(i=0;i<#a;i++)
			s[i]=a[i]+b[i];
		return s;
	}
	
	if (#a==#b && op == '-') 
	{
		for(i=0;i<#a;i++)
			s[i]=a[i]-b[i];
		return s;
	}
	else return null;
}

function npv( cf, d )
{
	total = cf[0];
	for (i=1;i<#cf;i++)
		total+=cf[i]/(1+d/100)^i;
	return total;
}

function get_basecase_rate()
{
	find_by_zipcode = yesno( 'Find utility by zip code?\nChoose Yes to find by zip code. Choose No to choose from a list of all available utilities.');
	if ( find_by_zipcode ) 
	{
		zip = in( 'Enter the zip code: ', '00000', 'Zip Code' );
		utility_list = urdb_list_utilities_by_zip_code ( zip );
			if ( utility_list == null )
		{
			msgbox( 'No utilities found for zip code ' + zip + '.' );
			return false;
		}
	}
	else 
		utility_list = urdb_list_utilities();

	utility_choice = choose_from_list( utility_list, 'Choose a utility:','Choose Utility',0);
	
	rate_list = urdb_list_rates( utility_choice );
	
	// separate rate names from rate guids
	i=0;
	n=0;
	g=0;
	while ( i<#rate_list )
	{
		if ( mod(i,2) == 0 ) 
		{
			rate_name_list[n] = rate_list[i];
			n++;
		}	
		else
		{
			rate_guid_list[g] = rate_list[i];
			g++;
		}		
		i++;
	}
	
	// get desired rate name
	if ( #rate_list > 0 )
	{
		rate_choice = choose_from_list( rate_name_list, 'Choose a rate:', 'Chooose Rate', 0);
	}
	else
	{
		msgbox( 'No rates available for ' + utility_choice + '.');
		return false;
	}
	
	for ( i=0; i<#rate_name_list; i++ )
	{
		if ( rate_name_list[i] == rate_choice ) rate_index = i;
	}
	
	rate_table = urdb_get( rate_guid_list[rate_index] );	
	
	keys = @rate_table;
	for ( i=0; i<#keys; i++ )
	{
		set( 'ur_' + keys[i] , rate_table{keys[i]} );
	}
	
	return true;
}

function set_flat_rate( flat_rate, fixed_charge)
{
	set('ur_monthly_fixed_charge', fixed_charge);
	set('ur_annual_min_charge',0);
	set('ur_monthly_min_charge',0);
	set('ur_dc_enable',0);
	
	set('ur_ec_sched_weekday', 
		[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ] );

	set('ur_ec_sched_weekend',
		[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ] );

	set('ur_ec_tou_mat', 
		[ [ 1, 1, 9.9999996802856925e+037, 0, flat_rate, flat_rate ] ] );

	return true;

}

function eoy_net_metering_credit()
{
	metering = get('ur_metering_option');
	is_net_metering_kwh = ( metering == 0 );
	if ( is_net_metering_kwh ) 
	{
		yrend_sell_rate = get('ur_nm_yearend_sell_rate');
		nm_credits_kwh = get('year1_monthly_cumulative_excess_generation');
		return - yrend_sell_rate * nm_credits_kwh[11];
	}
	else return 0;
}

function cost_w_bill( none_cf, re_cf, w_re_bill, is_comm, pv_tax )
{
	if ( is_comm ) // calculate tax on increase in income due to bill savings
	{
		tax_rate = get('effective_tax_rate')/100;
		for (i=0;i<#w_re_bill;i++)
		{
			savings[i] = none_cf[i] - w_re_bill[i];
			tax[i] = savings[i]*tax_rate;
			after_tax_bill[i] = w_re_bill[i] + tax[i];
		}
		pv_tax=npv(tax,discount_rate);
		cf_w_bill = add_cf(re_cf,after_tax_bill,'-');
	}
	else cf_w_bill = add_cf(re_cf,w_re_bill,'-');
	return cf_w_bill;
}

function get_case() {
	cases = list_cases();
	if ( #cases > 1 ) case = choose_from_list( cases, 'Choose a case:', 'Choose Case', 0 );
	else case = cases[0];
	active_case( case );
}

//Check that this macro was run from within a case
if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
}

get_case();
config = configuration();
is_commercial = ( config[1] == 'Commercial' );
ok = ( config[1] == 'Residential' || config[1] == 'Commercial' );
if ( !ok )
{
	msgbox('This macro works only with the Residential or Commercial financial models.');
	exit;
}

if ( get('en_batt') == 1 ) batt = true;
else batt = false;

// Financial parameters that apply to all scenarios
analysis_period = get('analysis_period');
discount_rate = get('nominal_discount_rate');
inflation_rate = get('inflation_rate');
escalation_rate = get('rate_escalation');

// No PV or Battery
temp_file = homedir() + '/current.txt';
restore_rate = false;
if ( macro.rate_option == '2. Flat rate' )
{
	// save current rate data to a temporary file
	urdb_write( temp_file );

	ok = set_flat_rate( macro.flat , macro.fixed );
	if ( ok ) simulate('',true);
	else msgbox ('Unable to set flat rate.\n Results will be based on using the same rate for all scenarios.' );

	restore_rate = true;
}
elseif ( macro.rate_option == '3. Different rate structure' ) 
{
	// save current rate data to a temporary file
	urdb_write( temp_file );

	// get new base rate and run a simulation
	ok = get_basecase_rate ();
	if ( ok ) simulate('',true);
	else msgbox( 'Unable to set rate data for case with no system.\n Results will be based on using the same rate for all scenarios.' );
	
	restore_rate = true;
}
else simulate('',true); // 1. Same rate structure

if ( restore_rate )
{
	if ( file_exists( temp_file ) && urdb_read( temp_file ) ) remove_file( temp_file );
	else msgbox( 'Unable to restore original rate data.\nCould not find temporary file:\n' + temp_file + '.');
}

// get monthly bill components
ec = get('year1_monthly_ec_charge_without_system');
fixed = get('year1_monthly_fixed_without_system');
dc_tou = get('year1_monthly_dc_tou_without_system');
dc_fixed = get('year1_monthly_dc_fixed_without_system');
min_mon = get('year1_monthly_minimum_without_system');
min_ann = get('year1_annual_minimum_without_system');
total = get('year1_monthly_utility_bill_wo_sys');
// year 1 bill components for pv only
none_ec = sum(ec);
none_fixed = sum(fixed);
none_dc_fixed = sum(dc_fixed);
none_dc_tou = sum(dc_tou);
none_min_mon = sum(min_mon);
none_min_ann = sum(min_ann);
none_total_bill = sum(total);
//annual cash flows for value calculations
none_annual_cashflow = get('elec_cost_without_system');
none_npc = npv(none_annual_cashflow,discount_rate);
none_npv = 0;

// PV Only
if ( batt ) set('en_batt',0);
simulate('',true);
// get monthly bill components
ec = get('year1_monthly_ec_charge_with_system');
fixed = get('year1_monthly_fixed_with_system');
dc_tou = get('year1_monthly_dc_tou_with_system');
dc_fixed = get('year1_monthly_dc_fixed_with_system');
min_mon = get('year1_monthly_minimum_with_system');
min_ann = get('year1_annual_minimum_with_system');
pv_yrend_nm_credit = eoy_net_metering_credit();
total = get('year1_monthly_utility_bill_w_sys');
// year 1 bill components for pv only
pv_ec = sum(ec);
pv_fixed = sum(fixed);
pv_dc_fixed = sum(dc_fixed);
pv_dc_tou = sum(dc_tou);
pv_min_mon = sum(min_mon);
pv_min_ann = sum(min_ann);
pv_total_bill = sum(total);
pv_bill_savings = none_total_bill - pv_total_bill ;
//annual cash flows for value calculations
pv_annual_cost = get('cf_after_tax_net_equity_cost_flow');
pv_npc = -npv(pv_annual_cost,discount_rate);
pv_annual_bill = get('elec_cost_with_system');
pv_bill_npc = npv(pv_annual_bill,discount_rate);
pv_npv_tax = -1;
cf_w_bill = cost_w_bill( none_annual_cashflow, pv_annual_cost, pv_annual_bill, is_commercial, pv_npv_tax );
pv_npc_w_bill = -npv(cf_w_bill,discount_rate); //costs are negative
pv_npv = get('npv');

// PV+Battery
if ( batt )
{
	if (get('pv_lifetime_simulation') == false )
	{
		msgbox('Battery replacement costs require simulation over analysis period.\n' +
		       'On the Lifetime page, you chose the "PV simulation over one year" option. ' +
		       'This macro requires that the setting be "PV simulation over analysis period"' +
		       'and automatically changed the setting for you.');
		set('pv_lifetime_simulation',true);
	}
	set('en_batt',1);
	simulate('',true);
	// get monthly bill components
	ec = get('year1_monthly_ec_charge_with_system');
	fixed = get('year1_monthly_fixed_with_system');
	dc_tou = get('year1_monthly_dc_tou_with_system');
	dc_fixed = get('year1_monthly_dc_fixed_with_system');
	min_mon = get('year1_monthly_minimum_with_system');
	min_ann = get('year1_annual_minimum_with_system');
	total = get('year1_monthly_utility_bill_w_sys');
	// year 1 bill components for pv+battery
	batt_ec = sum(ec);
	batt_fixed = sum(fixed);
	batt_dc_fixed = sum(dc_fixed);
	batt_dc_tou = sum(dc_tou);
	batt_min_mon = sum(min_mon);
	batt_min_ann = sum(min_ann);
	batt_yrend_nm_credit = eoy_net_metering_credit();
	batt_total_bill = sum(total);
	batt_bill_savings = none_total_bill- batt_total_bill;
	//annual cash flows for value calculations
	batt_annual_cost = get('cf_after_tax_net_equity_cost_flow');
	batt_annual_replacement_cost = get('cf_battery_replacement_cost');
	batt_npc_replacement = npv(batt_annual_replacement_cost,discount_rate);
	batt_npc = -npv(batt_annual_cost,discount_rate) - batt_npc_replacement;
	batt_annual_bill = get('elec_cost_with_system');
	batt_bill_npc = npv(batt_annual_bill,discount_rate);
	batt_npv_tax = -1;
	cf_w_bill = cost_w_bill( none_annual_cashflow, batt_annual_cost, batt_annual_bill, is_commercial, batt_npv_tax );
	batt_npc_w_bill = -npv(cf_w_bill,discount_rate); //costs are negative
	batt_npv = get('npv');
}
/*diff = none_npc-pv_npc_w_bill;
outln( none_npc + '-' + pv_npc_w_bill + '=' + diff );
outln(pv_annual_cost[0]);*/
// HTML Output
case = case_name();
str_html = '<html><body>' + 
           '<h3><font size = "4">Total Electricity Bill in Year 1</font></h3>' + 
           '<table bgcolor=#dddddd width=100%>' + 
           '<tr><th>Charge</th><th>No System</th>' + ? batt [ '<th>RE System</th>' , '<th>RE Only</th><th>RE+Battery</th>' ] + '</tr>' + 
           '<tr bgcolor=#ffffff><td>Energy</td><td align="right">' + f_num(none_ec) + '</td><td align="right">' + f_num(pv_ec) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_ec) + '</td>' ] + '</tr>' +             
           '<tr><td>Fixed</td><td align="right">' + f_num(none_fixed) + '</td><td align="right">' + f_num(pv_fixed) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_fixed) + '</td>' ] + '</tr>' +             
           '<tr bgcolor=#ffffff><td width="50%">Demand (fixed)</td><td align="right">' + f_num(none_dc_fixed) + '</td><td align="right">' + f_num(pv_dc_fixed) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_dc_fixed) + '</td>' ] + '</tr>' +             
           '<tr><td>Demand (TOU)</td><td align="right">' + f_num(none_dc_tou) + '</td><td align="right">' + f_num(pv_dc_tou) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_dc_tou) + '</td>' ] + '</tr>' +             
           '<tr bgcolor=#ffffff><td>Monthly minimum</td><td align="right">' + f_num(none_min_mon) + '</td><td align="right">' + f_num(pv_min_mon) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_min_mon) + '</td>' ] + '</tr>' +             
		   '<tr><td>Annual minimum</td><td align="right">' + f_num(none_min_ann) + '</td><td align="right">' + f_num(pv_min_ann) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_min_ann) + '</td>' ] + '</tr>' +             
		   '<tr bgcolor=#ffffff><td>Year end net metering credit</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_yrend_nm_credit) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_yrend_nm_credit) + '</td>' ] + '</tr>' +             
           '<tr><td><b>Total bill</b></td><td align="right"><b>' + f_num(none_total_bill) + '</b></td><td align="right"><b>' + f_num(pv_total_bill) + '</b></td>' + ? batt [ '' , '<td align="right"><b>' + f_num(batt_total_bill) + '</b></td>' ] + '</tr>' +
           '<tr bgcolor=#ffffff><td>Savings compared to no system</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_bill_savings) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_bill_savings) + '</td>' ] + '</tr>' +
		   '</table>' +
		   '<br><br><br>' +
           '<h3><font size = "4">Present Value of Annual Costs and Net Present Value</font></h3>' + 
           '<table bgcolor=#dddddd width=100%>' + 
           '<tr><th>Present Value</th><th>No System</th>'+ ? batt [ '<th>RE System</th>' , '<th>RE Only</th><th>RE+Battery</th>' ] + '</tr>' + 
           '<tr bgcolor=#ffffff><td width="50%">Electricity bill</td><td align="right">' + f_num(none_npc) + '</td><td align="right">' + f_num(pv_bill_npc) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_bill_npc) + '</td>' ] + '</tr>' +
           ? is_commercial [ '' , '<tr><td width="50%">Income tax increase due to bill savings</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_npv_tax) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npv_tax) + '</td>' ] + '</tr>' ] + 
           '<tr ' + ? is_commercial ['','bgcolor=#ffffff'] + '><td width="50%">System costs after tax</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_npc) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npc) + '</td>' ] + '</tr>' +
           '<tr ' + ? is_commercial ['bgcolor=#ffffff',''] + '><td width="50%">Battery replacement cost</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(0) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npc_replacement) + '</td>' ] + '</tr>' +
           '<tr ' + ? is_commercial ['','bgcolor=#ffffff'] + '><td width="50%"><b>Total cost</b></td><td align="right"><b>' + f_num(0) + '</b></td><td align="right"><b>' + f_num(pv_npc_w_bill) + '</b></td>' + ? batt [ '' , '<td align="right"><b>' + f_num(batt_npc_w_bill) + '</b></td>' ] + '</tr>' +
		   '<tr ' + ? is_commercial ['bgcolor=#ffffff',''] + '><td>NPV of project with bill savings</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_npv) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npv) + '</td>' ] + '</tr>' +
		   '</table>' +
          '</body></html>';

html_dialog ( str_html , 'Value of RE' + ? batt [ '', ' and Battery' ] + ' for "' + case + '" Case' , [300,300,600,600]);

