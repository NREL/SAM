/*@
<p>This macro reports the financial impacts of a battery installation, including
electricity costs with the battery+PV, PV, or no system.  The macro also reports
lifetime battery costs, which are used with lifetime electricity costs to determine if battery
installation is cost effective. Fixed monthly and minimum energy charges are not considered, as they are the same across all system options. 
A simulation over the entire analysis period will be conducted regardless of whether this option is selected</p>

<p> Outputs </p>
<ul><li>Demand Charge (Fixed) ($) - Total cost of fixed demand charges over analysis period </li>
	<li>Demand Charge (TOU) ($) - Total cost of time-of-use demand charges over analysis period </li>
	<li>Energy Charge ($) - Total cost of energy consumption charges over analysis period </li>
	<li>Fixed Monthly Charges ($) - Total cost of fixed monthly charges analysis period </li>
	<li>Minimum Monthly Charges ($) - Total cost of imposed minimum monthly charges over analysis period </li>
	<li>Minimum Annual Charges ($) - Total cost of imposed minimum annual charges over analysis period </li>
	<li>Total Electricity Cost ($) - Total cost of electricity charges over analysis period.  This is the sum of the Demand Charges (Fixed+TOU) and Energy Charges.</li>
	<li>Capital and Replacement ($) - Total cost of system and replacements</li>
	<li>Operation and Maintenance ($) - Total cost of operation and maintenance</li>
	<li>System and Electricity Cost ($) - The sum of Total Electricity Cost and Capital and Replacement costs </li>
	<li>Net Present Value ($) - The Net Present Value of the system, including electricity costs, taxs, and incentives </li>
</ul>
<p>
A system which offsets more electricity costs than the introduced capital and replacement costs may be considered beneficial.  
Negative values indicate credits to the system owner while positive values indicate payments from the system owner.
The column with the lowest "System and Electricity Cost" results in the lowest costs over the analysis period before considering net-present value (time value of money), taxes, and incentives.
The Net Present Value (NPV) reflects a full cash flow analysis including the discount rate, inflation, taxes, and incentives.  The column with the highest NPV reflects the most financially beneficial option under the current simulation conditions. 
A negative NPV implies that the project incurs a net loss over the analysis period.  The "No System" option always has an NPV of $0.
@*/

//@ name=rate_option;type=combo;label=Rate option for "no system" case:;value=1. Same rates as PV,2. Flat rate,3. Different rate structure;sel=0
//@ name=flat;type=number;label=Flat rate ($/kWh) for Option 2:;value=0
//@ name=fixed;type=number;label=Fixed monthly charge ($/mo) for Option 2:;value=0

//TO DO: calculate PV of battery replacements and show in present value table

//TO DO: test with all metering options

//TO DO (maybe): use array or table structure to store variables to minimize
//repeated code and to make it easier to export to CSV

function f_num( num )
{
	return sprintf('$%,',round(num));
}

function add_cf ( a, b, op )
{
	if (#a==#b && op == '+') 
	{
		for(i=0;i<#a;i++)
			s[i]=a[i]+b[i];
		return s;
	}
	
	if (#a==#b && op == '-') 
	{
		for(i=0;i<#a;i++)
			s[i]=a[i]-b[i];
		return s;
	}
	else return null;
}

function npv( cf, d )
{
	total = cf[0];
	for (i=1;i<#cf;i++)
		total+=cf[i]/(1+d/100)^i;
	return total;
}

function get_basecase_rate()
{
	find_by_zipcode = yesno( 'Find utility by zip code?\nChoose Yes to find by zip code. Choose No to choose from a list of all available utilities.');
	if ( find_by_zipcode ) 
	{
		zip = in( 'Enter the zip code: ', '00000', 'Zip Code' );
		utility_list = urdb_list_utilities_by_zip_code ( zip );
			if ( utility_list == null )
		{
			msgbox( 'No utilities found for zip code ' + zip + '.' );
			return false;
		}
	}
	else 
		utility_list = urdb_list_utilities();

	utility_choice = choose_from_list( utility_list, 'Choose a utility:','Choose Utility',0);
	
	rate_list = urdb_list_rates( utility_choice );
	
	// separate rate names from rate guids
	i=0;
	n=0;
	g=0;
	while ( i<#rate_list )
	{
		if ( mod(i,2) == 0 ) 
		{
			rate_name_list[n] = rate_list[i];
			n++;
		}	
		else
		{
			rate_guid_list[g] = rate_list[i];
			g++;
		}		
		i++;
	}
	
	// get desired rate name
	if ( #rate_list > 0 )
	{
		rate_choice = choose_from_list( rate_name_list, 'Choose a rate:', 'Chooose Rate', 0);
	}
	else
	{
		msgbox( 'No rates available for ' + utility_choice + '.');
		return false;
	}
	
	for ( i=0; i<#rate_name_list; i++ )
	{
		if ( rate_name_list[i] == rate_choice ) rate_index = i;
	}
	
	rate_table = urdb_get( rate_guid_list[rate_index] );	
	
	keys = @rate_table;
	for ( i=0; i<#keys; i++ )
	{
		set( 'ur_' + keys[i] , rate_table{keys[i]} );
	}
	
	return true;
}

function set_flat_rate( flat_rate, fixed_charge)
{
	set('ur_monthly_fixed_charge', fixed_charge);
	set('ur_annual_min_charge',0);
	set('ur_monthly_min_charge',0);
	set('ur_dc_enable',0);
	
	set('ur_ec_sched_weekday', 
		[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ] );

	set('ur_ec_sched_weekend',
		[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
		[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ] );

	set('ur_ec_tou_mat', 
		[ [ 1, 1, 9.9999996802856925e+037, 0, flat_rate, flat_rate ] ] );

	return true;

}

//Check that this macro was run from within a case
if ( typeof(macro) == 'unknown' ) {
	msgbox('This macro must be run from within a case.');
	exit;
}

config = configuration();
is_commercial = ( config[1] == 'Commercial' );

//TO DO: move this to pv and batt sections because cumulative excess generation
//depends on system generation. Then display value conditionally in html table.
metering = get('ur_metering_option');
is_net_metering_kwh = ( metering == 0 );
if ( is_net_metering_kwh ) 
{
	yrend_sell_rate = get('ur_nm_yearend_sell_rate');
	nm_credits_kwh = get('year1_monthly_cumulative_excess_generation');
	yrend_nm_credit = - yrend_sell_rate * nm_credits_kwh[11];
}

if ( get('en_batt') == 1 ) batt = true;
else batt = false;

// Financial parameters that apply to all scenarios
analysis_period = get('analysis_period');
discount_rate = get('nominal_discount_rate');
inflation_rate = get('inflation_rate');
escalation_rate = get('rate_escalation');

// No PV or Battery
temp_file = homedir() + '/current.txt';
restore_rate = false;
if ( macro.rate_option == '2. Flat rate' )
{
	// save current rate data to a temporary file
	urdb_write( temp_file );

	ok = set_flat_rate( macro.flat , macro.fixed );
	if ( ok ) simulate('',true);
	else msgbox ('Unable to set flat rate.\n Results will be based on using the same rate for all scenarios.' );

	restore_rate = true;
}
elseif ( macro.rate_option == '3. Different rate structure' ) 
{
	// save current rate data to a temporary file
	urdb_write( temp_file );

	// get new base rate and run a simulation
	ok = get_basecase_rate ();
	if ( ok ) simulate('',true);
	else msgbox( 'Unable to set rate data for case with no system.\n Results will be based on using the same rate for all scenarios.' );
	
	restore_rate = true;
}
else simulate('',true); // 1. Same rate structure

if ( restore_rate )
{
	if ( file_exists( temp_file ) && urdb_read( temp_file ) ) remove_file( temp_file );
	else msgbox( 'Unable to restore original rate data.\nCould not find temporary file:\n' + temp_file + '.');
}

// get monthly bill components
ec = get('year1_monthly_ec_charge_without_system');
fixed = get('year1_monthly_fixed_without_system');
dc_tou = get('year1_monthly_dc_tou_without_system');
dc_fixed = get('year1_monthly_dc_fixed_without_system');
min_mon = get('year1_monthly_minimum_without_system');
min_ann = get('year1_annual_minimum_without_system');
total = get('year1_monthly_utility_bill_wo_sys');
// year 1 bill components for pv only
none_ec = sum(ec);
none_fixed = sum(fixed);
none_dc_fixed = sum(dc_fixed);
none_dc_tou = sum(dc_tou);
none_min_mon = sum(min_mon);
none_min_ann = sum(min_ann);
none_total_bill = sum(total);
//annual cash flows for value calculations
none_annual_cashflow = get('elec_cost_without_system');
none_npc = npv(none_annual_cashflow,discount_rate);
none_npv = 0;

// PV Only
if ( batt ) set('en_batt',0);
simulate('',true);
// get monthly bill components
ec = get('year1_monthly_ec_charge_with_system');
fixed = get('year1_monthly_fixed_with_system');
dc_tou = get('year1_monthly_dc_tou_with_system');
dc_fixed = get('year1_monthly_dc_fixed_with_system');
min_mon = get('year1_monthly_minimum_with_system');
min_ann = get('year1_annual_minimum_with_system');
total = get('year1_monthly_utility_bill_w_sys');
// year 1 bill components for pv only
pv_ec = sum(ec);
pv_fixed = sum(fixed);
pv_dc_fixed = sum(dc_fixed);
pv_dc_tou = sum(dc_tou);
pv_min_mon = sum(min_mon);
pv_min_ann = sum(min_ann);
pv_total_bill = sum(total);
pv_bill_savings = none_total_bill - pv_total_bill ;
//annual cash flows for value calculations
pv_annual_cost = get('cf_after_tax_net_equity_cost_flow');
pv_npc = -npv(pv_annual_cost,discount_rate);
pv_annual_bill = get('elec_cost_with_system');
pv_bill_npc = npv(pv_annual_bill,discount_rate);
if ( is_commercial ) // calculate tax on increase in income due to bill savings
{
	tax_rate = get('effective_tax_rate')/100;
	for (i=0;i<#pv_annual_bill;i++)
	{
		savings[i] = none_annual_cashflow[i] - pv_annual_bill[i];
		tax[i] = savings[i]*tax_rate;
		pv_after_tax_bill[i] = pv_annual_bill[i] + tax[i];
	}
	npv_tax=npv(tax,discount_rate);
	cost_w_bill = add_cf(pv_annual_cost,pv_after_tax_bill,'-');
}
else cost_w_bill = add_cf(pv_annual_cost,pv_annual_bill,'-');
pv_npc_w_bill = -npv(cost_w_bill,discount_rate); //costs are negative
pv_npv = get('npv');

// PV+Battery
if ( batt )
{
	if (get('pv_lifetime_simulation') == false )
	{
		msgbox('Battery replacement costs require simulation over analysis period.\n' +
		       'On the Lifetime page, you chose the "PV simulation over one year" option. ' +
		       'This macro requires that the setting be "PV simulation over analysis period"' +
		       'and automatically changed the setting for you.');
		set('pv_lifetime_simulation',true);
	}
	set('en_batt',1);
	simulate('',true);
	// get monthly bill components
	ec = get('year1_monthly_ec_charge_with_system');
	fixed = get('year1_monthly_fixed_with_system');
	dc_tou = get('year1_monthly_dc_tou_with_system');
	dc_fixed = get('year1_monthly_dc_fixed_with_system');
	min_mon = get('year1_monthly_minimum_with_system');
	min_ann = get('year1_annual_minimum_with_system');
	total = get('year1_monthly_utility_bill_w_sys');
	// year 1 bill components for pv+battery
	batt_ec = sum(ec);
	batt_fixed = sum(fixed);
	batt_dc_fixed = sum(dc_fixed);
	batt_dc_tou = sum(dc_tou);
	batt_min_mon = sum(min_mon);
	batt_min_ann = sum(min_ann);
	batt_total_bill = sum(total);
	batt_bill_savings = none_total_bill- batt_total_bill;
	//annual cash flows for value calculations
	batt_annual_cost = get('cf_after_tax_net_equity_cost_flow');
	batt_npc = -npv(batt_annual_cost,discount_rate);
	batt_annual_replacement_cost = get('cf_battery_replacement_cost');
	batt_npc_replacement_cost = npv(batt_annual_replacement_cost,discount_rate);
	batt_npc_replacement = -npv(batt_annual_replacement_cost,discount_rate);
	batt_annual_bill = get('elec_cost_with_system');
	batt_bill_npc = npv(batt_annual_bill,discount_rate);
	cost_w_bill = add_cf(batt_annual_cost,batt_annual_bill,'-');
	batt_npc_w_bill = -npv(cost_w_bill,discount_rate); //costs are negative
	batt_npv = get('npv');
}
diff = none_npc-pv_npc_w_bill;
outln( none_npc + '-' + pv_npc_w_bill + '=' + diff );
outln(pv_annual_cost[0]);
// HTML Output
case = case_name();
str_html = '<html><body>' + 
           '<h3><font size = "4">Annual Electricity Bill in Year 1</font></h3>' + 
           '<table bgcolor=#dddddd width=100%>' + 
           '<tr><th>Charge</th><th>No System</th>' + ? batt [ '<th>PV System</th>' , '<th>PV Only</th><th>PV+Battery</th>' ] + '</tr>' + 
           '<tr bgcolor=#ffffff><td>Energy</td><td align="right">' + f_num(none_ec) + '</td><td align="right">' + f_num(pv_ec) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_ec) + '</td>' ] + '</tr>' +             
           '<tr><td>Fixed</td><td align="right">' + f_num(none_fixed) + '</td><td align="right">' + f_num(pv_fixed) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_fixed) + '</td>' ] + '</tr>' +             
           '<tr bgcolor=#ffffff><td width="50%">Demand (fixed)</td><td align="right">' + f_num(none_dc_fixed) + '</td><td align="right">' + f_num(pv_dc_fixed) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_dc_fixed) + '</td>' ] + '</tr>' +             
           '<tr><td>Demand (TOU)</td><td align="right">' + f_num(none_dc_tou) + '</td><td align="right">' + f_num(pv_dc_tou) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_dc_tou) + '</td>' ] + '</tr>' +             
           '<tr bgcolor=#ffffff><td>Monthly minimum</td><td align="right">' + f_num(none_min_mon) + '</td><td align="right">' + f_num(pv_min_mon) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_min_mon) + '</td>' ] + '</tr>' +             
		   '<tr><td>Annual minimum</td><td align="right">' + f_num(none_min_ann) + '</td><td align="right">' + f_num(pv_min_ann) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_min_ann) + '</td>' ] + '</tr>' +             
		   '<tr><td>Year end net metering credit</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_yrend_nm_credit) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_min_ann) + '</td>' ] + '</tr>' +             
           '<tr bgcolor=#ffffff><td><b>Total bill</b></td><td align="right"><b>' + f_num(none_total_bill) + '</b></td><td align="right"><b>' + f_num(pv_total_bill) + '</b></td>' + ? batt [ '' , '<td align="right"><b>' + f_num(batt_total_bill) + '</b></td>' ] + '</tr>' +
           '<tr bgcolor=#ffffff><td>Savings compared to no system</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_bill_savings) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_bill_savings) + '</td>' ] + '</tr>' +
		   '</table>' +
		   '<br><br><br>' +
           '<h3><font size = "4">Present Value of Annual Costs and Net Present Value</font></h3>' + 
           '<table bgcolor=#dddddd width=100%>' + 
           '<tr><th>Present Value</th><th>No System</th>'+ ? batt [ '<th>PV System</th>' , '<th>PV Only</th><th>PV+Battery</th>' ] + '</tr>' + 
           '<tr bgcolor=#ffffff><td width="50%">Electricity bill</td><td align="right">' + f_num(none_npc) + '</td><td align="right">' + f_num(pv_bill_npc) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_bill_npc) + '</td>' ] + '</tr>' +
           ? is_commercial [ '' , '<tr><td width="50%">Tax on increase in income due to bill savings</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(npv_tax) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npc) + '</td>' ] + '</tr>' ] + 
           '<tr bgcolor=#ffffff><td width="50%">System costs after tax</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_npc) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npc) + '</td>' ] + '</tr>' +
           '<tr><td width="50%">System costs after tax including bill</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_npc_w_bill) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npc_w_bill) + '</td>' ] + '</tr>' +
		   '<tr bgcolor=#ffffff><td>NPV of project with bill savings</td><td align="right">' + f_num(0) + '</td><td align="right">' + f_num(pv_npv) + '</td>' + ? batt [ '' , '<td align="right">' + f_num(batt_npv) + '</td>' ] + '</tr>' +
		   '</table>' +
          '</body></html>';

html_dialog ( str_html , 'Value of PV' + ? batt [ '', ' and Battery' ] + ' for "' + case + '" Case' , [300,300,600,600]);

